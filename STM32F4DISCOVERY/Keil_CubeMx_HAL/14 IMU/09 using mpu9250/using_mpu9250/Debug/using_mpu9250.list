
using_mpu9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005820  08005820  00015820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005970  08005970  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005978  08005978  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000029c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ccc4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022e8  00000000  00000000  0002cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d00  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f4  00000000  00000000  0002fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022703  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f6e9  00000000  00000000  00052e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd73e  00000000  00000000  00062568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fc4  00000000  00000000  0012fca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00133c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005804 	.word	0x08005804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005804 	.word	0x08005804

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8000ec2:	f107 0317 	add.w	r3, r7, #23
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	9200      	str	r2, [sp, #0]
 8000eca:	2275      	movs	r2, #117	; 0x75
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8a9 	bl	8001026 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b71      	cmp	r3, #113	; 0x71
 8000ed8:	d17f      	bne.n	8000fda <MPU_begin+0x122>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8000eda:	236b      	movs	r3, #107	; 0x6b
 8000edc:	75bb      	strb	r3, [r7, #22]
        val = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	757b      	strb	r3, [r7, #21]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000ee2:	f107 0315 	add.w	r3, r7, #21
 8000ee6:	f107 0216 	add.w	r2, r7, #22
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f87b 	bl	8000fe8 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8000ef2:	236a      	movs	r3, #106	; 0x6a
 8000ef4:	75bb      	strb	r3, [r7, #22]
        val = 0x10;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	757b      	strb	r3, [r7, #21]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000efa:	f107 0315 	add.w	r3, r7, #21
 8000efe:	f107 0216 	add.w	r2, r7, #22
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f86f 	bl	8000fe8 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000f10:	461a      	mov	r2, r3
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f941 	bl	800119c <MPU_writeAccFullScaleRange>
        //addr = 29;
        //val  = ;
        //MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);


        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000f20:	461a      	mov	r2, r3
 8000f22:	6839      	ldr	r1, [r7, #0]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f9a1 	bl	800126c <MPU_writeGyroFullScaleRange>
        // digital filter for gyro , smplrt_div, dlpf

        /* ROM START */
        // Enable I2C Master setting 400Khz
        uint8_t reg, value;
        reg = USR_CTRL_REG; value = USR_CTRL_REG_I2CEN;
 8000f2a:	236a      	movs	r3, #106	; 0x6a
 8000f2c:	753b      	strb	r3, [r7, #20]
 8000f2e:	2320      	movs	r3, #32
 8000f30:	74fb      	strb	r3, [r7, #19]
        MPU_REG_WRITE(SPIx, pMPU9250, &reg, &value);
 8000f32:	f107 0313 	add.w	r3, r7, #19
 8000f36:	f107 0214 	add.w	r2, r7, #20
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f853 	bl	8000fe8 <MPU_REG_WRITE>
        reg = I2C_MSTR_CTRL_REG; value = I2C_MSTR_CTRL_400;
 8000f42:	2324      	movs	r3, #36	; 0x24
 8000f44:	753b      	strb	r3, [r7, #20]
 8000f46:	230d      	movs	r3, #13
 8000f48:	74fb      	strb	r3, [r7, #19]
        MPU_REG_WRITE(SPIx, pMPU9250, &reg, &value);
 8000f4a:	f107 0313 	add.w	r3, r7, #19
 8000f4e:	f107 0214 	add.w	r2, r7, #20
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f847 	bl	8000fe8 <MPU_REG_WRITE>

        // POWER down Magnetometer
        reg = AK8963_CTRL_REG; value = AK8963_PWR_DWN;
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	753b      	strb	r3, [r7, #20]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	74fb      	strb	r3, [r7, #19]
        MPU_REG_WRITE(SPIx, pMPU9250, &reg, &value);
 8000f62:	f107 0313 	add.w	r3, r7, #19
 8000f66:	f107 0214 	add.w	r2, r7, #20
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f83b 	bl	8000fe8 <MPU_REG_WRITE>
        HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f001 f94e 	bl	8002214 <HAL_Delay>

        ak8963_write_reg(SPIx, pMPU9250, AK8963_CTRL_REG, AK8963_FUSE_ROM);
 8000f78:	230f      	movs	r3, #15
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f877 	bl	8001072 <ak8963_write_reg>
        HAL_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f001 f945 	bl	8002214 <HAL_Delay>

        ak8963_read_reg(SPIx, pMPU9250, AK8963_SEN_ONSET_REG, mag_adjust, 3);
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MPU_begin+0x12c>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f8ab 	bl	80010f0 <ak8963_read_reg>

        ak8963_write_reg(SPIx, pMPU9250, AK8963_CTRL_REG, AK8963_PWR_DWN);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f866 	bl	8001072 <ak8963_write_reg>
        HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f001 f934 	bl	8002214 <HAL_Delay>

        ak8963_write_reg(SPIx, pMPU9250, AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 8000fac:	2316      	movs	r3, #22
 8000fae:	220a      	movs	r2, #10
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f85d 	bl	8001072 <ak8963_write_reg>
        HAL_Delay(10);
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f001 f92b 	bl	8002214 <HAL_Delay>

        // measure high, low 6 bytes and overflow
        uint8_t temp_data[7];
        ak8963_read_reg(SPIx, pMPU9250, AK8963_DATA_ONSET_REG, temp_data, 7);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f890 	bl	80010f0 <ak8963_read_reg>
        HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f001 f91f 	bl	8002214 <HAL_Delay>
        /* ROM END */
        return 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <MPU_begin+0x124>
    }
    else
    {
        return 0;
 8000fda:	2300      	movs	r3, #0
    }
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000084 	.word	0x20000084

08000fe8 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f8ba 	bl	8001172 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8000ffe:	2301      	movs	r3, #1
 8001000:	2201      	movs	r2, #1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f002 f8de 	bl	80031c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 800100a:	2301      	movs	r3, #1
 800100c:	2201      	movs	r2, #1
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f002 f8d8 	bl	80031c6 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8001016:	2101      	movs	r1, #1
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f000 f8aa 	bl	8001172 <MPU_CS>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8001036:	2100      	movs	r1, #0
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f89a 	bl	8001172 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001044:	b2db      	uxtb	r3, r3
 8001046:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8001048:	f107 0117 	add.w	r1, r7, #23
 800104c:	2301      	movs	r3, #1
 800104e:	2201      	movs	r2, #1
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f002 f8b8 	bl	80031c6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8001056:	8c3a      	ldrh	r2, [r7, #32]
 8001058:	2301      	movs	r3, #1
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f002 f9f5 	bl	800344c <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8001062:	2101      	movs	r1, #1
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f000 f884 	bl	8001172 <MPU_CS>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ak8963_write_reg>:

void ak8963_write_reg(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t reg, uint8_t data)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	4611      	mov	r1, r2
 800107e:	461a      	mov	r2, r3
 8001080:	460b      	mov	r3, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
	uint8_t r = I2C_SLV0_ADDR_REG; uint8_t v = AK8963_ADDRESS;
 8001088:	2325      	movs	r3, #37	; 0x25
 800108a:	75fb      	strb	r3, [r7, #23]
 800108c:	230c      	movs	r3, #12
 800108e:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 8001090:	f107 0316 	add.w	r3, r7, #22
 8001094:	f107 0217 	add.w	r2, r7, #23
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ffa4 	bl	8000fe8 <MPU_REG_WRITE>
	r = I2C_SLV0_REG_REG; v = reg;
 80010a0:	2326      	movs	r3, #38	; 0x26
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 80010a8:	f107 0316 	add.w	r3, r7, #22
 80010ac:	f107 0217 	add.w	r2, r7, #23
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff98 	bl	8000fe8 <MPU_REG_WRITE>
	r = I2C_SLV0_DATA_REG; v = data;
 80010b8:	2363      	movs	r3, #99	; 0x63
 80010ba:	75fb      	strb	r3, [r7, #23]
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 80010c0:	f107 0316 	add.w	r3, r7, #22
 80010c4:	f107 0217 	add.w	r2, r7, #23
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff ff8c 	bl	8000fe8 <MPU_REG_WRITE>
	r = I2C_SLV0_CTRL_REG; v = (I2C_SLV0_CTRL_EN|0x01);
 80010d0:	2327      	movs	r3, #39	; 0x27
 80010d2:	75fb      	strb	r3, [r7, #23]
 80010d4:	2381      	movs	r3, #129	; 0x81
 80010d6:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 80010d8:	f107 0316 	add.w	r3, r7, #22
 80010dc:	f107 0217 	add.w	r2, r7, #23
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff ff80 	bl	8000fe8 <MPU_REG_WRITE>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <ak8963_read_reg>:

void ak8963_read_reg(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t reg, uint8_t *data, uint8_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71fb      	strb	r3, [r7, #7]
	uint8_t r = I2C_SLV0_ADDR_REG; uint8_t v = (0x80 | AK8963_ADDRESS);
 8001100:	2325      	movs	r3, #37	; 0x25
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	238c      	movs	r3, #140	; 0x8c
 8001106:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 8001108:	f107 0316 	add.w	r3, r7, #22
 800110c:	f107 0217 	add.w	r2, r7, #23
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff ff68 	bl	8000fe8 <MPU_REG_WRITE>

	r = I2C_SLV0_REG_REG; v = reg;
 8001118:	2326      	movs	r3, #38	; 0x26
 800111a:	75fb      	strb	r3, [r7, #23]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 8001120:	f107 0316 	add.w	r3, r7, #22
 8001124:	f107 0217 	add.w	r2, r7, #23
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff ff5c 	bl	8000fe8 <MPU_REG_WRITE>

	r = I2C_SLV0_CTRL_REG; v = (I2C_SLV0_CTRL_EN|len);
 8001130:	2327      	movs	r3, #39	; 0x27
 8001132:	75fb      	strb	r3, [r7, #23]
 8001134:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	75bb      	strb	r3, [r7, #22]
	MPU_REG_WRITE(SPIx, pMPU9250, &r, &v);
 8001140:	f107 0316 	add.w	r3, r7, #22
 8001144:	f107 0217 	add.w	r2, r7, #23
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff4c 	bl	8000fe8 <MPU_REG_WRITE>
	HAL_Delay(10);
 8001150:	200a      	movs	r0, #10
 8001152:	f001 f85f 	bl	8002214 <HAL_Delay>

	MPU_REG_READ(SPIx, pMPU9250, EXT_SENS_DATA_00_REG, data, len);
 8001156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800115a:	b29b      	uxth	r3, r3
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2217      	movs	r2, #23
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff ff5e 	bl	8001026 <MPU_REG_READ>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001188:	b29b      	uxth	r3, r3
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	4619      	mov	r1, r3
 800118e:	f001 fb13 	bl	80027b8 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 80011aa:	231c      	movs	r3, #28
 80011ac:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d847      	bhi.n	8001244 <MPU_writeAccFullScaleRange+0xa8>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <MPU_writeAccFullScaleRange+0x20>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011eb 	.word	0x080011eb
 80011c4:	08001209 	.word	0x08001209
 80011c8:	08001227 	.word	0x08001227
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80011d2:	615a      	str	r2, [r3, #20]
        val = 0x00;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011d8:	f107 0316 	add.w	r3, r7, #22
 80011dc:	f107 0217 	add.w	r2, r7, #23
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff ff00 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 80011e8:	e03b      	b.n	8001262 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80011f0:	615a      	str	r2, [r3, #20]
        val = 0x08;
 80011f2:	2308      	movs	r3, #8
 80011f4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011f6:	f107 0316 	add.w	r3, r7, #22
 80011fa:	f107 0217 	add.w	r2, r7, #23
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fef1 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 8001206:	e02c      	b.n	8001262 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800120e:	615a      	str	r2, [r3, #20]
        val = 0x10;
 8001210:	2310      	movs	r3, #16
 8001212:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001214:	f107 0316 	add.w	r3, r7, #22
 8001218:	f107 0217 	add.w	r2, r7, #23
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fee2 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 8001224:	e01d      	b.n	8001262 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800122c:	615a      	str	r2, [r3, #20]
        val = 0x18;
 800122e:	2318      	movs	r3, #24
 8001230:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001232:	f107 0316 	add.w	r3, r7, #22
 8001236:	f107 0217 	add.w	r2, r7, #23
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff fed3 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 8001242:	e00e      	b.n	8001262 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800124a:	615a      	str	r2, [r3, #20]
        val = 0x08;
 800124c:	2308      	movs	r3, #8
 800124e:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001250:	f107 0316 	add.w	r3, r7, #22
 8001254:	f107 0217 	add.w	r2, r7, #23
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fec4 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 8001260:	bf00      	nop
    }
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800127a:	231b      	movs	r3, #27
 800127c:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d843      	bhi.n	800130c <MPU_writeGyroFullScaleRange+0xa0>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <MPU_writeGyroFullScaleRange+0x20>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012b9 	.word	0x080012b9
 8001294:	080012d5 	.word	0x080012d5
 8001298:	080012f1 	.word	0x080012f1
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <MPU_writeGyroFullScaleRange+0xc4>)
 80012a0:	619a      	str	r2, [r3, #24]
        val = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80012a6:	f107 0316 	add.w	r3, r7, #22
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff fe99 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 80012b6:	e037      	b.n	8001328 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <MPU_writeGyroFullScaleRange+0xc8>)
 80012bc:	619a      	str	r2, [r3, #24]
        val = 0x08;
 80012be:	2308      	movs	r3, #8
 80012c0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80012c2:	f107 0316 	add.w	r3, r7, #22
 80012c6:	f107 0217 	add.w	r2, r7, #23
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff fe8b 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 80012d2:	e029      	b.n	8001328 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MPU_writeGyroFullScaleRange+0xcc>)
 80012d8:	619a      	str	r2, [r3, #24]
        val = 0x10;
 80012da:	2310      	movs	r3, #16
 80012dc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80012de:	f107 0316 	add.w	r3, r7, #22
 80012e2:	f107 0217 	add.w	r2, r7, #23
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff fe7d 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 80012ee:	e01b      	b.n	8001328 <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MPU_writeGyroFullScaleRange+0xd0>)
 80012f4:	619a      	str	r2, [r3, #24]
        val = 0x18;
 80012f6:	2318      	movs	r3, #24
 80012f8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80012fa:	f107 0316 	add.w	r3, r7, #22
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff fe6f 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 800130a:	e00d      	b.n	8001328 <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <MPU_writeGyroFullScaleRange+0xc8>)
 8001310:	619a      	str	r2, [r3, #24]
        val = 0x08;
 8001312:	2308      	movs	r3, #8
 8001314:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001316:	f107 0316 	add.w	r3, r7, #22
 800131a:	f107 0217 	add.w	r2, r7, #23
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff fe61 	bl	8000fe8 <MPU_REG_WRITE>
        break;
 8001326:	bf00      	nop
    }
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	43030000 	.word	0x43030000
 8001334:	42830000 	.word	0x42830000
 8001338:	42033333 	.word	0x42033333
 800133c:	41833333 	.word	0x41833333

08001340 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[20];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, &buf[0], 20);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2214      	movs	r2, #20
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	223b      	movs	r2, #59	; 0x3b
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fe65 	bl	8001026 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 800135c:	7b3b      	ldrb	r3, [r7, #12]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21a      	sxth	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 8001380:	7c3b      	ldrb	r3, [r7, #16]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7c7b      	ldrb	r3, [r7, #17]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    pMPU9250->rawData.gx = buf[8]  << 8 | buf[9];
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	7d7b      	ldrb	r3, [r7, #21]
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21a      	sxth	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	80da      	strh	r2, [r3, #6]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 80013b6:	7e3b      	ldrb	r3, [r7, #24]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	7e7b      	ldrb	r3, [r7, #25]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	815a      	strh	r2, [r3, #10]

    pMPU9250->rawData.mx = buf[15] << 8 | buf[14];
 80013c8:	7efb      	ldrb	r3, [r7, #27]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	7ebb      	ldrb	r3, [r7, #26]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	819a      	strh	r2, [r3, #12]
    pMPU9250->rawData.my = buf[17] << 8 | buf[16];
 80013da:	7f7b      	ldrb	r3, [r7, #29]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7f3b      	ldrb	r3, [r7, #28]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	81da      	strh	r2, [r3, #14]
    pMPU9250->rawData.mz = buf[19] << 8 | buf[18];
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7fbb      	ldrb	r3, [r7, #30]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	821a      	strh	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b088      	sub	sp, #32
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	4613      	mov	r3, r2
 8001412:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800142a:	2300      	movs	r3, #0
 800142c:	827b      	strh	r3, [r7, #18]
 800142e:	e01e      	b.n	800146e <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff ff84 	bl	8001340 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800143e:	461a      	mov	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800144c:	461a      	mov	r2, r3
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4413      	add	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800145a:	461a      	mov	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8001462:	2003      	movs	r0, #3
 8001464:	f000 fed6 	bl	8002214 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001468:	8a7b      	ldrh	r3, [r7, #18]
 800146a:	3301      	adds	r3, #1
 800146c:	827b      	strh	r3, [r7, #18]
 800146e:	8a7a      	ldrh	r2, [r7, #18]
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3dc      	bcc.n	8001430 <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2b 	bl	8001340 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	ed93 7a05 	vldr	s14, [r3, #20]
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	ed93 7a05 	vldr	s14, [r3, #20]
 800153a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80015c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80015d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // ROM ADD
    pMPU9250->sensorData.mx = pMPU9250->rawData.mx - MAG_X_BIAS;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015e6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pMPU9250->sensorData.my = pMPU9250->rawData.my - MAG_Y_BIAS;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015fe:	3bf3      	subs	r3, #243	; 0xf3
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    pMPU9250->sensorData.mz = pMPU9250->rawData.mz - MAG_Z_BIAS;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001614:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    // Normalize data
    /* Magneto */
    float32_t norm_accelero, norm_magneto;
    arm_status arm_status_temp;
    arm_status_temp = arm_sqrt_f32((float32_t)pMPU9250->sensorData.mx * pMPU9250->sensorData.mx
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001632:	ee27 7a27 	vmul.f32	s14, s14, s15
    			+ (float32_t)pMPU9250->sensorData.my * pMPU9250->sensorData.my
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
    			+ (float32_t)pMPU9250->sensorData.mz * pMPU9250->sensorData.mz, &norm_magneto);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001656:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status_temp = arm_sqrt_f32((float32_t)pMPU9250->sensorData.mx * pMPU9250->sensorData.mx
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	edc7 7a08 	vstr	s15, [r7, #32]
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001668:	edd7 7a08 	vldr	s15, [r7, #32]
 800166c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	db0a      	blt.n	800168c <MPU_readProcessedData+0x1b4>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001676:	ed97 0a08 	vldr	s0, [r7, #32]
 800167a:	f003 fe2f 	bl	80052dc <sqrtf>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001688:	2300      	movs	r3, #0
 800168a:	e005      	b.n	8001698 <MPU_readProcessedData+0x1c0>
    }
    else
    {
      *pOut = 0.0f;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(arm_status_temp != ARM_MATH_SUCCESS)
 800169c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <MPU_readProcessedData+0x1da>
    {
    	printf("error sqrt of magneto norm! %d \n", arm_status_temp);
 80016a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016a8:	4619      	mov	r1, r3
 80016aa:	4845      	ldr	r0, [pc, #276]	; (80017c0 <MPU_readProcessedData+0x2e8>)
 80016ac:	f002 ff9e 	bl	80045ec <iprintf>
    	while(1);
 80016b0:	e7fe      	b.n	80016b0 <MPU_readProcessedData+0x1d8>
    }
    pMPU9250->sensorData.mx /= norm_magneto;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80016b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    pMPU9250->sensorData.my /= norm_magneto;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80016cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    pMPU9250->sensorData.mz /= norm_magneto;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80016e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    /* Accelero */
    arm_status_temp = arm_sqrt_f32((float32_t)pMPU9250->sensorData.ax * pMPU9250->sensorData.ax
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
        			+ (float32_t)pMPU9250->sensorData.ay * pMPU9250->sensorData.ay
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	edd3 6a08 	vldr	s13, [r3, #32]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	edd3 7a08 	vldr	s15, [r3, #32]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
        			+ (float32_t)pMPU9250->sensorData.az * pMPU9250->sensorData.az, &norm_accelero);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    arm_status_temp = arm_sqrt_f32((float32_t)pMPU9250->sensorData.ax * pMPU9250->sensorData.ax
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	edc7 7a06 	vstr	s15, [r7, #24]
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	db0a      	blt.n	8001754 <MPU_readProcessedData+0x27c>
      *pOut = __builtin_sqrtf(in);
 800173e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001742:	f003 fdcb 	bl	80052dc <sqrtf>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001750:	2300      	movs	r3, #0
 8001752:	e005      	b.n	8001760 <MPU_readProcessedData+0x288>
      *pOut = 0.0f;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(arm_status_temp != ARM_MATH_SUCCESS)
 8001764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <MPU_readProcessedData+0x2a2>
    {
    	printf("error sqrt of accelero norm! %d \n", arm_status_temp);
 800176c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001770:	4619      	mov	r1, r3
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MPU_readProcessedData+0x2ec>)
 8001774:	f002 ff3a 	bl	80045ec <iprintf>
        while(1);
 8001778:	e7fe      	b.n	8001778 <MPU_readProcessedData+0x2a0>
    }
    pMPU9250->sensorData.ax /= norm_accelero;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001780:	ed97 7a04 	vldr	s14, [r7, #16]
 8001784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	edc3 7a07 	vstr	s15, [r3, #28]
    pMPU9250->sensorData.ay /= norm_accelero;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	edd3 6a08 	vldr	s13, [r3, #32]
 8001794:	ed97 7a04 	vldr	s14, [r7, #16]
 8001798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.az /= norm_accelero;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80017a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80017ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08005820 	.word	0x08005820
 80017c4:	08005844 	.word	0x08005844

080017c8 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fe7f 	bl	80014d8 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(pMPU9250->sensorData.ay, pMPU9250->sensorData.az) * RAD2DEG;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feaa 	bl	8000538 <__aeabi_f2d>
 80017e4:	4604      	mov	r4, r0
 80017e6:	460d      	mov	r5, r1
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fea3 	bl	8000538 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ec43 2b11 	vmov	d1, r2, r3
 80017fa:	ec45 4b10 	vmov	d0, r4, r5
 80017fe:	f003 fd6b 	bl	80052d8 <atan2>
 8001802:	ec51 0b10 	vmov	r0, r1, d0
 8001806:	a344      	add	r3, pc, #272	; (adr r3, 8001918 <MPU_calcAttitude+0x150>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe feec 	bl	80005e8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f980 	bl	8000b1c <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(pMPU9250->sensorData.ax, pMPU9250->sensorData.az) * RAD2DEG;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe87 	bl	8000538 <__aeabi_f2d>
 800182a:	4604      	mov	r4, r0
 800182c:	460d      	mov	r5, r1
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe80 	bl	8000538 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ec43 2b11 	vmov	d1, r2, r3
 8001840:	ec45 4b10 	vmov	d0, r4, r5
 8001844:	f003 fd48 	bl	80052d8 <atan2>
 8001848:	ec51 0b10 	vmov	r0, r1, d0
 800184c:	a332      	add	r3, pc, #200	; (adr r3, 8001918 <MPU_calcAttitude+0x150>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fec9 	bl	80005e8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f95d 	bl	8000b1c <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	60bb      	str	r3, [r7, #8]

    //float accelPitch = atan2(pMPU9250->sensorData.ay, pMPU9250->sensorData.az);
    //float accelRoll = atan2(pMPU9250->sensorData.ax, pMPU9250->sensorData.az);

    pMPU9250->attitude.r = pMPU9250->attitude.tau * (pMPU9250->attitude.r - pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelRoll;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800187e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001882:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001894:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001898:	edd7 7a02 	vldr	s15, [r7, #8]
 800189c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    pMPU9250->attitude.p = pMPU9250->attitude.tau * (pMPU9250->attitude.p - pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelPitch;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80018c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80018d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    pMPU9250->attitude.y += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bdb0      	pop	{r4, r5, r7, pc}
 8001916:	bf00      	nop
 8001918:	1a63cbb0 	.word	0x1a63cbb0
 800191c:	404ca5dc 	.word	0x404ca5dc

08001920 <print_accelero>:
		pMPU9250->gyro_Attitude.yaw = pMPU9250->gyro_Attitude.yaw + 2 * PI;
	}

}
void print_accelero(MPU9250_t *pMPU9250)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	printf("Accelero : %d, %d, and %d \n", (int)pMPU9250->sensorData.ax, (int)pMPU9250->sensorData.ay, (int)pMPU9250->sensorData.az);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	edd3 7a07 	vldr	s15, [r3, #28]
 800192e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edd3 7a08 	vldr	s15, [r3, #32]
 8001938:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001946:	ee17 3a90 	vmov	r3, s15
 800194a:	ee16 2a90 	vmov	r2, s13
 800194e:	ee17 1a10 	vmov	r1, s14
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <print_accelero+0x40>)
 8001954:	f002 fe4a 	bl	80045ec <iprintf>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08005868 	.word	0x08005868

08001964 <print_gyro>:
void print_gyro(MPU9250_t *pMPU9250)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	printf("Gyro : %d, %d, and %d \n", (int)pMPU9250->sensorData.gx, (int)pMPU9250->sensorData.gy, (int)pMPU9250->sensorData.gz);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001972:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800197c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198a:	ee17 3a90 	vmov	r3, s15
 800198e:	ee16 2a90 	vmov	r2, s13
 8001992:	ee17 1a10 	vmov	r1, s14
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <print_gyro+0x40>)
 8001998:	f002 fe28 	bl	80045ec <iprintf>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08005884 	.word	0x08005884

080019a8 <print_magneto>:
void print_magneto(MPU9250_t *pMPU9250)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	printf("Magneto : %d, %d, and %d \n", (int)pMPU9250->sensorData.mx, (int)pMPU9250->sensorData.my, (int)pMPU9250->sensorData.mz);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80019b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019c0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	ee17 3a90 	vmov	r3, s15
 80019d2:	ee16 2a90 	vmov	r2, s13
 80019d6:	ee17 1a10 	vmov	r1, s14
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <print_magneto+0x40>)
 80019dc:	f002 fe06 	bl	80045ec <iprintf>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	0800589c 	.word	0x0800589c

080019ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_GPIO_Init+0xb4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2101      	movs	r1, #1
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <MX_GPIO_Init+0xb8>)
 8001a78:	f000 fe9e 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_GPIO_Init+0xb8>)
 8001a94:	f000 fcf4 	bl	8002480 <HAL_GPIO_Init>

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ab4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ac0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ac8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad0:	e000      	b.n	8001ad4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ad2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f9      	beq.n	8001ad2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ade:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	mpu.settings.gFullScaleRange = GFSR_500DPS;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <main+0x74>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	mpu.settings.aFullScaleRange = AFSR_4G;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <main+0x74>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	mpu.settings.CS_PIN = GPIO_PIN_0;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <main+0x74>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	mpu.settings.CS_PORT = GPIOC;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <main+0x74>)
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <main+0x78>)
 8001b18:	67da      	str	r2, [r3, #124]	; 0x7c
	mpu.attitude.tau = 0.98;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <main+0x74>)
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <main+0x7c>)
 8001b1e:	64da      	str	r2, [r3, #76]	; 0x4c
	mpu.attitude.dt = 0.010;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <main+0x74>)
 8001b22:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <main+0x80>)
 8001b24:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b26:	f000 fb03 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2a:	f000 f82b 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2e:	f7ff ff5d 	bl	80019ec <MX_GPIO_Init>
  MX_SPI2_Init();
 8001b32:	f000 f8c9 	bl	8001cc8 <MX_SPI2_Init>
  MX_TIM9_Init();
 8001b36:	f000 fa6d 	bl	8002014 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  if(MPU_begin(&hspi2, &mpu) != 1) { while(1); }
 8001b3a:	490c      	ldr	r1, [pc, #48]	; (8001b6c <main+0x74>)
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <main+0x84>)
 8001b3e:	f7ff f9bb 	bl	8000eb8 <MPU_begin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d000      	beq.n	8001b4a <main+0x52>
 8001b48:	e7fe      	b.n	8001b48 <main+0x50>
  MPU_calibrateGyro(&hspi2, &mpu, 1000);
 8001b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4e:	4907      	ldr	r1, [pc, #28]	; (8001b6c <main+0x74>)
 8001b50:	480a      	ldr	r0, [pc, #40]	; (8001b7c <main+0x84>)
 8001b52:	f7ff fc58 	bl	8001406 <MPU_calibrateGyro>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(mpu_flag) { mpu_callback(); mpu_flag=0; }
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <main+0x88>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0fb      	beq.n	8001b56 <main+0x5e>
 8001b5e:	f000 f897 	bl	8001c90 <mpu_callback>
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <main+0x88>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e7f5      	b.n	8001b56 <main+0x5e>
 8001b6a:	bf00      	nop
 8001b6c:	20000088 	.word	0x20000088
 8001b70:	40020800 	.word	0x40020800
 8001b74:	3f7ae148 	.word	0x3f7ae148
 8001b78:	3c23d70a 	.word	0x3c23d70a
 8001b7c:	20000110 	.word	0x20000110
 8001b80:	2000010c 	.word	0x2000010c

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fd7f 	bl	8004696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bf8:	23a8      	movs	r3, #168	; 0xa8
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c00:	2307      	movs	r3, #7
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fdef 	bl	80027ec <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c14:	f000 f852 	bl	8001cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2105      	movs	r1, #5
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f850 	bl	8002cdc <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c42:	f000 f83b 	bl	8001cbc <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	; 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
		ITM_SendChar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff18 	bl	8001aa8 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
	return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <mpu_callback>:
void mpu_callback(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	MPU_calcAttitude(&hspi2, &mpu);
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <mpu_callback+0x24>)
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <mpu_callback+0x28>)
 8001c98:	f7ff fd96 	bl	80017c8 <MPU_calcAttitude>
	//roll = mpu.attitude.r;
	//pitch = mpu.attitude.p;
	//yaw = mpu.attitude.y;
	print_accelero(&mpu);
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <mpu_callback+0x24>)
 8001c9e:	f7ff fe3f 	bl	8001920 <print_accelero>
	print_gyro(&mpu);
 8001ca2:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <mpu_callback+0x24>)
 8001ca4:	f7ff fe5e 	bl	8001964 <print_gyro>
	print_magneto(&mpu);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <mpu_callback+0x24>)
 8001caa:	f7ff fe7d 	bl	80019a8 <print_magneto>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000088 	.word	0x20000088
 8001cb8:	20000110 	.word	0x20000110

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <Error_Handler+0x8>
	...

08001cc8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <MX_SPI2_Init+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cfc:	2228      	movs	r2, #40	; 0x28
 8001cfe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001d14:	220a      	movs	r2, #10
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001d1a:	f001 f9cb 	bl	80030b4 <HAL_SPI_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d24:	f7ff ffca 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000110 	.word	0x20000110
 8001d30:	40003800 	.word	0x40003800

08001d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_SPI_MspInit+0xc0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d14a      	bne.n	8001dec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_SPI_MspInit+0xc4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001daa:	230c      	movs	r3, #12
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dba:	2305      	movs	r3, #5
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <HAL_SPI_MspInit+0xc8>)
 8001dc6:	f000 fb5b 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ddc:	2305      	movs	r3, #5
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <HAL_SPI_MspInit+0xcc>)
 8001de8:	f000 fb4a 	bl	8002480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40003800 	.word	0x40003800
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020400 	.word	0x40020400

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e42:	2007      	movs	r0, #7
 8001e44:	f000 fada 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 f998 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(TIM9->SR & TIM_SR_UIF)
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <TIM1_BRK_TIM9_IRQHandler+0x16>
	{
		mpu_flag = 1;
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

	}
	TIM9->SR &= ~TIM_SR_UIF;
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8001ecc:	f001 ff88 	bl	8003de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	2000010c 	.word	0x2000010c
 8001edc:	2000016c 	.word	0x2000016c

08001ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e00a      	b.n	8001f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef2:	f3af 8000 	nop.w
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf0      	blt.n	8001ef2 <_read+0x12>
  }

  return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
  return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f002 fbbe 	bl	8004734 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000168 	.word	0x20000168
 8001fec:	20000308 	.word	0x20000308

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_TIM9_Init+0x70>)
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <MX_TIM9_Init+0x74>)
 800202a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM9_Init+0x70>)
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_TIM9_Init+0x70>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_TIM9_Init+0x70>)
 800203a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_TIM9_Init+0x70>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_TIM9_Init+0x70>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM9_Init+0x70>)
 800204e:	f001 fe07 	bl	8003c60 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002058:	f7ff fe30 	bl	8001cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <MX_TIM9_Init+0x70>)
 8002068:	f001 ffaa 	bl	8003fc0 <HAL_TIM_ConfigClockSource>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002072:	f7ff fe23 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_TIM9_Init+0x70>)
 8002078:	f001 fe42 	bl	8003d00 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM9_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000016c 	.word	0x2000016c
 8002088:	40014000 	.word	0x40014000

0800208c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_TIM_Base_MspInit+0x48>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d115      	bne.n	80020ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_TIM_Base_MspInit+0x4c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2018      	movs	r0, #24
 80020c0:	f000 f9a7 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020c4:	2018      	movs	r0, #24
 80020c6:	f000 f9c0 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40023800 	.word	0x40023800

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e0:	f7ff ff86 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	; (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f002 fb19 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7ff fcf3 	bl	8001af8 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002120:	08005980 	.word	0x08005980
  ldr r2, =_sbss
 8002124:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002128:	20000304 	.word	0x20000304

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f94f 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fe4e 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f967 	bl	8002466 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f92f 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000008 	.word	0x20000008
 80021d0:	20000004 	.word	0x20000004

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000008 	.word	0x20000008
 80021f8:	200001b4 	.word	0x200001b4

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200001b4 	.word	0x200001b4

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000008 	.word	0x20000008

0800225c <__NVIC_SetPriorityGrouping>:
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff3e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff31 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e16b      	b.n	8002774 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 815a 	bne.w	800276e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80b4 	beq.w	800276e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_GPIO_Init+0x30c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a5f      	ldr	r2, [pc, #380]	; (800278c <HAL_GPIO_Init+0x30c>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_GPIO_Init+0x30c>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <HAL_GPIO_Init+0x310>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x314>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d02b      	beq.n	80026a6 <HAL_GPIO_Init+0x226>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_GPIO_Init+0x318>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d025      	beq.n	80026a2 <HAL_GPIO_Init+0x222>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_GPIO_Init+0x31c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01f      	beq.n	800269e <HAL_GPIO_Init+0x21e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x320>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d019      	beq.n	800269a <HAL_GPIO_Init+0x21a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x324>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0x216>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x328>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x212>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x32c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x330>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x20a>
 8002686:	2307      	movs	r3, #7
 8002688:	e00e      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800268a:	2308      	movs	r3, #8
 800268c:	e00c      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800268e:	2306      	movs	r3, #6
 8002690:	e00a      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 8002692:	2305      	movs	r3, #5
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 8002696:	2304      	movs	r3, #4
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 80026a6:	2300      	movs	r3, #0
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	; (8002790 <HAL_GPIO_Init+0x310>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_GPIO_Init+0x334>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_GPIO_Init+0x334>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f67f ae90 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40021c00 	.word	0x40021c00
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e267      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e242      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a68      	ldr	r2, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fcaa 	bl	80021fc <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fca6 	bl	80021fc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e207      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fc96 	bl	80021fc <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fc92 	bl	80021fc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f3      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff fc4b 	bl	80021fc <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fc47 	bl	80021fc <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a8      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4925      	ldr	r1, [pc, #148]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc2a 	bl	80021fc <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff fc26 	bl	80021fc <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e187      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff fc0a 	bl	80021fc <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff fc06 	bl	80021fc <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e167      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff fbf3 	bl	80021fc <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e00e      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fbef 	bl	80021fc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e150      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470000 	.word	0x42470000
 8002a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fbaf 	bl	80021fc <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7ff fbab 	bl	80021fc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e10c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ea>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x30c>
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002af8:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7ff fb70 	bl	80021fc <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7ff fb6c 	bl	80021fc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0cb      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7ff fb5a 	bl	80021fc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff fb56 	bl	80021fc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b5      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a1 	beq.w	8002ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d05c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d141      	bne.n	8002c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fb2a 	bl	80021fc <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7ff fb26 	bl	80021fc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e087      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff faff 	bl	80021fc <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7ff fafb 	bl	80021fc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x416>
 8002c20:	e054      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fae8 	bl	80021fc <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff fae4 	bl	80021fc <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff fa16 	bl	80021fc <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7ff fa12 	bl	80021fc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f976 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080058b8 	.word	0x080058b8
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b094      	sub	sp, #80	; 0x50
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	2300      	movs	r3, #0
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80e1 	bhi.w	8003094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e0db      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b73      	ldr	r3, [pc, #460]	; (80030ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ee0:	e0db      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee6:	e0d8      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
 8002f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2c:	0150      	lsls	r0, r2, #5
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4621      	mov	r1, r4
 8002f34:	1a51      	subs	r1, r2, r1
 8002f36:	6139      	str	r1, [r7, #16]
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	018b      	lsls	r3, r1, #6
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f56:	4651      	mov	r1, sl
 8002f58:	018a      	lsls	r2, r1, #6
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f60:	4659      	mov	r1, fp
 8002f62:	eb63 0901 	sbc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	462b      	mov	r3, r5
 8002f88:	eb49 0303 	adc.w	r3, r9, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	024b      	lsls	r3, r1, #9
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	024a      	lsls	r2, r1, #9
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb8:	f7fd fe00 	bl	8000bbc <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	e058      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	0159      	lsls	r1, r3, #5
 8002fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff2:	0150      	lsls	r0, r2, #5
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb63 0b01 	sbc.w	fp, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003018:	ebb2 040a 	subs.w	r4, r2, sl
 800301c:	eb63 050b 	sbc.w	r5, r3, fp
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00eb      	lsls	r3, r5, #3
 800302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302e:	00e2      	lsls	r2, r4, #3
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4643      	mov	r3, r8
 8003036:	18e3      	adds	r3, r4, r3
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	464b      	mov	r3, r9
 800303c:	eb45 0303 	adc.w	r3, r5, r3
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	61fa      	str	r2, [r7, #28]
 8003068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306c:	f7fd fda6 	bl	8000bbc <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800309c:	4618      	mov	r0, r3
 800309e:	3750      	adds	r7, #80	; 0x50
 80030a0:	46bd      	mov	sp, r7
 80030a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07b      	b.n	80031be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d6:	d009      	beq.n	80030ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
 80030de:	e005      	b.n	80030ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fe14 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	ea42 0103 	orr.w	r1, r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0104 	and.w	r1, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0210 	and.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b088      	sub	sp, #32
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_SPI_Transmit+0x22>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e12d      	b.n	8003444 <HAL_SPI_Transmit+0x27e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f0:	f7ff f804 	bl	80021fc <HAL_GetTick>
 80031f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320a:	e116      	b.n	800343a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_Transmit+0x52>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800321c:	e10d      	b.n	800343a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003264:	d10f      	bne.n	8003286 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003274:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003284:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d007      	beq.n	80032a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ac:	d14f      	bne.n	800334e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Transmit+0xf6>
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d142      	bne.n	8003342 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	1c9a      	adds	r2, r3, #2
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032e0:	e02f      	b.n	8003342 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d112      	bne.n	8003316 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	86da      	strh	r2, [r3, #54]	; 0x36
 8003314:	e015      	b.n	8003342 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003316:	f7fe ff71 	bl	80021fc <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d803      	bhi.n	800332e <HAL_SPI_Transmit+0x168>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d102      	bne.n	8003334 <HAL_SPI_Transmit+0x16e>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003340:	e07b      	b.n	800343a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ca      	bne.n	80032e2 <HAL_SPI_Transmit+0x11c>
 800334c:	e050      	b.n	80033f0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Transmit+0x196>
 8003356:	8afb      	ldrh	r3, [r7, #22]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d144      	bne.n	80033e6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003382:	e030      	b.n	80033e6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d113      	bne.n	80033ba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b8:	e015      	b.n	80033e6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ba:	f7fe ff1f 	bl	80021fc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d803      	bhi.n	80033d2 <HAL_SPI_Transmit+0x20c>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Transmit+0x212>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033e4:	e029      	b.n	800343a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1c9      	bne.n	8003384 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fbdf 	bl	8003bb8 <SPI_EndRxTxTransaction>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e003      	b.n	800343a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003442:	7ffb      	ldrb	r3, [r7, #31]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003470:	e0fb      	b.n	800366a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d112      	bne.n	80034a2 <HAL_SPI_Receive+0x56>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2204      	movs	r2, #4
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8ef 	bl	800367c <HAL_SPI_TransmitReceive>
 800349e:	4603      	mov	r3, r0
 80034a0:	e0e8      	b.n	8003674 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_SPI_Receive+0x64>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0e1      	b.n	8003674 <HAL_SPI_Receive+0x228>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b8:	f7fe fea0 	bl	80021fc <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Receive+0x7e>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034ce:	e0cc      	b.n	800366a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2204      	movs	r2, #4
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	d10f      	bne.n	8003538 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d007      	beq.n	8003556 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d16a      	bne.n	8003634 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800355e:	e032      	b.n	80035c6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d115      	bne.n	800359a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f103 020c 	add.w	r2, r3, #12
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003598:	e015      	b.n	80035c6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800359a:	f7fe fe2f 	bl	80021fc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d803      	bhi.n	80035b2 <HAL_SPI_Receive+0x166>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d102      	bne.n	80035b8 <HAL_SPI_Receive+0x16c>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80035c4:	e051      	b.n	800366a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1c7      	bne.n	8003560 <HAL_SPI_Receive+0x114>
 80035d0:	e035      	b.n	800363e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d113      	bne.n	8003608 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	b292      	uxth	r2, r2
 80035ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003606:	e015      	b.n	8003634 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003608:	f7fe fdf8 	bl	80021fc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_Receive+0x1d4>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Receive+0x1da>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003632:	e01a      	b.n	800366a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1c9      	bne.n	80035d2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa52 	bl	8003aec <SPI_EndRxTransaction>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
 8003660:	e003      	b.n	800366a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800368a:	2301      	movs	r3, #1
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x26>
 800369e:	2302      	movs	r3, #2
 80036a0:	e198      	b.n	80039d4 <HAL_SPI_TransmitReceive+0x358>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036aa:	f7fe fda7 	bl	80021fc <HAL_GetTick>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d00f      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x70>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d2:	d107      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <HAL_SPI_TransmitReceive+0x68>
 80036dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d003      	beq.n	80036ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036ea:	e16d      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x82>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x82>
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003704:	e160      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b04      	cmp	r3, #4
 8003710:	d003      	beq.n	800371a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	887a      	ldrh	r2, [r7, #2]
 800372a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d007      	beq.n	800376e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d17c      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x10a>
 8003780:	8b7b      	ldrh	r3, [r7, #26]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d16a      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037aa:	e057      	b.n	800385c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11b      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x176>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x176>
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d113      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x1b8>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003830:	2301      	movs	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003834:	f7fe fce2 	bl	80021fc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003840:	429a      	cmp	r2, r3
 8003842:	d80b      	bhi.n	800385c <HAL_SPI_TransmitReceive+0x1e0>
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d007      	beq.n	800385c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800385a:	e0b5      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1a2      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x130>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d19d      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x130>
 8003870:	e080      	b.n	8003974 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_SPI_TransmitReceive+0x204>
 800387a:	8b7b      	ldrh	r3, [r7, #26]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d16f      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a6:	e05b      	b.n	8003960 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d11c      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x274>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x274>
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d114      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d119      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x2b6>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d014      	beq.n	8003932 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800392e:	2301      	movs	r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003932:	f7fe fc63 	bl	80021fc <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393e:	429a      	cmp	r2, r3
 8003940:	d803      	bhi.n	800394a <HAL_SPI_TransmitReceive+0x2ce>
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d102      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x2d4>
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800395e:	e033      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d19e      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x22c>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d199      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f91d 	bl	8003bb8 <SPI_EndRxTxTransaction>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003990:	e01a      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	e003      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3730      	adds	r7, #48	; 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039ec:	f7fe fc06 	bl	80021fc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039fc:	f7fe fbfe 	bl	80021fc <HAL_GetTick>
 8003a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	015b      	lsls	r3, r3, #5
 8003a08:	0d1b      	lsrs	r3, r3, #20
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a12:	e054      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d050      	beq.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a1c:	f7fe fbee 	bl	80021fc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d902      	bls.n	8003a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d13d      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d111      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	d004      	beq.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d107      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d10f      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e017      	b.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d19b      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b00:	d111      	bne.n	8003b26 <SPI_EndRxTransaction+0x3a>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d004      	beq.n	8003b16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b14:	d107      	bne.n	8003b26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2e:	d12a      	bne.n	8003b86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d012      	beq.n	8003b60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff ff49 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02d      	beq.n	8003bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e026      	b.n	8003bae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff ff36 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01a      	beq.n	8003bac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e013      	b.n	8003bae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2101      	movs	r1, #1
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff23 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e000      	b.n	8003bae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2102      	movs	r1, #2
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff ff04 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e032      	b.n	8003c50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <SPI_EndRxTxTransaction+0xa0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <SPI_EndRxTxTransaction+0xa4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	0d5b      	lsrs	r3, r3, #21
 8003bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d112      	bne.n	8003c30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fee1 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d016      	beq.n	8003c4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e00f      	b.n	8003c50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d0f2      	beq.n	8003c30 <SPI_EndRxTxTransaction+0x78>
 8003c4a:	e000      	b.n	8003c4e <SPI_EndRxTxTransaction+0x96>
        break;
 8003c4c:	bf00      	nop
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	165e9f81 	.word	0x165e9f81

08003c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e041      	b.n	8003cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe fa00 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 fa88 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d001      	beq.n	8003d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e04e      	b.n	8003db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d01d      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x80>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d010      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	e007      	b.n	8003db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40001800 	.word	0x40001800

08003de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d020      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0202 	mvn.w	r2, #2
 8003e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9a3 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f995 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9a6 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0204 	mvn.w	r2, #4
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2202      	movs	r2, #2
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f97d 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f96f 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f980 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d020      	beq.n	8003edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0208 	mvn.w	r2, #8
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f957 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f949 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f95a 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d020      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0210 	mvn.w	r2, #16
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2208      	movs	r2, #8
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f931 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f923 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f934 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0201 	mvn.w	r2, #1
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f901 	bl	800414e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa72 	bl	8004454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f905 	bl	800419e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0220 	mvn.w	r2, #32
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa44 	bl	8004440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIM_ConfigClockSource+0x1c>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0b4      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x186>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004014:	d03e      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xd4>
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	f200 8087 	bhi.w	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	f000 8086 	beq.w	8004132 <HAL_TIM_ConfigClockSource+0x172>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402a:	d87f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d01a      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0xa6>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d87b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b60      	cmp	r3, #96	; 0x60
 8004036:	d050      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x11a>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d877      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d03c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0xfa>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d873      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d058      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x13a>
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d86f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	d064      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d86b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d060      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d867      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05c      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	2b10      	cmp	r3, #16
 8004062:	d05a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	e062      	b.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	f000 f9c3 	bl	8004400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	609a      	str	r2, [r3, #8]
      break;
 8004092:	e04f      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	f000 f9ac 	bl	8004400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b6:	609a      	str	r2, [r3, #8]
      break;
 80040b8:	e03c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 f920 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2150      	movs	r1, #80	; 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f979 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 80040d8:	e02c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 f93f 	bl	800436a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2160      	movs	r1, #96	; 0x60
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f969 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 80040f8:	e01c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	461a      	mov	r2, r3
 8004108:	f000 f900 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f959 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8004118:	e00c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 f950 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 800412a:	e003      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e000      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a46      	ldr	r2, [pc, #280]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a43      	ldr	r2, [pc, #268]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a42      	ldr	r2, [pc, #264]	; (80042e8 <TIM_Base_SetConfig+0x134>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <TIM_Base_SetConfig+0x138>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <TIM_Base_SetConfig+0x13c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d027      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a32      	ldr	r2, [pc, #200]	; (80042e4 <TIM_Base_SetConfig+0x130>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d023      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <TIM_Base_SetConfig+0x134>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a30      	ldr	r2, [pc, #192]	; (80042ec <TIM_Base_SetConfig+0x138>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <TIM_Base_SetConfig+0x13c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d017      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <TIM_Base_SetConfig+0x140>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <TIM_Base_SetConfig+0x144>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <TIM_Base_SetConfig+0x148>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <TIM_Base_SetConfig+0x14c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <TIM_Base_SetConfig+0x150>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <TIM_Base_SetConfig+0x154>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x12c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <TIM_Base_SetConfig+0x13c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
  }
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40010400 	.word	0x40010400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800
 8004300:	40001800 	.word	0x40001800
 8004304:	40001c00 	.word	0x40001c00
 8004308:	40002000 	.word	0x40002000

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0210 	bic.w	r2, r3, #16
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800441a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <std>:
 8004468:	2300      	movs	r3, #0
 800446a:	b510      	push	{r4, lr}
 800446c:	4604      	mov	r4, r0
 800446e:	e9c0 3300 	strd	r3, r3, [r0]
 8004472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004476:	6083      	str	r3, [r0, #8]
 8004478:	8181      	strh	r1, [r0, #12]
 800447a:	6643      	str	r3, [r0, #100]	; 0x64
 800447c:	81c2      	strh	r2, [r0, #14]
 800447e:	6183      	str	r3, [r0, #24]
 8004480:	4619      	mov	r1, r3
 8004482:	2208      	movs	r2, #8
 8004484:	305c      	adds	r0, #92	; 0x5c
 8004486:	f000 f906 	bl	8004696 <memset>
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <std+0x58>)
 800448c:	6263      	str	r3, [r4, #36]	; 0x24
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <std+0x5c>)
 8004490:	62a3      	str	r3, [r4, #40]	; 0x28
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <std+0x60>)
 8004494:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <std+0x64>)
 8004498:	6323      	str	r3, [r4, #48]	; 0x30
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <std+0x68>)
 800449c:	6224      	str	r4, [r4, #32]
 800449e:	429c      	cmp	r4, r3
 80044a0:	d006      	beq.n	80044b0 <std+0x48>
 80044a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044a6:	4294      	cmp	r4, r2
 80044a8:	d002      	beq.n	80044b0 <std+0x48>
 80044aa:	33d0      	adds	r3, #208	; 0xd0
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d105      	bne.n	80044bc <std+0x54>
 80044b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b8:	f000 b966 	b.w	8004788 <__retarget_lock_init_recursive>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	bf00      	nop
 80044c0:	08004611 	.word	0x08004611
 80044c4:	08004633 	.word	0x08004633
 80044c8:	0800466b 	.word	0x0800466b
 80044cc:	0800468f 	.word	0x0800468f
 80044d0:	200001b8 	.word	0x200001b8

080044d4 <stdio_exit_handler>:
 80044d4:	4a02      	ldr	r2, [pc, #8]	; (80044e0 <stdio_exit_handler+0xc>)
 80044d6:	4903      	ldr	r1, [pc, #12]	; (80044e4 <stdio_exit_handler+0x10>)
 80044d8:	4803      	ldr	r0, [pc, #12]	; (80044e8 <stdio_exit_handler+0x14>)
 80044da:	f000 b869 	b.w	80045b0 <_fwalk_sglue>
 80044de:	bf00      	nop
 80044e0:	2000000c 	.word	0x2000000c
 80044e4:	08005035 	.word	0x08005035
 80044e8:	20000018 	.word	0x20000018

080044ec <cleanup_stdio>:
 80044ec:	6841      	ldr	r1, [r0, #4]
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <cleanup_stdio+0x34>)
 80044f0:	4299      	cmp	r1, r3
 80044f2:	b510      	push	{r4, lr}
 80044f4:	4604      	mov	r4, r0
 80044f6:	d001      	beq.n	80044fc <cleanup_stdio+0x10>
 80044f8:	f000 fd9c 	bl	8005034 <_fflush_r>
 80044fc:	68a1      	ldr	r1, [r4, #8]
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <cleanup_stdio+0x38>)
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <cleanup_stdio+0x1e>
 8004504:	4620      	mov	r0, r4
 8004506:	f000 fd95 	bl	8005034 <_fflush_r>
 800450a:	68e1      	ldr	r1, [r4, #12]
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <cleanup_stdio+0x3c>)
 800450e:	4299      	cmp	r1, r3
 8004510:	d004      	beq.n	800451c <cleanup_stdio+0x30>
 8004512:	4620      	mov	r0, r4
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	f000 bd8c 	b.w	8005034 <_fflush_r>
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	200001b8 	.word	0x200001b8
 8004524:	20000220 	.word	0x20000220
 8004528:	20000288 	.word	0x20000288

0800452c <global_stdio_init.part.0>:
 800452c:	b510      	push	{r4, lr}
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <global_stdio_init.part.0+0x30>)
 8004530:	4c0b      	ldr	r4, [pc, #44]	; (8004560 <global_stdio_init.part.0+0x34>)
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <global_stdio_init.part.0+0x38>)
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	4620      	mov	r0, r4
 8004538:	2200      	movs	r2, #0
 800453a:	2104      	movs	r1, #4
 800453c:	f7ff ff94 	bl	8004468 <std>
 8004540:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004544:	2201      	movs	r2, #1
 8004546:	2109      	movs	r1, #9
 8004548:	f7ff ff8e 	bl	8004468 <std>
 800454c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004550:	2202      	movs	r2, #2
 8004552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004556:	2112      	movs	r1, #18
 8004558:	f7ff bf86 	b.w	8004468 <std>
 800455c:	200002f0 	.word	0x200002f0
 8004560:	200001b8 	.word	0x200001b8
 8004564:	080044d5 	.word	0x080044d5

08004568 <__sfp_lock_acquire>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__sfp_lock_acquire+0x8>)
 800456a:	f000 b90e 	b.w	800478a <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	200002f9 	.word	0x200002f9

08004574 <__sfp_lock_release>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sfp_lock_release+0x8>)
 8004576:	f000 b909 	b.w	800478c <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	200002f9 	.word	0x200002f9

08004580 <__sinit>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4604      	mov	r4, r0
 8004584:	f7ff fff0 	bl	8004568 <__sfp_lock_acquire>
 8004588:	6a23      	ldr	r3, [r4, #32]
 800458a:	b11b      	cbz	r3, 8004594 <__sinit+0x14>
 800458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004590:	f7ff bff0 	b.w	8004574 <__sfp_lock_release>
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <__sinit+0x28>)
 8004596:	6223      	str	r3, [r4, #32]
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <__sinit+0x2c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f5      	bne.n	800458c <__sinit+0xc>
 80045a0:	f7ff ffc4 	bl	800452c <global_stdio_init.part.0>
 80045a4:	e7f2      	b.n	800458c <__sinit+0xc>
 80045a6:	bf00      	nop
 80045a8:	080044ed 	.word	0x080044ed
 80045ac:	200002f0 	.word	0x200002f0

080045b0 <_fwalk_sglue>:
 80045b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b4:	4607      	mov	r7, r0
 80045b6:	4688      	mov	r8, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	2600      	movs	r6, #0
 80045bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045c0:	f1b9 0901 	subs.w	r9, r9, #1
 80045c4:	d505      	bpl.n	80045d2 <_fwalk_sglue+0x22>
 80045c6:	6824      	ldr	r4, [r4, #0]
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	d1f7      	bne.n	80045bc <_fwalk_sglue+0xc>
 80045cc:	4630      	mov	r0, r6
 80045ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d907      	bls.n	80045e8 <_fwalk_sglue+0x38>
 80045d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045dc:	3301      	adds	r3, #1
 80045de:	d003      	beq.n	80045e8 <_fwalk_sglue+0x38>
 80045e0:	4629      	mov	r1, r5
 80045e2:	4638      	mov	r0, r7
 80045e4:	47c0      	blx	r8
 80045e6:	4306      	orrs	r6, r0
 80045e8:	3568      	adds	r5, #104	; 0x68
 80045ea:	e7e9      	b.n	80045c0 <_fwalk_sglue+0x10>

080045ec <iprintf>:
 80045ec:	b40f      	push	{r0, r1, r2, r3}
 80045ee:	b507      	push	{r0, r1, r2, lr}
 80045f0:	4906      	ldr	r1, [pc, #24]	; (800460c <iprintf+0x20>)
 80045f2:	ab04      	add	r3, sp, #16
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045fa:	6881      	ldr	r1, [r0, #8]
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	f000 f9e9 	bl	80049d4 <_vfiprintf_r>
 8004602:	b003      	add	sp, #12
 8004604:	f85d eb04 	ldr.w	lr, [sp], #4
 8004608:	b004      	add	sp, #16
 800460a:	4770      	bx	lr
 800460c:	20000064 	.word	0x20000064

08004610 <__sread>:
 8004610:	b510      	push	{r4, lr}
 8004612:	460c      	mov	r4, r1
 8004614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004618:	f000 f868 	bl	80046ec <_read_r>
 800461c:	2800      	cmp	r0, #0
 800461e:	bfab      	itete	ge
 8004620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004622:	89a3      	ldrhlt	r3, [r4, #12]
 8004624:	181b      	addge	r3, r3, r0
 8004626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800462a:	bfac      	ite	ge
 800462c:	6563      	strge	r3, [r4, #84]	; 0x54
 800462e:	81a3      	strhlt	r3, [r4, #12]
 8004630:	bd10      	pop	{r4, pc}

08004632 <__swrite>:
 8004632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004636:	461f      	mov	r7, r3
 8004638:	898b      	ldrh	r3, [r1, #12]
 800463a:	05db      	lsls	r3, r3, #23
 800463c:	4605      	mov	r5, r0
 800463e:	460c      	mov	r4, r1
 8004640:	4616      	mov	r6, r2
 8004642:	d505      	bpl.n	8004650 <__swrite+0x1e>
 8004644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004648:	2302      	movs	r3, #2
 800464a:	2200      	movs	r2, #0
 800464c:	f000 f83c 	bl	80046c8 <_lseek_r>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	4632      	mov	r2, r6
 800465e:	463b      	mov	r3, r7
 8004660:	4628      	mov	r0, r5
 8004662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004666:	f000 b853 	b.w	8004710 <_write_r>

0800466a <__sseek>:
 800466a:	b510      	push	{r4, lr}
 800466c:	460c      	mov	r4, r1
 800466e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004672:	f000 f829 	bl	80046c8 <_lseek_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	bf15      	itete	ne
 800467c:	6560      	strne	r0, [r4, #84]	; 0x54
 800467e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004686:	81a3      	strheq	r3, [r4, #12]
 8004688:	bf18      	it	ne
 800468a:	81a3      	strhne	r3, [r4, #12]
 800468c:	bd10      	pop	{r4, pc}

0800468e <__sclose>:
 800468e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004692:	f000 b809 	b.w	80046a8 <_close_r>

08004696 <memset>:
 8004696:	4402      	add	r2, r0
 8004698:	4603      	mov	r3, r0
 800469a:	4293      	cmp	r3, r2
 800469c:	d100      	bne.n	80046a0 <memset+0xa>
 800469e:	4770      	bx	lr
 80046a0:	f803 1b01 	strb.w	r1, [r3], #1
 80046a4:	e7f9      	b.n	800469a <memset+0x4>
	...

080046a8 <_close_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d06      	ldr	r5, [pc, #24]	; (80046c4 <_close_r+0x1c>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fd fc31 	bl	8001f1a <_close>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_close_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_close_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	200002f4 	.word	0x200002f4

080046c8 <_lseek_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d07      	ldr	r5, [pc, #28]	; (80046e8 <_lseek_r+0x20>)
 80046cc:	4604      	mov	r4, r0
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fd fc46 	bl	8001f68 <_lseek>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_lseek_r+0x1e>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_lseek_r+0x1e>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	200002f4 	.word	0x200002f4

080046ec <_read_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d07      	ldr	r5, [pc, #28]	; (800470c <_read_r+0x20>)
 80046f0:	4604      	mov	r4, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fd fbf0 	bl	8001ee0 <_read>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_read_r+0x1e>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_read_r+0x1e>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	200002f4 	.word	0x200002f4

08004710 <_write_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d07      	ldr	r5, [pc, #28]	; (8004730 <_write_r+0x20>)
 8004714:	4604      	mov	r4, r0
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	2200      	movs	r2, #0
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fd fa9a 	bl	8001c58 <_write>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_write_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_write_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	200002f4 	.word	0x200002f4

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000064 	.word	0x20000064

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2600      	movs	r6, #0
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4d0b      	ldr	r5, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f001 f856 	bl	8005804 <_init>
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2600      	movs	r6, #0
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08005978 	.word	0x08005978
 800477c:	08005978 	.word	0x08005978
 8004780:	08005978 	.word	0x08005978
 8004784:	0800597c 	.word	0x0800597c

08004788 <__retarget_lock_init_recursive>:
 8004788:	4770      	bx	lr

0800478a <__retarget_lock_acquire_recursive>:
 800478a:	4770      	bx	lr

0800478c <__retarget_lock_release_recursive>:
 800478c:	4770      	bx	lr
	...

08004790 <_free_r>:
 8004790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004792:	2900      	cmp	r1, #0
 8004794:	d044      	beq.n	8004820 <_free_r+0x90>
 8004796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479a:	9001      	str	r0, [sp, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f1a1 0404 	sub.w	r4, r1, #4
 80047a2:	bfb8      	it	lt
 80047a4:	18e4      	addlt	r4, r4, r3
 80047a6:	f000 f8df 	bl	8004968 <__malloc_lock>
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <_free_r+0x94>)
 80047ac:	9801      	ldr	r0, [sp, #4]
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	b933      	cbnz	r3, 80047c0 <_free_r+0x30>
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	6014      	str	r4, [r2, #0]
 80047b6:	b003      	add	sp, #12
 80047b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047bc:	f000 b8da 	b.w	8004974 <__malloc_unlock>
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	d908      	bls.n	80047d6 <_free_r+0x46>
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	1961      	adds	r1, r4, r5
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf01      	itttt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	1949      	addeq	r1, r1, r5
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	e7ed      	b.n	80047b2 <_free_r+0x22>
 80047d6:	461a      	mov	r2, r3
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b10b      	cbz	r3, 80047e0 <_free_r+0x50>
 80047dc:	42a3      	cmp	r3, r4
 80047de:	d9fa      	bls.n	80047d6 <_free_r+0x46>
 80047e0:	6811      	ldr	r1, [r2, #0]
 80047e2:	1855      	adds	r5, r2, r1
 80047e4:	42a5      	cmp	r5, r4
 80047e6:	d10b      	bne.n	8004800 <_free_r+0x70>
 80047e8:	6824      	ldr	r4, [r4, #0]
 80047ea:	4421      	add	r1, r4
 80047ec:	1854      	adds	r4, r2, r1
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	6011      	str	r1, [r2, #0]
 80047f2:	d1e0      	bne.n	80047b6 <_free_r+0x26>
 80047f4:	681c      	ldr	r4, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	440c      	add	r4, r1
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	e7da      	b.n	80047b6 <_free_r+0x26>
 8004800:	d902      	bls.n	8004808 <_free_r+0x78>
 8004802:	230c      	movs	r3, #12
 8004804:	6003      	str	r3, [r0, #0]
 8004806:	e7d6      	b.n	80047b6 <_free_r+0x26>
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	1961      	adds	r1, r4, r5
 800480c:	428b      	cmp	r3, r1
 800480e:	bf04      	itt	eq
 8004810:	6819      	ldreq	r1, [r3, #0]
 8004812:	685b      	ldreq	r3, [r3, #4]
 8004814:	6063      	str	r3, [r4, #4]
 8004816:	bf04      	itt	eq
 8004818:	1949      	addeq	r1, r1, r5
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	6054      	str	r4, [r2, #4]
 800481e:	e7ca      	b.n	80047b6 <_free_r+0x26>
 8004820:	b003      	add	sp, #12
 8004822:	bd30      	pop	{r4, r5, pc}
 8004824:	200002fc 	.word	0x200002fc

08004828 <sbrk_aligned>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4e0e      	ldr	r6, [pc, #56]	; (8004864 <sbrk_aligned+0x3c>)
 800482c:	460c      	mov	r4, r1
 800482e:	6831      	ldr	r1, [r6, #0]
 8004830:	4605      	mov	r5, r0
 8004832:	b911      	cbnz	r1, 800483a <sbrk_aligned+0x12>
 8004834:	f000 fcbc 	bl	80051b0 <_sbrk_r>
 8004838:	6030      	str	r0, [r6, #0]
 800483a:	4621      	mov	r1, r4
 800483c:	4628      	mov	r0, r5
 800483e:	f000 fcb7 	bl	80051b0 <_sbrk_r>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	d00a      	beq.n	800485c <sbrk_aligned+0x34>
 8004846:	1cc4      	adds	r4, r0, #3
 8004848:	f024 0403 	bic.w	r4, r4, #3
 800484c:	42a0      	cmp	r0, r4
 800484e:	d007      	beq.n	8004860 <sbrk_aligned+0x38>
 8004850:	1a21      	subs	r1, r4, r0
 8004852:	4628      	mov	r0, r5
 8004854:	f000 fcac 	bl	80051b0 <_sbrk_r>
 8004858:	3001      	adds	r0, #1
 800485a:	d101      	bne.n	8004860 <sbrk_aligned+0x38>
 800485c:	f04f 34ff 	mov.w	r4, #4294967295
 8004860:	4620      	mov	r0, r4
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	20000300 	.word	0x20000300

08004868 <_malloc_r>:
 8004868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800486c:	1ccd      	adds	r5, r1, #3
 800486e:	f025 0503 	bic.w	r5, r5, #3
 8004872:	3508      	adds	r5, #8
 8004874:	2d0c      	cmp	r5, #12
 8004876:	bf38      	it	cc
 8004878:	250c      	movcc	r5, #12
 800487a:	2d00      	cmp	r5, #0
 800487c:	4607      	mov	r7, r0
 800487e:	db01      	blt.n	8004884 <_malloc_r+0x1c>
 8004880:	42a9      	cmp	r1, r5
 8004882:	d905      	bls.n	8004890 <_malloc_r+0x28>
 8004884:	230c      	movs	r3, #12
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	2600      	movs	r6, #0
 800488a:	4630      	mov	r0, r6
 800488c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004890:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004964 <_malloc_r+0xfc>
 8004894:	f000 f868 	bl	8004968 <__malloc_lock>
 8004898:	f8d8 3000 	ldr.w	r3, [r8]
 800489c:	461c      	mov	r4, r3
 800489e:	bb5c      	cbnz	r4, 80048f8 <_malloc_r+0x90>
 80048a0:	4629      	mov	r1, r5
 80048a2:	4638      	mov	r0, r7
 80048a4:	f7ff ffc0 	bl	8004828 <sbrk_aligned>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	4604      	mov	r4, r0
 80048ac:	d155      	bne.n	800495a <_malloc_r+0xf2>
 80048ae:	f8d8 4000 	ldr.w	r4, [r8]
 80048b2:	4626      	mov	r6, r4
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	d145      	bne.n	8004944 <_malloc_r+0xdc>
 80048b8:	2c00      	cmp	r4, #0
 80048ba:	d048      	beq.n	800494e <_malloc_r+0xe6>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	4631      	mov	r1, r6
 80048c0:	4638      	mov	r0, r7
 80048c2:	eb04 0903 	add.w	r9, r4, r3
 80048c6:	f000 fc73 	bl	80051b0 <_sbrk_r>
 80048ca:	4581      	cmp	r9, r0
 80048cc:	d13f      	bne.n	800494e <_malloc_r+0xe6>
 80048ce:	6821      	ldr	r1, [r4, #0]
 80048d0:	1a6d      	subs	r5, r5, r1
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ffa7 	bl	8004828 <sbrk_aligned>
 80048da:	3001      	adds	r0, #1
 80048dc:	d037      	beq.n	800494e <_malloc_r+0xe6>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	442b      	add	r3, r5
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	f8d8 3000 	ldr.w	r3, [r8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d038      	beq.n	800495e <_malloc_r+0xf6>
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	42a2      	cmp	r2, r4
 80048f0:	d12b      	bne.n	800494a <_malloc_r+0xe2>
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e00f      	b.n	8004918 <_malloc_r+0xb0>
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	1b52      	subs	r2, r2, r5
 80048fc:	d41f      	bmi.n	800493e <_malloc_r+0xd6>
 80048fe:	2a0b      	cmp	r2, #11
 8004900:	d917      	bls.n	8004932 <_malloc_r+0xca>
 8004902:	1961      	adds	r1, r4, r5
 8004904:	42a3      	cmp	r3, r4
 8004906:	6025      	str	r5, [r4, #0]
 8004908:	bf18      	it	ne
 800490a:	6059      	strne	r1, [r3, #4]
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	bf08      	it	eq
 8004910:	f8c8 1000 	streq.w	r1, [r8]
 8004914:	5162      	str	r2, [r4, r5]
 8004916:	604b      	str	r3, [r1, #4]
 8004918:	4638      	mov	r0, r7
 800491a:	f104 060b 	add.w	r6, r4, #11
 800491e:	f000 f829 	bl	8004974 <__malloc_unlock>
 8004922:	f026 0607 	bic.w	r6, r6, #7
 8004926:	1d23      	adds	r3, r4, #4
 8004928:	1af2      	subs	r2, r6, r3
 800492a:	d0ae      	beq.n	800488a <_malloc_r+0x22>
 800492c:	1b9b      	subs	r3, r3, r6
 800492e:	50a3      	str	r3, [r4, r2]
 8004930:	e7ab      	b.n	800488a <_malloc_r+0x22>
 8004932:	42a3      	cmp	r3, r4
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	d1dd      	bne.n	80048f4 <_malloc_r+0x8c>
 8004938:	f8c8 2000 	str.w	r2, [r8]
 800493c:	e7ec      	b.n	8004918 <_malloc_r+0xb0>
 800493e:	4623      	mov	r3, r4
 8004940:	6864      	ldr	r4, [r4, #4]
 8004942:	e7ac      	b.n	800489e <_malloc_r+0x36>
 8004944:	4634      	mov	r4, r6
 8004946:	6876      	ldr	r6, [r6, #4]
 8004948:	e7b4      	b.n	80048b4 <_malloc_r+0x4c>
 800494a:	4613      	mov	r3, r2
 800494c:	e7cc      	b.n	80048e8 <_malloc_r+0x80>
 800494e:	230c      	movs	r3, #12
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4638      	mov	r0, r7
 8004954:	f000 f80e 	bl	8004974 <__malloc_unlock>
 8004958:	e797      	b.n	800488a <_malloc_r+0x22>
 800495a:	6025      	str	r5, [r4, #0]
 800495c:	e7dc      	b.n	8004918 <_malloc_r+0xb0>
 800495e:	605b      	str	r3, [r3, #4]
 8004960:	deff      	udf	#255	; 0xff
 8004962:	bf00      	nop
 8004964:	200002fc 	.word	0x200002fc

08004968 <__malloc_lock>:
 8004968:	4801      	ldr	r0, [pc, #4]	; (8004970 <__malloc_lock+0x8>)
 800496a:	f7ff bf0e 	b.w	800478a <__retarget_lock_acquire_recursive>
 800496e:	bf00      	nop
 8004970:	200002f8 	.word	0x200002f8

08004974 <__malloc_unlock>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__malloc_unlock+0x8>)
 8004976:	f7ff bf09 	b.w	800478c <__retarget_lock_release_recursive>
 800497a:	bf00      	nop
 800497c:	200002f8 	.word	0x200002f8

08004980 <__sfputc_r>:
 8004980:	6893      	ldr	r3, [r2, #8]
 8004982:	3b01      	subs	r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	b410      	push	{r4}
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	da08      	bge.n	800499e <__sfputc_r+0x1e>
 800498c:	6994      	ldr	r4, [r2, #24]
 800498e:	42a3      	cmp	r3, r4
 8004990:	db01      	blt.n	8004996 <__sfputc_r+0x16>
 8004992:	290a      	cmp	r1, #10
 8004994:	d103      	bne.n	800499e <__sfputc_r+0x1e>
 8004996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800499a:	f000 bb73 	b.w	8005084 <__swbuf_r>
 800499e:	6813      	ldr	r3, [r2, #0]
 80049a0:	1c58      	adds	r0, r3, #1
 80049a2:	6010      	str	r0, [r2, #0]
 80049a4:	7019      	strb	r1, [r3, #0]
 80049a6:	4608      	mov	r0, r1
 80049a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <__sfputs_r>:
 80049ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b0:	4606      	mov	r6, r0
 80049b2:	460f      	mov	r7, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	18d5      	adds	r5, r2, r3
 80049b8:	42ac      	cmp	r4, r5
 80049ba:	d101      	bne.n	80049c0 <__sfputs_r+0x12>
 80049bc:	2000      	movs	r0, #0
 80049be:	e007      	b.n	80049d0 <__sfputs_r+0x22>
 80049c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c4:	463a      	mov	r2, r7
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff ffda 	bl	8004980 <__sfputc_r>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d1f3      	bne.n	80049b8 <__sfputs_r+0xa>
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049d4 <_vfiprintf_r>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	460d      	mov	r5, r1
 80049da:	b09d      	sub	sp, #116	; 0x74
 80049dc:	4614      	mov	r4, r2
 80049de:	4698      	mov	r8, r3
 80049e0:	4606      	mov	r6, r0
 80049e2:	b118      	cbz	r0, 80049ec <_vfiprintf_r+0x18>
 80049e4:	6a03      	ldr	r3, [r0, #32]
 80049e6:	b90b      	cbnz	r3, 80049ec <_vfiprintf_r+0x18>
 80049e8:	f7ff fdca 	bl	8004580 <__sinit>
 80049ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ee:	07d9      	lsls	r1, r3, #31
 80049f0:	d405      	bmi.n	80049fe <_vfiprintf_r+0x2a>
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d402      	bmi.n	80049fe <_vfiprintf_r+0x2a>
 80049f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049fa:	f7ff fec6 	bl	800478a <__retarget_lock_acquire_recursive>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	d501      	bpl.n	8004a08 <_vfiprintf_r+0x34>
 8004a04:	692b      	ldr	r3, [r5, #16]
 8004a06:	b99b      	cbnz	r3, 8004a30 <_vfiprintf_r+0x5c>
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 fb78 	bl	8005100 <__swsetup_r>
 8004a10:	b170      	cbz	r0, 8004a30 <_vfiprintf_r+0x5c>
 8004a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a14:	07dc      	lsls	r4, r3, #31
 8004a16:	d504      	bpl.n	8004a22 <_vfiprintf_r+0x4e>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	b01d      	add	sp, #116	; 0x74
 8004a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	0598      	lsls	r0, r3, #22
 8004a26:	d4f7      	bmi.n	8004a18 <_vfiprintf_r+0x44>
 8004a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2a:	f7ff feaf 	bl	800478c <__retarget_lock_release_recursive>
 8004a2e:	e7f3      	b.n	8004a18 <_vfiprintf_r+0x44>
 8004a30:	2300      	movs	r3, #0
 8004a32:	9309      	str	r3, [sp, #36]	; 0x24
 8004a34:	2320      	movs	r3, #32
 8004a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a3e:	2330      	movs	r3, #48	; 0x30
 8004a40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004bf4 <_vfiprintf_r+0x220>
 8004a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a48:	f04f 0901 	mov.w	r9, #1
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	469a      	mov	sl, r3
 8004a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a54:	b10a      	cbz	r2, 8004a5a <_vfiprintf_r+0x86>
 8004a56:	2a25      	cmp	r2, #37	; 0x25
 8004a58:	d1f9      	bne.n	8004a4e <_vfiprintf_r+0x7a>
 8004a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a5e:	d00b      	beq.n	8004a78 <_vfiprintf_r+0xa4>
 8004a60:	465b      	mov	r3, fp
 8004a62:	4622      	mov	r2, r4
 8004a64:	4629      	mov	r1, r5
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ffa1 	bl	80049ae <__sfputs_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f000 80a9 	beq.w	8004bc4 <_vfiprintf_r+0x1f0>
 8004a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a74:	445a      	add	r2, fp
 8004a76:	9209      	str	r2, [sp, #36]	; 0x24
 8004a78:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a1 	beq.w	8004bc4 <_vfiprintf_r+0x1f0>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8c:	f10a 0a01 	add.w	sl, sl, #1
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a98:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9a:	4654      	mov	r4, sl
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa2:	4854      	ldr	r0, [pc, #336]	; (8004bf4 <_vfiprintf_r+0x220>)
 8004aa4:	f7fb fb94 	bl	80001d0 <memchr>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	b9d8      	cbnz	r0, 8004ae4 <_vfiprintf_r+0x110>
 8004aac:	06d1      	lsls	r1, r2, #27
 8004aae:	bf44      	itt	mi
 8004ab0:	2320      	movmi	r3, #32
 8004ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab6:	0713      	lsls	r3, r2, #28
 8004ab8:	bf44      	itt	mi
 8004aba:	232b      	movmi	r3, #43	; 0x2b
 8004abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac6:	d015      	beq.n	8004af4 <_vfiprintf_r+0x120>
 8004ac8:	9a07      	ldr	r2, [sp, #28]
 8004aca:	4654      	mov	r4, sl
 8004acc:	2000      	movs	r0, #0
 8004ace:	f04f 0c0a 	mov.w	ip, #10
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d94d      	bls.n	8004b7a <_vfiprintf_r+0x1a6>
 8004ade:	b1b0      	cbz	r0, 8004b0e <_vfiprintf_r+0x13a>
 8004ae0:	9207      	str	r2, [sp, #28]
 8004ae2:	e014      	b.n	8004b0e <_vfiprintf_r+0x13a>
 8004ae4:	eba0 0308 	sub.w	r3, r0, r8
 8004ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	9304      	str	r3, [sp, #16]
 8004af0:	46a2      	mov	sl, r4
 8004af2:	e7d2      	b.n	8004a9a <_vfiprintf_r+0xc6>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	1d19      	adds	r1, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	9103      	str	r1, [sp, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfbb      	ittet	lt
 8004b00:	425b      	neglt	r3, r3
 8004b02:	f042 0202 	orrlt.w	r2, r2, #2
 8004b06:	9307      	strge	r3, [sp, #28]
 8004b08:	9307      	strlt	r3, [sp, #28]
 8004b0a:	bfb8      	it	lt
 8004b0c:	9204      	strlt	r2, [sp, #16]
 8004b0e:	7823      	ldrb	r3, [r4, #0]
 8004b10:	2b2e      	cmp	r3, #46	; 0x2e
 8004b12:	d10c      	bne.n	8004b2e <_vfiprintf_r+0x15a>
 8004b14:	7863      	ldrb	r3, [r4, #1]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d134      	bne.n	8004b84 <_vfiprintf_r+0x1b0>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9203      	str	r2, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2a:	3402      	adds	r4, #2
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c04 <_vfiprintf_r+0x230>
 8004b32:	7821      	ldrb	r1, [r4, #0]
 8004b34:	2203      	movs	r2, #3
 8004b36:	4650      	mov	r0, sl
 8004b38:	f7fb fb4a 	bl	80001d0 <memchr>
 8004b3c:	b138      	cbz	r0, 8004b4e <_vfiprintf_r+0x17a>
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	eba0 000a 	sub.w	r0, r0, sl
 8004b44:	2240      	movs	r2, #64	; 0x40
 8004b46:	4082      	lsls	r2, r0
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b52:	4829      	ldr	r0, [pc, #164]	; (8004bf8 <_vfiprintf_r+0x224>)
 8004b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b58:	2206      	movs	r2, #6
 8004b5a:	f7fb fb39 	bl	80001d0 <memchr>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d03f      	beq.n	8004be2 <_vfiprintf_r+0x20e>
 8004b62:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <_vfiprintf_r+0x228>)
 8004b64:	bb1b      	cbnz	r3, 8004bae <_vfiprintf_r+0x1da>
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	3307      	adds	r3, #7
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	3308      	adds	r3, #8
 8004b70:	9303      	str	r3, [sp, #12]
 8004b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b74:	443b      	add	r3, r7
 8004b76:	9309      	str	r3, [sp, #36]	; 0x24
 8004b78:	e768      	b.n	8004a4c <_vfiprintf_r+0x78>
 8004b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b7e:	460c      	mov	r4, r1
 8004b80:	2001      	movs	r0, #1
 8004b82:	e7a6      	b.n	8004ad2 <_vfiprintf_r+0xfe>
 8004b84:	2300      	movs	r3, #0
 8004b86:	3401      	adds	r4, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0c0a 	mov.w	ip, #10
 8004b90:	4620      	mov	r0, r4
 8004b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b96:	3a30      	subs	r2, #48	; 0x30
 8004b98:	2a09      	cmp	r2, #9
 8004b9a:	d903      	bls.n	8004ba4 <_vfiprintf_r+0x1d0>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0c6      	beq.n	8004b2e <_vfiprintf_r+0x15a>
 8004ba0:	9105      	str	r1, [sp, #20]
 8004ba2:	e7c4      	b.n	8004b2e <_vfiprintf_r+0x15a>
 8004ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba8:	4604      	mov	r4, r0
 8004baa:	2301      	movs	r3, #1
 8004bac:	e7f0      	b.n	8004b90 <_vfiprintf_r+0x1bc>
 8004bae:	ab03      	add	r3, sp, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <_vfiprintf_r+0x22c>)
 8004bb6:	a904      	add	r1, sp, #16
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f3af 8000 	nop.w
 8004bbe:	4607      	mov	r7, r0
 8004bc0:	1c78      	adds	r0, r7, #1
 8004bc2:	d1d6      	bne.n	8004b72 <_vfiprintf_r+0x19e>
 8004bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <_vfiprintf_r+0x202>
 8004bca:	89ab      	ldrh	r3, [r5, #12]
 8004bcc:	059a      	lsls	r2, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <_vfiprintf_r+0x202>
 8004bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bd2:	f7ff fddb 	bl	800478c <__retarget_lock_release_recursive>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	065b      	lsls	r3, r3, #25
 8004bda:	f53f af1d 	bmi.w	8004a18 <_vfiprintf_r+0x44>
 8004bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be0:	e71c      	b.n	8004a1c <_vfiprintf_r+0x48>
 8004be2:	ab03      	add	r3, sp, #12
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	462a      	mov	r2, r5
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <_vfiprintf_r+0x22c>)
 8004bea:	a904      	add	r1, sp, #16
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f879 	bl	8004ce4 <_printf_i>
 8004bf2:	e7e4      	b.n	8004bbe <_vfiprintf_r+0x1ea>
 8004bf4:	080058c8 	.word	0x080058c8
 8004bf8:	080058d2 	.word	0x080058d2
 8004bfc:	00000000 	.word	0x00000000
 8004c00:	080049af 	.word	0x080049af
 8004c04:	080058ce 	.word	0x080058ce

08004c08 <_printf_common>:
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	4699      	mov	r9, r3
 8004c10:	688a      	ldr	r2, [r1, #8]
 8004c12:	690b      	ldr	r3, [r1, #16]
 8004c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bfb8      	it	lt
 8004c1c:	4613      	movlt	r3, r2
 8004c1e:	6033      	str	r3, [r6, #0]
 8004c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c24:	4607      	mov	r7, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	b10a      	cbz	r2, 8004c2e <_printf_common+0x26>
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	0699      	lsls	r1, r3, #26
 8004c32:	bf42      	ittt	mi
 8004c34:	6833      	ldrmi	r3, [r6, #0]
 8004c36:	3302      	addmi	r3, #2
 8004c38:	6033      	strmi	r3, [r6, #0]
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	f015 0506 	ands.w	r5, r5, #6
 8004c40:	d106      	bne.n	8004c50 <_printf_common+0x48>
 8004c42:	f104 0a19 	add.w	sl, r4, #25
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	6832      	ldr	r2, [r6, #0]
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	dc26      	bgt.n	8004c9e <_printf_common+0x96>
 8004c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c54:	1e13      	subs	r3, r2, #0
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	bf18      	it	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	0692      	lsls	r2, r2, #26
 8004c5e:	d42b      	bmi.n	8004cb8 <_printf_common+0xb0>
 8004c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c64:	4649      	mov	r1, r9
 8004c66:	4638      	mov	r0, r7
 8004c68:	47c0      	blx	r8
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d01e      	beq.n	8004cac <_printf_common+0xa4>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	f003 0306 	and.w	r3, r3, #6
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf02      	ittt	eq
 8004c7a:	68e5      	ldreq	r5, [r4, #12]
 8004c7c:	6833      	ldreq	r3, [r6, #0]
 8004c7e:	1aed      	subeq	r5, r5, r3
 8004c80:	68a3      	ldr	r3, [r4, #8]
 8004c82:	bf0c      	ite	eq
 8004c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c88:	2500      	movne	r5, #0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bfc4      	itt	gt
 8004c8e:	1a9b      	subgt	r3, r3, r2
 8004c90:	18ed      	addgt	r5, r5, r3
 8004c92:	2600      	movs	r6, #0
 8004c94:	341a      	adds	r4, #26
 8004c96:	42b5      	cmp	r5, r6
 8004c98:	d11a      	bne.n	8004cd0 <_printf_common+0xc8>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e008      	b.n	8004cb0 <_printf_common+0xa8>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0xac>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7c6      	b.n	8004c46 <_printf_common+0x3e>
 8004cb8:	18e1      	adds	r1, r4, r3
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	2030      	movs	r0, #48	; 0x30
 8004cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc2:	4422      	add	r2, r4
 8004cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ccc:	3302      	adds	r3, #2
 8004cce:	e7c7      	b.n	8004c60 <_printf_common+0x58>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0e6      	beq.n	8004cac <_printf_common+0xa4>
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7d9      	b.n	8004c96 <_printf_common+0x8e>
	...

08004ce4 <_printf_i>:
 8004ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce8:	7e0f      	ldrb	r7, [r1, #24]
 8004cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cec:	2f78      	cmp	r7, #120	; 0x78
 8004cee:	4691      	mov	r9, r2
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	469a      	mov	sl, r3
 8004cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cfa:	d807      	bhi.n	8004d0c <_printf_i+0x28>
 8004cfc:	2f62      	cmp	r7, #98	; 0x62
 8004cfe:	d80a      	bhi.n	8004d16 <_printf_i+0x32>
 8004d00:	2f00      	cmp	r7, #0
 8004d02:	f000 80d4 	beq.w	8004eae <_printf_i+0x1ca>
 8004d06:	2f58      	cmp	r7, #88	; 0x58
 8004d08:	f000 80c0 	beq.w	8004e8c <_printf_i+0x1a8>
 8004d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d14:	e03a      	b.n	8004d8c <_printf_i+0xa8>
 8004d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d1a:	2b15      	cmp	r3, #21
 8004d1c:	d8f6      	bhi.n	8004d0c <_printf_i+0x28>
 8004d1e:	a101      	add	r1, pc, #4	; (adr r1, 8004d24 <_printf_i+0x40>)
 8004d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d24:	08004d7d 	.word	0x08004d7d
 8004d28:	08004d91 	.word	0x08004d91
 8004d2c:	08004d0d 	.word	0x08004d0d
 8004d30:	08004d0d 	.word	0x08004d0d
 8004d34:	08004d0d 	.word	0x08004d0d
 8004d38:	08004d0d 	.word	0x08004d0d
 8004d3c:	08004d91 	.word	0x08004d91
 8004d40:	08004d0d 	.word	0x08004d0d
 8004d44:	08004d0d 	.word	0x08004d0d
 8004d48:	08004d0d 	.word	0x08004d0d
 8004d4c:	08004d0d 	.word	0x08004d0d
 8004d50:	08004e95 	.word	0x08004e95
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004e4f 	.word	0x08004e4f
 8004d5c:	08004d0d 	.word	0x08004d0d
 8004d60:	08004d0d 	.word	0x08004d0d
 8004d64:	08004eb7 	.word	0x08004eb7
 8004d68:	08004d0d 	.word	0x08004d0d
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004d0d 	.word	0x08004d0d
 8004d74:	08004d0d 	.word	0x08004d0d
 8004d78:	08004e57 	.word	0x08004e57
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	602a      	str	r2, [r5, #0]
 8004d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e09f      	b.n	8004ed0 <_printf_i+0x1ec>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	0607      	lsls	r7, r0, #24
 8004d96:	f103 0104 	add.w	r1, r3, #4
 8004d9a:	6029      	str	r1, [r5, #0]
 8004d9c:	d501      	bpl.n	8004da2 <_printf_i+0xbe>
 8004d9e:	681e      	ldr	r6, [r3, #0]
 8004da0:	e003      	b.n	8004daa <_printf_i+0xc6>
 8004da2:	0646      	lsls	r6, r0, #25
 8004da4:	d5fb      	bpl.n	8004d9e <_printf_i+0xba>
 8004da6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	da03      	bge.n	8004db6 <_printf_i+0xd2>
 8004dae:	232d      	movs	r3, #45	; 0x2d
 8004db0:	4276      	negs	r6, r6
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db6:	485a      	ldr	r0, [pc, #360]	; (8004f20 <_printf_i+0x23c>)
 8004db8:	230a      	movs	r3, #10
 8004dba:	e012      	b.n	8004de2 <_printf_i+0xfe>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6029      	str	r1, [r5, #0]
 8004dc4:	0605      	lsls	r5, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xe8>
 8004dc8:	681e      	ldr	r6, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0xee>
 8004dcc:	0641      	lsls	r1, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xe4>
 8004dd0:	881e      	ldrh	r6, [r3, #0]
 8004dd2:	4853      	ldr	r0, [pc, #332]	; (8004f20 <_printf_i+0x23c>)
 8004dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2308      	moveq	r3, #8
 8004dda:	230a      	movne	r3, #10
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de2:	6865      	ldr	r5, [r4, #4]
 8004de4:	60a5      	str	r5, [r4, #8]
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	bfa2      	ittt	ge
 8004dea:	6821      	ldrge	r1, [r4, #0]
 8004dec:	f021 0104 	bicge.w	r1, r1, #4
 8004df0:	6021      	strge	r1, [r4, #0]
 8004df2:	b90e      	cbnz	r6, 8004df8 <_printf_i+0x114>
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	d04b      	beq.n	8004e90 <_printf_i+0x1ac>
 8004df8:	4615      	mov	r5, r2
 8004dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8004e02:	5dc7      	ldrb	r7, [r0, r7]
 8004e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e08:	4637      	mov	r7, r6
 8004e0a:	42bb      	cmp	r3, r7
 8004e0c:	460e      	mov	r6, r1
 8004e0e:	d9f4      	bls.n	8004dfa <_printf_i+0x116>
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10b      	bne.n	8004e2c <_printf_i+0x148>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	07de      	lsls	r6, r3, #31
 8004e18:	d508      	bpl.n	8004e2c <_printf_i+0x148>
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	6861      	ldr	r1, [r4, #4]
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	bfde      	ittt	le
 8004e22:	2330      	movle	r3, #48	; 0x30
 8004e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e2c:	1b52      	subs	r2, r2, r5
 8004e2e:	6122      	str	r2, [r4, #16]
 8004e30:	f8cd a000 	str.w	sl, [sp]
 8004e34:	464b      	mov	r3, r9
 8004e36:	aa03      	add	r2, sp, #12
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fee4 	bl	8004c08 <_printf_common>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d14a      	bne.n	8004eda <_printf_i+0x1f6>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b004      	add	sp, #16
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	f043 0320 	orr.w	r3, r3, #32
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	4833      	ldr	r0, [pc, #204]	; (8004f24 <_printf_i+0x240>)
 8004e58:	2778      	movs	r7, #120	; 0x78
 8004e5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	6829      	ldr	r1, [r5, #0]
 8004e62:	061f      	lsls	r7, r3, #24
 8004e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e68:	d402      	bmi.n	8004e70 <_printf_i+0x18c>
 8004e6a:	065f      	lsls	r7, r3, #25
 8004e6c:	bf48      	it	mi
 8004e6e:	b2b6      	uxthmi	r6, r6
 8004e70:	07df      	lsls	r7, r3, #31
 8004e72:	bf48      	it	mi
 8004e74:	f043 0320 	orrmi.w	r3, r3, #32
 8004e78:	6029      	str	r1, [r5, #0]
 8004e7a:	bf48      	it	mi
 8004e7c:	6023      	strmi	r3, [r4, #0]
 8004e7e:	b91e      	cbnz	r6, 8004e88 <_printf_i+0x1a4>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f023 0320 	bic.w	r3, r3, #32
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	2310      	movs	r3, #16
 8004e8a:	e7a7      	b.n	8004ddc <_printf_i+0xf8>
 8004e8c:	4824      	ldr	r0, [pc, #144]	; (8004f20 <_printf_i+0x23c>)
 8004e8e:	e7e4      	b.n	8004e5a <_printf_i+0x176>
 8004e90:	4615      	mov	r5, r2
 8004e92:	e7bd      	b.n	8004e10 <_printf_i+0x12c>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	6826      	ldr	r6, [r4, #0]
 8004e98:	6961      	ldr	r1, [r4, #20]
 8004e9a:	1d18      	adds	r0, r3, #4
 8004e9c:	6028      	str	r0, [r5, #0]
 8004e9e:	0635      	lsls	r5, r6, #24
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0x1c4>
 8004ea4:	6019      	str	r1, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <_printf_i+0x1ca>
 8004ea8:	0670      	lsls	r0, r6, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0x1c0>
 8004eac:	8019      	strh	r1, [r3, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	4615      	mov	r5, r2
 8004eb4:	e7bc      	b.n	8004e30 <_printf_i+0x14c>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	1d1a      	adds	r2, r3, #4
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	6862      	ldr	r2, [r4, #4]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f7fb f984 	bl	80001d0 <memchr>
 8004ec8:	b108      	cbz	r0, 8004ece <_printf_i+0x1ea>
 8004eca:	1b40      	subs	r0, r0, r5
 8004ecc:	6060      	str	r0, [r4, #4]
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	e7aa      	b.n	8004e30 <_printf_i+0x14c>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	462a      	mov	r2, r5
 8004ede:	4649      	mov	r1, r9
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	47d0      	blx	sl
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0ad      	beq.n	8004e44 <_printf_i+0x160>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	079b      	lsls	r3, r3, #30
 8004eec:	d413      	bmi.n	8004f16 <_printf_i+0x232>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	bfb8      	it	lt
 8004ef6:	4618      	movlt	r0, r3
 8004ef8:	e7a6      	b.n	8004e48 <_printf_i+0x164>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4632      	mov	r2, r6
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d09d      	beq.n	8004e44 <_printf_i+0x160>
 8004f08:	3501      	adds	r5, #1
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	9903      	ldr	r1, [sp, #12]
 8004f0e:	1a5b      	subs	r3, r3, r1
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dcf2      	bgt.n	8004efa <_printf_i+0x216>
 8004f14:	e7eb      	b.n	8004eee <_printf_i+0x20a>
 8004f16:	2500      	movs	r5, #0
 8004f18:	f104 0619 	add.w	r6, r4, #25
 8004f1c:	e7f5      	b.n	8004f0a <_printf_i+0x226>
 8004f1e:	bf00      	nop
 8004f20:	080058d9 	.word	0x080058d9
 8004f24:	080058ea 	.word	0x080058ea

08004f28 <__sflush_r>:
 8004f28:	898a      	ldrh	r2, [r1, #12]
 8004f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	4605      	mov	r5, r0
 8004f30:	0710      	lsls	r0, r2, #28
 8004f32:	460c      	mov	r4, r1
 8004f34:	d458      	bmi.n	8004fe8 <__sflush_r+0xc0>
 8004f36:	684b      	ldr	r3, [r1, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dc05      	bgt.n	8004f48 <__sflush_r+0x20>
 8004f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dc02      	bgt.n	8004f48 <__sflush_r+0x20>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	d0f9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f54:	682f      	ldr	r7, [r5, #0]
 8004f56:	6a21      	ldr	r1, [r4, #32]
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	d032      	beq.n	8004fc2 <__sflush_r+0x9a>
 8004f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	075a      	lsls	r2, r3, #29
 8004f62:	d505      	bpl.n	8004f70 <__sflush_r+0x48>
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	1ac0      	subs	r0, r0, r3
 8004f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f6a:	b10b      	cbz	r3, 8004f70 <__sflush_r+0x48>
 8004f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f6e:	1ac0      	subs	r0, r0, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	4602      	mov	r2, r0
 8004f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f76:	6a21      	ldr	r1, [r4, #32]
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b0      	blx	r6
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	d106      	bne.n	8004f90 <__sflush_r+0x68>
 8004f82:	6829      	ldr	r1, [r5, #0]
 8004f84:	291d      	cmp	r1, #29
 8004f86:	d82b      	bhi.n	8004fe0 <__sflush_r+0xb8>
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <__sflush_r+0x108>)
 8004f8a:	410a      	asrs	r2, r1
 8004f8c:	07d6      	lsls	r6, r2, #31
 8004f8e:	d427      	bmi.n	8004fe0 <__sflush_r+0xb8>
 8004f90:	2200      	movs	r2, #0
 8004f92:	6062      	str	r2, [r4, #4]
 8004f94:	04d9      	lsls	r1, r3, #19
 8004f96:	6922      	ldr	r2, [r4, #16]
 8004f98:	6022      	str	r2, [r4, #0]
 8004f9a:	d504      	bpl.n	8004fa6 <__sflush_r+0x7e>
 8004f9c:	1c42      	adds	r2, r0, #1
 8004f9e:	d101      	bne.n	8004fa4 <__sflush_r+0x7c>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b903      	cbnz	r3, 8004fa6 <__sflush_r+0x7e>
 8004fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8004fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fa8:	602f      	str	r7, [r5, #0]
 8004faa:	2900      	cmp	r1, #0
 8004fac:	d0c9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fb2:	4299      	cmp	r1, r3
 8004fb4:	d002      	beq.n	8004fbc <__sflush_r+0x94>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff fbea 	bl	8004790 <_free_r>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8004fc0:	e7c0      	b.n	8004f44 <__sflush_r+0x1c>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b0      	blx	r6
 8004fc8:	1c41      	adds	r1, r0, #1
 8004fca:	d1c8      	bne.n	8004f5e <__sflush_r+0x36>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0c5      	beq.n	8004f5e <__sflush_r+0x36>
 8004fd2:	2b1d      	cmp	r3, #29
 8004fd4:	d001      	beq.n	8004fda <__sflush_r+0xb2>
 8004fd6:	2b16      	cmp	r3, #22
 8004fd8:	d101      	bne.n	8004fde <__sflush_r+0xb6>
 8004fda:	602f      	str	r7, [r5, #0]
 8004fdc:	e7b1      	b.n	8004f42 <__sflush_r+0x1a>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	e7ad      	b.n	8004f44 <__sflush_r+0x1c>
 8004fe8:	690f      	ldr	r7, [r1, #16]
 8004fea:	2f00      	cmp	r7, #0
 8004fec:	d0a9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004fee:	0793      	lsls	r3, r2, #30
 8004ff0:	680e      	ldr	r6, [r1, #0]
 8004ff2:	bf08      	it	eq
 8004ff4:	694b      	ldreq	r3, [r1, #20]
 8004ff6:	600f      	str	r7, [r1, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	eba6 0807 	sub.w	r8, r6, r7
 8005000:	608b      	str	r3, [r1, #8]
 8005002:	f1b8 0f00 	cmp.w	r8, #0
 8005006:	dd9c      	ble.n	8004f42 <__sflush_r+0x1a>
 8005008:	6a21      	ldr	r1, [r4, #32]
 800500a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800500c:	4643      	mov	r3, r8
 800500e:	463a      	mov	r2, r7
 8005010:	4628      	mov	r0, r5
 8005012:	47b0      	blx	r6
 8005014:	2800      	cmp	r0, #0
 8005016:	dc06      	bgt.n	8005026 <__sflush_r+0xfe>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	e78e      	b.n	8004f44 <__sflush_r+0x1c>
 8005026:	4407      	add	r7, r0
 8005028:	eba8 0800 	sub.w	r8, r8, r0
 800502c:	e7e9      	b.n	8005002 <__sflush_r+0xda>
 800502e:	bf00      	nop
 8005030:	dfbffffe 	.word	0xdfbffffe

08005034 <_fflush_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	690b      	ldr	r3, [r1, #16]
 8005038:	4605      	mov	r5, r0
 800503a:	460c      	mov	r4, r1
 800503c:	b913      	cbnz	r3, 8005044 <_fflush_r+0x10>
 800503e:	2500      	movs	r5, #0
 8005040:	4628      	mov	r0, r5
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	b118      	cbz	r0, 800504e <_fflush_r+0x1a>
 8005046:	6a03      	ldr	r3, [r0, #32]
 8005048:	b90b      	cbnz	r3, 800504e <_fflush_r+0x1a>
 800504a:	f7ff fa99 	bl	8004580 <__sinit>
 800504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f3      	beq.n	800503e <_fflush_r+0xa>
 8005056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005058:	07d0      	lsls	r0, r2, #31
 800505a:	d404      	bmi.n	8005066 <_fflush_r+0x32>
 800505c:	0599      	lsls	r1, r3, #22
 800505e:	d402      	bmi.n	8005066 <_fflush_r+0x32>
 8005060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005062:	f7ff fb92 	bl	800478a <__retarget_lock_acquire_recursive>
 8005066:	4628      	mov	r0, r5
 8005068:	4621      	mov	r1, r4
 800506a:	f7ff ff5d 	bl	8004f28 <__sflush_r>
 800506e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005070:	07da      	lsls	r2, r3, #31
 8005072:	4605      	mov	r5, r0
 8005074:	d4e4      	bmi.n	8005040 <_fflush_r+0xc>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	059b      	lsls	r3, r3, #22
 800507a:	d4e1      	bmi.n	8005040 <_fflush_r+0xc>
 800507c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507e:	f7ff fb85 	bl	800478c <__retarget_lock_release_recursive>
 8005082:	e7dd      	b.n	8005040 <_fflush_r+0xc>

08005084 <__swbuf_r>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	460e      	mov	r6, r1
 8005088:	4614      	mov	r4, r2
 800508a:	4605      	mov	r5, r0
 800508c:	b118      	cbz	r0, 8005096 <__swbuf_r+0x12>
 800508e:	6a03      	ldr	r3, [r0, #32]
 8005090:	b90b      	cbnz	r3, 8005096 <__swbuf_r+0x12>
 8005092:	f7ff fa75 	bl	8004580 <__sinit>
 8005096:	69a3      	ldr	r3, [r4, #24]
 8005098:	60a3      	str	r3, [r4, #8]
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	071a      	lsls	r2, r3, #28
 800509e:	d525      	bpl.n	80050ec <__swbuf_r+0x68>
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	b31b      	cbz	r3, 80050ec <__swbuf_r+0x68>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	6922      	ldr	r2, [r4, #16]
 80050a8:	1a98      	subs	r0, r3, r2
 80050aa:	6963      	ldr	r3, [r4, #20]
 80050ac:	b2f6      	uxtb	r6, r6
 80050ae:	4283      	cmp	r3, r0
 80050b0:	4637      	mov	r7, r6
 80050b2:	dc04      	bgt.n	80050be <__swbuf_r+0x3a>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7ff ffbc 	bl	8005034 <_fflush_r>
 80050bc:	b9e0      	cbnz	r0, 80050f8 <__swbuf_r+0x74>
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	60a3      	str	r3, [r4, #8]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	6022      	str	r2, [r4, #0]
 80050ca:	701e      	strb	r6, [r3, #0]
 80050cc:	6962      	ldr	r2, [r4, #20]
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d004      	beq.n	80050de <__swbuf_r+0x5a>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	07db      	lsls	r3, r3, #31
 80050d8:	d506      	bpl.n	80050e8 <__swbuf_r+0x64>
 80050da:	2e0a      	cmp	r6, #10
 80050dc:	d104      	bne.n	80050e8 <__swbuf_r+0x64>
 80050de:	4621      	mov	r1, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	f7ff ffa7 	bl	8005034 <_fflush_r>
 80050e6:	b938      	cbnz	r0, 80050f8 <__swbuf_r+0x74>
 80050e8:	4638      	mov	r0, r7
 80050ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f806 	bl	8005100 <__swsetup_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0d5      	beq.n	80050a4 <__swbuf_r+0x20>
 80050f8:	f04f 37ff 	mov.w	r7, #4294967295
 80050fc:	e7f4      	b.n	80050e8 <__swbuf_r+0x64>
	...

08005100 <__swsetup_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <__swsetup_r+0xac>)
 8005104:	4605      	mov	r5, r0
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	460c      	mov	r4, r1
 800510a:	b118      	cbz	r0, 8005114 <__swsetup_r+0x14>
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	b90b      	cbnz	r3, 8005114 <__swsetup_r+0x14>
 8005110:	f7ff fa36 	bl	8004580 <__sinit>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800511a:	0718      	lsls	r0, r3, #28
 800511c:	d422      	bmi.n	8005164 <__swsetup_r+0x64>
 800511e:	06d9      	lsls	r1, r3, #27
 8005120:	d407      	bmi.n	8005132 <__swsetup_r+0x32>
 8005122:	2309      	movs	r3, #9
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	e034      	b.n	800519c <__swsetup_r+0x9c>
 8005132:	0758      	lsls	r0, r3, #29
 8005134:	d512      	bpl.n	800515c <__swsetup_r+0x5c>
 8005136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005138:	b141      	cbz	r1, 800514c <__swsetup_r+0x4c>
 800513a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800513e:	4299      	cmp	r1, r3
 8005140:	d002      	beq.n	8005148 <__swsetup_r+0x48>
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff fb24 	bl	8004790 <_free_r>
 8005148:	2300      	movs	r3, #0
 800514a:	6363      	str	r3, [r4, #52]	; 0x34
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	2300      	movs	r3, #0
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	f043 0308 	orr.w	r3, r3, #8
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b94b      	cbnz	r3, 800517c <__swsetup_r+0x7c>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005172:	d003      	beq.n	800517c <__swsetup_r+0x7c>
 8005174:	4621      	mov	r1, r4
 8005176:	4628      	mov	r0, r5
 8005178:	f000 f850 	bl	800521c <__smakebuf_r>
 800517c:	89a0      	ldrh	r0, [r4, #12]
 800517e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005182:	f010 0301 	ands.w	r3, r0, #1
 8005186:	d00a      	beq.n	800519e <__swsetup_r+0x9e>
 8005188:	2300      	movs	r3, #0
 800518a:	60a3      	str	r3, [r4, #8]
 800518c:	6963      	ldr	r3, [r4, #20]
 800518e:	425b      	negs	r3, r3
 8005190:	61a3      	str	r3, [r4, #24]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	b943      	cbnz	r3, 80051a8 <__swsetup_r+0xa8>
 8005196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800519a:	d1c4      	bne.n	8005126 <__swsetup_r+0x26>
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	0781      	lsls	r1, r0, #30
 80051a0:	bf58      	it	pl
 80051a2:	6963      	ldrpl	r3, [r4, #20]
 80051a4:	60a3      	str	r3, [r4, #8]
 80051a6:	e7f4      	b.n	8005192 <__swsetup_r+0x92>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e7f7      	b.n	800519c <__swsetup_r+0x9c>
 80051ac:	20000064 	.word	0x20000064

080051b0 <_sbrk_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_sbrk_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fc fee2 	bl	8001f84 <_sbrk>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_sbrk_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_sbrk_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200002f4 	.word	0x200002f4

080051d0 <__swhatbuf_r>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	460c      	mov	r4, r1
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	2900      	cmp	r1, #0
 80051da:	b096      	sub	sp, #88	; 0x58
 80051dc:	4615      	mov	r5, r2
 80051de:	461e      	mov	r6, r3
 80051e0:	da0d      	bge.n	80051fe <__swhatbuf_r+0x2e>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051f2:	2340      	movne	r3, #64	; 0x40
 80051f4:	2000      	movs	r0, #0
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	602b      	str	r3, [r5, #0]
 80051fa:	b016      	add	sp, #88	; 0x58
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	466a      	mov	r2, sp
 8005200:	f000 f848 	bl	8005294 <_fstat_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	dbec      	blt.n	80051e2 <__swhatbuf_r+0x12>
 8005208:	9901      	ldr	r1, [sp, #4]
 800520a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800520e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005212:	4259      	negs	r1, r3
 8005214:	4159      	adcs	r1, r3
 8005216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521a:	e7eb      	b.n	80051f4 <__swhatbuf_r+0x24>

0800521c <__smakebuf_r>:
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005220:	079d      	lsls	r5, r3, #30
 8005222:	4606      	mov	r6, r0
 8005224:	460c      	mov	r4, r1
 8005226:	d507      	bpl.n	8005238 <__smakebuf_r+0x1c>
 8005228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	2301      	movs	r3, #1
 8005232:	6163      	str	r3, [r4, #20]
 8005234:	b002      	add	sp, #8
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	ab01      	add	r3, sp, #4
 800523a:	466a      	mov	r2, sp
 800523c:	f7ff ffc8 	bl	80051d0 <__swhatbuf_r>
 8005240:	9900      	ldr	r1, [sp, #0]
 8005242:	4605      	mov	r5, r0
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff fb0f 	bl	8004868 <_malloc_r>
 800524a:	b948      	cbnz	r0, 8005260 <__smakebuf_r+0x44>
 800524c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005250:	059a      	lsls	r2, r3, #22
 8005252:	d4ef      	bmi.n	8005234 <__smakebuf_r+0x18>
 8005254:	f023 0303 	bic.w	r3, r3, #3
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	e7e3      	b.n	8005228 <__smakebuf_r+0xc>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	6163      	str	r3, [r4, #20]
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	6120      	str	r0, [r4, #16]
 8005272:	b15b      	cbz	r3, 800528c <__smakebuf_r+0x70>
 8005274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005278:	4630      	mov	r0, r6
 800527a:	f000 f81d 	bl	80052b8 <_isatty_r>
 800527e:	b128      	cbz	r0, 800528c <__smakebuf_r+0x70>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	431d      	orrs	r5, r3
 8005290:	81a5      	strh	r5, [r4, #12]
 8005292:	e7cf      	b.n	8005234 <__smakebuf_r+0x18>

08005294 <_fstat_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d07      	ldr	r5, [pc, #28]	; (80052b4 <_fstat_r+0x20>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	602b      	str	r3, [r5, #0]
 80052a2:	f7fc fe46 	bl	8001f32 <_fstat>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	d102      	bne.n	80052b0 <_fstat_r+0x1c>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	b103      	cbz	r3, 80052b0 <_fstat_r+0x1c>
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
 80052b2:	bf00      	nop
 80052b4:	200002f4 	.word	0x200002f4

080052b8 <_isatty_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_isatty_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fc fe45 	bl	8001f52 <_isatty>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_isatty_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_isatty_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200002f4 	.word	0x200002f4

080052d8 <atan2>:
 80052d8:	f000 b822 	b.w	8005320 <__ieee754_atan2>

080052dc <sqrtf>:
 80052dc:	b508      	push	{r3, lr}
 80052de:	ed2d 8b02 	vpush	{d8}
 80052e2:	eeb0 8a40 	vmov.f32	s16, s0
 80052e6:	f000 f817 	bl	8005318 <__ieee754_sqrtf>
 80052ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d60c      	bvs.n	800530e <sqrtf+0x32>
 80052f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005314 <sqrtf+0x38>
 80052f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d505      	bpl.n	800530e <sqrtf+0x32>
 8005302:	f7ff fa17 	bl	8004734 <__errno>
 8005306:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800530a:	2321      	movs	r3, #33	; 0x21
 800530c:	6003      	str	r3, [r0, #0]
 800530e:	ecbd 8b02 	vpop	{d8}
 8005312:	bd08      	pop	{r3, pc}
 8005314:	00000000 	.word	0x00000000

08005318 <__ieee754_sqrtf>:
 8005318:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800531c:	4770      	bx	lr
	...

08005320 <__ieee754_atan2>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	ec57 6b11 	vmov	r6, r7, d1
 8005328:	4273      	negs	r3, r6
 800532a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80054a8 <__ieee754_atan2+0x188>
 800532e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005332:	4333      	orrs	r3, r6
 8005334:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005338:	4543      	cmp	r3, r8
 800533a:	ec51 0b10 	vmov	r0, r1, d0
 800533e:	ee11 5a10 	vmov	r5, s2
 8005342:	d80a      	bhi.n	800535a <__ieee754_atan2+0x3a>
 8005344:	4244      	negs	r4, r0
 8005346:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800534a:	4304      	orrs	r4, r0
 800534c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005350:	4544      	cmp	r4, r8
 8005352:	ee10 9a10 	vmov	r9, s0
 8005356:	468e      	mov	lr, r1
 8005358:	d907      	bls.n	800536a <__ieee754_atan2+0x4a>
 800535a:	4632      	mov	r2, r6
 800535c:	463b      	mov	r3, r7
 800535e:	f7fa ff8d 	bl	800027c <__adddf3>
 8005362:	ec41 0b10 	vmov	d0, r0, r1
 8005366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800536e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005372:	4334      	orrs	r4, r6
 8005374:	d103      	bne.n	800537e <__ieee754_atan2+0x5e>
 8005376:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800537a:	f000 b899 	b.w	80054b0 <atan>
 800537e:	17bc      	asrs	r4, r7, #30
 8005380:	f004 0402 	and.w	r4, r4, #2
 8005384:	ea53 0909 	orrs.w	r9, r3, r9
 8005388:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800538c:	d107      	bne.n	800539e <__ieee754_atan2+0x7e>
 800538e:	2c02      	cmp	r4, #2
 8005390:	d05f      	beq.n	8005452 <__ieee754_atan2+0x132>
 8005392:	2c03      	cmp	r4, #3
 8005394:	d1e5      	bne.n	8005362 <__ieee754_atan2+0x42>
 8005396:	a140      	add	r1, pc, #256	; (adr r1, 8005498 <__ieee754_atan2+0x178>)
 8005398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800539c:	e7e1      	b.n	8005362 <__ieee754_atan2+0x42>
 800539e:	4315      	orrs	r5, r2
 80053a0:	d106      	bne.n	80053b0 <__ieee754_atan2+0x90>
 80053a2:	f1be 0f00 	cmp.w	lr, #0
 80053a6:	da5f      	bge.n	8005468 <__ieee754_atan2+0x148>
 80053a8:	a13d      	add	r1, pc, #244	; (adr r1, 80054a0 <__ieee754_atan2+0x180>)
 80053aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ae:	e7d8      	b.n	8005362 <__ieee754_atan2+0x42>
 80053b0:	4542      	cmp	r2, r8
 80053b2:	d10f      	bne.n	80053d4 <__ieee754_atan2+0xb4>
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ba:	d107      	bne.n	80053cc <__ieee754_atan2+0xac>
 80053bc:	2c02      	cmp	r4, #2
 80053be:	d84c      	bhi.n	800545a <__ieee754_atan2+0x13a>
 80053c0:	4b33      	ldr	r3, [pc, #204]	; (8005490 <__ieee754_atan2+0x170>)
 80053c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053ca:	e7ca      	b.n	8005362 <__ieee754_atan2+0x42>
 80053cc:	2c02      	cmp	r4, #2
 80053ce:	d848      	bhi.n	8005462 <__ieee754_atan2+0x142>
 80053d0:	4b30      	ldr	r3, [pc, #192]	; (8005494 <__ieee754_atan2+0x174>)
 80053d2:	e7f6      	b.n	80053c2 <__ieee754_atan2+0xa2>
 80053d4:	4543      	cmp	r3, r8
 80053d6:	d0e4      	beq.n	80053a2 <__ieee754_atan2+0x82>
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80053de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80053e2:	da1e      	bge.n	8005422 <__ieee754_atan2+0x102>
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	da01      	bge.n	80053ec <__ieee754_atan2+0xcc>
 80053e8:	323c      	adds	r2, #60	; 0x3c
 80053ea:	db1e      	blt.n	800542a <__ieee754_atan2+0x10a>
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	f7fb fa24 	bl	800083c <__aeabi_ddiv>
 80053f4:	ec41 0b10 	vmov	d0, r0, r1
 80053f8:	f000 f9fa 	bl	80057f0 <fabs>
 80053fc:	f000 f858 	bl	80054b0 <atan>
 8005400:	ec51 0b10 	vmov	r0, r1, d0
 8005404:	2c01      	cmp	r4, #1
 8005406:	d013      	beq.n	8005430 <__ieee754_atan2+0x110>
 8005408:	2c02      	cmp	r4, #2
 800540a:	d015      	beq.n	8005438 <__ieee754_atan2+0x118>
 800540c:	2c00      	cmp	r4, #0
 800540e:	d0a8      	beq.n	8005362 <__ieee754_atan2+0x42>
 8005410:	a317      	add	r3, pc, #92	; (adr r3, 8005470 <__ieee754_atan2+0x150>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fa ff2f 	bl	8000278 <__aeabi_dsub>
 800541a:	a317      	add	r3, pc, #92	; (adr r3, 8005478 <__ieee754_atan2+0x158>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	e014      	b.n	800544c <__ieee754_atan2+0x12c>
 8005422:	a117      	add	r1, pc, #92	; (adr r1, 8005480 <__ieee754_atan2+0x160>)
 8005424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005428:	e7ec      	b.n	8005404 <__ieee754_atan2+0xe4>
 800542a:	2000      	movs	r0, #0
 800542c:	2100      	movs	r1, #0
 800542e:	e7e9      	b.n	8005404 <__ieee754_atan2+0xe4>
 8005430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005434:	4619      	mov	r1, r3
 8005436:	e794      	b.n	8005362 <__ieee754_atan2+0x42>
 8005438:	a30d      	add	r3, pc, #52	; (adr r3, 8005470 <__ieee754_atan2+0x150>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa ff1b 	bl	8000278 <__aeabi_dsub>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	a10c      	add	r1, pc, #48	; (adr r1, 8005478 <__ieee754_atan2+0x158>)
 8005448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800544c:	f7fa ff14 	bl	8000278 <__aeabi_dsub>
 8005450:	e787      	b.n	8005362 <__ieee754_atan2+0x42>
 8005452:	a109      	add	r1, pc, #36	; (adr r1, 8005478 <__ieee754_atan2+0x158>)
 8005454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005458:	e783      	b.n	8005362 <__ieee754_atan2+0x42>
 800545a:	a10b      	add	r1, pc, #44	; (adr r1, 8005488 <__ieee754_atan2+0x168>)
 800545c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005460:	e77f      	b.n	8005362 <__ieee754_atan2+0x42>
 8005462:	2000      	movs	r0, #0
 8005464:	2100      	movs	r1, #0
 8005466:	e77c      	b.n	8005362 <__ieee754_atan2+0x42>
 8005468:	a105      	add	r1, pc, #20	; (adr r1, 8005480 <__ieee754_atan2+0x160>)
 800546a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546e:	e778      	b.n	8005362 <__ieee754_atan2+0x42>
 8005470:	33145c07 	.word	0x33145c07
 8005474:	3ca1a626 	.word	0x3ca1a626
 8005478:	54442d18 	.word	0x54442d18
 800547c:	400921fb 	.word	0x400921fb
 8005480:	54442d18 	.word	0x54442d18
 8005484:	3ff921fb 	.word	0x3ff921fb
 8005488:	54442d18 	.word	0x54442d18
 800548c:	3fe921fb 	.word	0x3fe921fb
 8005490:	08005900 	.word	0x08005900
 8005494:	08005918 	.word	0x08005918
 8005498:	54442d18 	.word	0x54442d18
 800549c:	c00921fb 	.word	0xc00921fb
 80054a0:	54442d18 	.word	0x54442d18
 80054a4:	bff921fb 	.word	0xbff921fb
 80054a8:	7ff00000 	.word	0x7ff00000
 80054ac:	00000000 	.word	0x00000000

080054b0 <atan>:
 80054b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	ec55 4b10 	vmov	r4, r5, d0
 80054b8:	4bc3      	ldr	r3, [pc, #780]	; (80057c8 <atan+0x318>)
 80054ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054be:	429e      	cmp	r6, r3
 80054c0:	46ab      	mov	fp, r5
 80054c2:	dd18      	ble.n	80054f6 <atan+0x46>
 80054c4:	4bc1      	ldr	r3, [pc, #772]	; (80057cc <atan+0x31c>)
 80054c6:	429e      	cmp	r6, r3
 80054c8:	dc01      	bgt.n	80054ce <atan+0x1e>
 80054ca:	d109      	bne.n	80054e0 <atan+0x30>
 80054cc:	b144      	cbz	r4, 80054e0 <atan+0x30>
 80054ce:	4622      	mov	r2, r4
 80054d0:	462b      	mov	r3, r5
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fa fed1 	bl	800027c <__adddf3>
 80054da:	4604      	mov	r4, r0
 80054dc:	460d      	mov	r5, r1
 80054de:	e006      	b.n	80054ee <atan+0x3e>
 80054e0:	f1bb 0f00 	cmp.w	fp, #0
 80054e4:	f300 8131 	bgt.w	800574a <atan+0x29a>
 80054e8:	a59b      	add	r5, pc, #620	; (adr r5, 8005758 <atan+0x2a8>)
 80054ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80054ee:	ec45 4b10 	vmov	d0, r4, r5
 80054f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	4bb6      	ldr	r3, [pc, #728]	; (80057d0 <atan+0x320>)
 80054f8:	429e      	cmp	r6, r3
 80054fa:	dc14      	bgt.n	8005526 <atan+0x76>
 80054fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005500:	429e      	cmp	r6, r3
 8005502:	dc0d      	bgt.n	8005520 <atan+0x70>
 8005504:	a396      	add	r3, pc, #600	; (adr r3, 8005760 <atan+0x2b0>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	ee10 0a10 	vmov	r0, s0
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa feb4 	bl	800027c <__adddf3>
 8005514:	4baf      	ldr	r3, [pc, #700]	; (80057d4 <atan+0x324>)
 8005516:	2200      	movs	r2, #0
 8005518:	f7fb faf6 	bl	8000b08 <__aeabi_dcmpgt>
 800551c:	2800      	cmp	r0, #0
 800551e:	d1e6      	bne.n	80054ee <atan+0x3e>
 8005520:	f04f 3aff 	mov.w	sl, #4294967295
 8005524:	e02b      	b.n	800557e <atan+0xce>
 8005526:	f000 f963 	bl	80057f0 <fabs>
 800552a:	4bab      	ldr	r3, [pc, #684]	; (80057d8 <atan+0x328>)
 800552c:	429e      	cmp	r6, r3
 800552e:	ec55 4b10 	vmov	r4, r5, d0
 8005532:	f300 80bf 	bgt.w	80056b4 <atan+0x204>
 8005536:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800553a:	429e      	cmp	r6, r3
 800553c:	f300 80a0 	bgt.w	8005680 <atan+0x1d0>
 8005540:	ee10 2a10 	vmov	r2, s0
 8005544:	ee10 0a10 	vmov	r0, s0
 8005548:	462b      	mov	r3, r5
 800554a:	4629      	mov	r1, r5
 800554c:	f7fa fe96 	bl	800027c <__adddf3>
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <atan+0x324>)
 8005552:	2200      	movs	r2, #0
 8005554:	f7fa fe90 	bl	8000278 <__aeabi_dsub>
 8005558:	2200      	movs	r2, #0
 800555a:	4606      	mov	r6, r0
 800555c:	460f      	mov	r7, r1
 800555e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fa fe89 	bl	800027c <__adddf3>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fb f963 	bl	800083c <__aeabi_ddiv>
 8005576:	f04f 0a00 	mov.w	sl, #0
 800557a:	4604      	mov	r4, r0
 800557c:	460d      	mov	r5, r1
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f7fb f82f 	bl	80005e8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4680      	mov	r8, r0
 8005590:	4689      	mov	r9, r1
 8005592:	f7fb f829 	bl	80005e8 <__aeabi_dmul>
 8005596:	a374      	add	r3, pc, #464	; (adr r3, 8005768 <atan+0x2b8>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	f7fb f822 	bl	80005e8 <__aeabi_dmul>
 80055a4:	a372      	add	r3, pc, #456	; (adr r3, 8005770 <atan+0x2c0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f7fa fe67 	bl	800027c <__adddf3>
 80055ae:	4632      	mov	r2, r6
 80055b0:	463b      	mov	r3, r7
 80055b2:	f7fb f819 	bl	80005e8 <__aeabi_dmul>
 80055b6:	a370      	add	r3, pc, #448	; (adr r3, 8005778 <atan+0x2c8>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fa fe5e 	bl	800027c <__adddf3>
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	f7fb f810 	bl	80005e8 <__aeabi_dmul>
 80055c8:	a36d      	add	r3, pc, #436	; (adr r3, 8005780 <atan+0x2d0>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe55 	bl	800027c <__adddf3>
 80055d2:	4632      	mov	r2, r6
 80055d4:	463b      	mov	r3, r7
 80055d6:	f7fb f807 	bl	80005e8 <__aeabi_dmul>
 80055da:	a36b      	add	r3, pc, #428	; (adr r3, 8005788 <atan+0x2d8>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa fe4c 	bl	800027c <__adddf3>
 80055e4:	4632      	mov	r2, r6
 80055e6:	463b      	mov	r3, r7
 80055e8:	f7fa fffe 	bl	80005e8 <__aeabi_dmul>
 80055ec:	a368      	add	r3, pc, #416	; (adr r3, 8005790 <atan+0x2e0>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa fe43 	bl	800027c <__adddf3>
 80055f6:	4642      	mov	r2, r8
 80055f8:	464b      	mov	r3, r9
 80055fa:	f7fa fff5 	bl	80005e8 <__aeabi_dmul>
 80055fe:	a366      	add	r3, pc, #408	; (adr r3, 8005798 <atan+0x2e8>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	4680      	mov	r8, r0
 8005606:	4689      	mov	r9, r1
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fa ffec 	bl	80005e8 <__aeabi_dmul>
 8005610:	a363      	add	r3, pc, #396	; (adr r3, 80057a0 <atan+0x2f0>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fe2f 	bl	8000278 <__aeabi_dsub>
 800561a:	4632      	mov	r2, r6
 800561c:	463b      	mov	r3, r7
 800561e:	f7fa ffe3 	bl	80005e8 <__aeabi_dmul>
 8005622:	a361      	add	r3, pc, #388	; (adr r3, 80057a8 <atan+0x2f8>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa fe26 	bl	8000278 <__aeabi_dsub>
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	f7fa ffda 	bl	80005e8 <__aeabi_dmul>
 8005634:	a35e      	add	r3, pc, #376	; (adr r3, 80057b0 <atan+0x300>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fe1d 	bl	8000278 <__aeabi_dsub>
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	f7fa ffd1 	bl	80005e8 <__aeabi_dmul>
 8005646:	a35c      	add	r3, pc, #368	; (adr r3, 80057b8 <atan+0x308>)
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa fe14 	bl	8000278 <__aeabi_dsub>
 8005650:	4632      	mov	r2, r6
 8005652:	463b      	mov	r3, r7
 8005654:	f7fa ffc8 	bl	80005e8 <__aeabi_dmul>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4640      	mov	r0, r8
 800565e:	4649      	mov	r1, r9
 8005660:	f7fa fe0c 	bl	800027c <__adddf3>
 8005664:	4622      	mov	r2, r4
 8005666:	462b      	mov	r3, r5
 8005668:	f7fa ffbe 	bl	80005e8 <__aeabi_dmul>
 800566c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	d14b      	bne.n	800570e <atan+0x25e>
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fa fdfd 	bl	8000278 <__aeabi_dsub>
 800567e:	e72c      	b.n	80054da <atan+0x2a>
 8005680:	ee10 0a10 	vmov	r0, s0
 8005684:	4b53      	ldr	r3, [pc, #332]	; (80057d4 <atan+0x324>)
 8005686:	2200      	movs	r2, #0
 8005688:	4629      	mov	r1, r5
 800568a:	f7fa fdf5 	bl	8000278 <__aeabi_dsub>
 800568e:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <atan+0x324>)
 8005690:	4606      	mov	r6, r0
 8005692:	460f      	mov	r7, r1
 8005694:	2200      	movs	r2, #0
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fdef 	bl	800027c <__adddf3>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4630      	mov	r0, r6
 80056a4:	4639      	mov	r1, r7
 80056a6:	f7fb f8c9 	bl	800083c <__aeabi_ddiv>
 80056aa:	f04f 0a01 	mov.w	sl, #1
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	e764      	b.n	800557e <atan+0xce>
 80056b4:	4b49      	ldr	r3, [pc, #292]	; (80057dc <atan+0x32c>)
 80056b6:	429e      	cmp	r6, r3
 80056b8:	da1d      	bge.n	80056f6 <atan+0x246>
 80056ba:	ee10 0a10 	vmov	r0, s0
 80056be:	4b48      	ldr	r3, [pc, #288]	; (80057e0 <atan+0x330>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	4629      	mov	r1, r5
 80056c4:	f7fa fdd8 	bl	8000278 <__aeabi_dsub>
 80056c8:	4b45      	ldr	r3, [pc, #276]	; (80057e0 <atan+0x330>)
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	2200      	movs	r2, #0
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fa ff88 	bl	80005e8 <__aeabi_dmul>
 80056d8:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <atan+0x324>)
 80056da:	2200      	movs	r2, #0
 80056dc:	f7fa fdce 	bl	800027c <__adddf3>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	f7fb f8a8 	bl	800083c <__aeabi_ddiv>
 80056ec:	f04f 0a02 	mov.w	sl, #2
 80056f0:	4604      	mov	r4, r0
 80056f2:	460d      	mov	r5, r1
 80056f4:	e743      	b.n	800557e <atan+0xce>
 80056f6:	462b      	mov	r3, r5
 80056f8:	ee10 2a10 	vmov	r2, s0
 80056fc:	4939      	ldr	r1, [pc, #228]	; (80057e4 <atan+0x334>)
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fb f89c 	bl	800083c <__aeabi_ddiv>
 8005704:	f04f 0a03 	mov.w	sl, #3
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	e737      	b.n	800557e <atan+0xce>
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <atan+0x338>)
 8005710:	4e36      	ldr	r6, [pc, #216]	; (80057ec <atan+0x33c>)
 8005712:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fdad 	bl	8000278 <__aeabi_dsub>
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	f7fa fda9 	bl	8000278 <__aeabi_dsub>
 8005726:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005732:	f7fa fda1 	bl	8000278 <__aeabi_dsub>
 8005736:	f1bb 0f00 	cmp.w	fp, #0
 800573a:	4604      	mov	r4, r0
 800573c:	460d      	mov	r5, r1
 800573e:	f6bf aed6 	bge.w	80054ee <atan+0x3e>
 8005742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005746:	461d      	mov	r5, r3
 8005748:	e6d1      	b.n	80054ee <atan+0x3e>
 800574a:	a51d      	add	r5, pc, #116	; (adr r5, 80057c0 <atan+0x310>)
 800574c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005750:	e6cd      	b.n	80054ee <atan+0x3e>
 8005752:	bf00      	nop
 8005754:	f3af 8000 	nop.w
 8005758:	54442d18 	.word	0x54442d18
 800575c:	bff921fb 	.word	0xbff921fb
 8005760:	8800759c 	.word	0x8800759c
 8005764:	7e37e43c 	.word	0x7e37e43c
 8005768:	e322da11 	.word	0xe322da11
 800576c:	3f90ad3a 	.word	0x3f90ad3a
 8005770:	24760deb 	.word	0x24760deb
 8005774:	3fa97b4b 	.word	0x3fa97b4b
 8005778:	a0d03d51 	.word	0xa0d03d51
 800577c:	3fb10d66 	.word	0x3fb10d66
 8005780:	c54c206e 	.word	0xc54c206e
 8005784:	3fb745cd 	.word	0x3fb745cd
 8005788:	920083ff 	.word	0x920083ff
 800578c:	3fc24924 	.word	0x3fc24924
 8005790:	5555550d 	.word	0x5555550d
 8005794:	3fd55555 	.word	0x3fd55555
 8005798:	2c6a6c2f 	.word	0x2c6a6c2f
 800579c:	bfa2b444 	.word	0xbfa2b444
 80057a0:	52defd9a 	.word	0x52defd9a
 80057a4:	3fadde2d 	.word	0x3fadde2d
 80057a8:	af749a6d 	.word	0xaf749a6d
 80057ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80057b0:	fe231671 	.word	0xfe231671
 80057b4:	3fbc71c6 	.word	0x3fbc71c6
 80057b8:	9998ebc4 	.word	0x9998ebc4
 80057bc:	3fc99999 	.word	0x3fc99999
 80057c0:	54442d18 	.word	0x54442d18
 80057c4:	3ff921fb 	.word	0x3ff921fb
 80057c8:	440fffff 	.word	0x440fffff
 80057cc:	7ff00000 	.word	0x7ff00000
 80057d0:	3fdbffff 	.word	0x3fdbffff
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	3ff2ffff 	.word	0x3ff2ffff
 80057dc:	40038000 	.word	0x40038000
 80057e0:	3ff80000 	.word	0x3ff80000
 80057e4:	bff00000 	.word	0xbff00000
 80057e8:	08005950 	.word	0x08005950
 80057ec:	08005930 	.word	0x08005930

080057f0 <fabs>:
 80057f0:	ec51 0b10 	vmov	r0, r1, d0
 80057f4:	ee10 2a10 	vmov	r2, s0
 80057f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057fc:	ec43 2b10 	vmov	d0, r2, r3
 8005800:	4770      	bx	lr
	...

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
