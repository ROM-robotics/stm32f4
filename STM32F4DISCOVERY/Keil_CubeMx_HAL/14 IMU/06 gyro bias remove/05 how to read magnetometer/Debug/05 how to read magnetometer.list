
05 how to read magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039cc  080039cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001f4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006d3c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019b8  00000000  00000000  00026e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  000287d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000553  00000000  00000000  00028f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021441  00000000  00000000  0002946b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009567  00000000  00000000  0004a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3f6d  00000000  00000000  00053e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022d8  00000000  00000000  00117d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  0011a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003904 	.word	0x08003904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003904 	.word	0x08003904

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a25      	ldr	r2, [pc, #148]	; (8000620 <MX_GPIO_Init+0xb4>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005f8:	f000 fff8 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000614:	f000 fe4e 	bl	80012b4 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d013      	beq.n	8000668 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000648:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	e000      	b.n	8000654 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000652:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fc9e 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f862 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff72 	bl	800056c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000688:	f000 fae4 	bl	8000c54 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  mpu_init();
 800068c:	f000 f944 	bl	8000918 <mpu_init>
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 fd04 	bl	80010a0 <HAL_Delay>
	 mpu_read_sensor(&imu_data);
 8000698:	4824      	ldr	r0, [pc, #144]	; (800072c <main+0xb4>)
 800069a:	f000 f9cb 	bl	8000a34 <mpu_read_sensor>
	 sum_gyro_x += imu_data.x_gyro;
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0xb4>)
 80006a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0xb8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <main+0xb8>)
 80006ae:	6013      	str	r3, [r2, #0]
	 sum_gyro_y += imu_data.y_gyro;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <main+0xb4>)
 80006b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <main+0xbc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <main+0xbc>)
 80006c0:	6013      	str	r3, [r2, #0]
	 sum_gyro_z += imu_data.z_gyro;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <main+0xb4>)
 80006c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <main+0xc0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a19      	ldr	r2, [pc, #100]	; (8000738 <main+0xc0>)
 80006d2:	6013      	str	r3, [r2, #0]

	 printf("Accelero : %d, %d, and %d \n", imu_data.x_accel, imu_data.y_accel, imu_data.z_accel);
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xb4>)
 80006d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006da:	4619      	mov	r1, r3
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xb4>)
 80006de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0xb4>)
 80006e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <main+0xc4>)
 80006ec:	f002 fa94 	bl	8002c18 <iprintf>
	 printf("Gyro : %d, %d, and %d \n", imu_data.x_gyro, imu_data.y_gyro, imu_data.z_gyro);
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <main+0xb4>)
 80006f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0xb4>)
 80006fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <main+0xb4>)
 8000702:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <main+0xc8>)
 8000708:	f002 fa86 	bl	8002c18 <iprintf>
	 printf("Magneto : %d, %d, and %d \n", imu_data.x_mag, imu_data.y_mag, imu_data.z_mag);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <main+0xb4>)
 800070e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000712:	4619      	mov	r1, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <main+0xb4>)
 8000716:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800071a:	461a      	mov	r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <main+0xb4>)
 800071e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <main+0xcc>)
 8000724:	f002 fa78 	bl	8002c18 <iprintf>
	 HAL_Delay(1000);
 8000728:	e7b2      	b.n	8000690 <main+0x18>
 800072a:	bf00      	nop
 800072c:	20000090 	.word	0x20000090
 8000730:	20000084 	.word	0x20000084
 8000734:	20000088 	.word	0x20000088
 8000738:	2000008c 	.word	0x2000008c
 800073c:	0800391c 	.word	0x0800391c
 8000740:	08003938 	.word	0x08003938
 8000744:	08003950 	.word	0x08003950

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fab3 	bl	8002cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007bc:	23a8      	movs	r3, #168	; 0xa8
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ff27 	bl	8001620 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 f83c 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f988 	bl	8001b10 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000806:	f000 f825 	bl	8000854 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e009      	b.n	8000842 <_write+0x26>
		ITM_SendChar(*ptr++);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	60ba      	str	r2, [r7, #8]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fef6 	bl	8000628 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	3301      	adds	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	dbf1      	blt.n	800082e <_write+0x12>
	return len;
 800084a:	687b      	ldr	r3, [r7, #4]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <activate_spi2_mpu>:
int16_t x_gyro_bias, y_gyro_bias, z_gyro_bias;

static void remove_gyro_bias(void);

static void activate_spi2_mpu(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2101      	movs	r1, #1
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <activate_spi2_mpu+0x14>)
 800086a:	f000 febf 	bl	80015ec <HAL_GPIO_WritePin>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020800 	.word	0x40020800

08000878 <deactivate_spi2_mpu>:

static void deactivate_spi2_mpu(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <deactivate_spi2_mpu+0x14>)
 8000882:	f000 feb3 	bl	80015ec <HAL_GPIO_WritePin>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020800 	.word	0x40020800

08000890 <ak8963_write_reg>:


void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 80008a0:	210c      	movs	r1, #12
 80008a2:	2025      	movs	r0, #37	; 0x25
 80008a4:	f000 f882 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2026      	movs	r0, #38	; 0x26
 80008ae:	f000 f87d 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_DATA_REG, data);
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	4619      	mov	r1, r3
 80008b6:	2063      	movs	r0, #99	; 0x63
 80008b8:	f000 f878 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01) );
 80008bc:	2181      	movs	r1, #129	; 0x81
 80008be:	2027      	movs	r0, #39	; 0x27
 80008c0:	f000 f874 	bl	80009ac <mpu_write_reg>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ak8963_read_reg>:

void ak8963_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, (0x80 | AK8963_ADDRESS) );
 80008dc:	218c      	movs	r1, #140	; 0x8c
 80008de:	2025      	movs	r0, #37	; 0x25
 80008e0:	f000 f864 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2026      	movs	r0, #38	; 0x26
 80008ea:	f000 f85f 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2027      	movs	r0, #39	; 0x27
 80008fa:	f000 f857 	bl	80009ac <mpu_write_reg>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f000 fbce 	bl	80010a0 <HAL_Delay>
	mpu_read_reg(EXT_SENS_DATA_00_REG, data, len);
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	461a      	mov	r2, r3
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	2017      	movs	r0, #23
 800090c:	f000 f86c 	bl	80009e8 <mpu_read_reg>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <mpu_init>:
void mpu_init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];
	// GYRO configuration
	mpu_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 800091e:	2108      	movs	r1, #8
 8000920:	201b      	movs	r0, #27
 8000922:	f000 f843 	bl	80009ac <mpu_write_reg>

	// ACCELERO configuration
	mpu_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 8000926:	2108      	movs	r1, #8
 8000928:	201c      	movs	r0, #28
 800092a:	f000 f83f 	bl	80009ac <mpu_write_reg>

	// EXTING from sleep mode
	mpu_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 800092e:	2101      	movs	r1, #1
 8000930:	206b      	movs	r0, #107	; 0x6b
 8000932:	f000 f83b 	bl	80009ac <mpu_write_reg>

	// Enable I2C Master setting 400Khz
	mpu_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 8000936:	2120      	movs	r1, #32
 8000938:	206a      	movs	r0, #106	; 0x6a
 800093a:	f000 f837 	bl	80009ac <mpu_write_reg>
	mpu_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_400);
 800093e:	210d      	movs	r1, #13
 8000940:	2024      	movs	r0, #36	; 0x24
 8000942:	f000 f833 	bl	80009ac <mpu_write_reg>

	remove_gyro_bias();
 8000946:	f000 f90f 	bl	8000b68 <remove_gyro_bias>

	// POWER down Magnetometer
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 800094a:	2100      	movs	r1, #0
 800094c:	200a      	movs	r0, #10
 800094e:	f7ff ff9f 	bl	8000890 <ak8963_write_reg>
	HAL_Delay(10);
 8000952:	200a      	movs	r0, #10
 8000954:	f000 fba4 	bl	80010a0 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 8000958:	210f      	movs	r1, #15
 800095a:	200a      	movs	r0, #10
 800095c:	f7ff ff98 	bl	8000890 <ak8963_write_reg>
	HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fb9d 	bl	80010a0 <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 8000966:	2203      	movs	r2, #3
 8000968:	490f      	ldr	r1, [pc, #60]	; (80009a8 <mpu_init+0x90>)
 800096a:	2010      	movs	r0, #16
 800096c:	f7ff ffae 	bl	80008cc <ak8963_read_reg>

	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 8000970:	2100      	movs	r1, #0
 8000972:	200a      	movs	r0, #10
 8000974:	f7ff ff8c 	bl	8000890 <ak8963_write_reg>
	HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fb91 	bl	80010a0 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 800097e:	2116      	movs	r1, #22
 8000980:	200a      	movs	r0, #10
 8000982:	f7ff ff85 	bl	8000890 <ak8963_write_reg>
	HAL_Delay(10);
 8000986:	200a      	movs	r0, #10
 8000988:	f000 fb8a 	bl	80010a0 <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 800098c:	463b      	mov	r3, r7
 800098e:	2207      	movs	r2, #7
 8000990:	4619      	mov	r1, r3
 8000992:	2003      	movs	r0, #3
 8000994:	f7ff ff9a 	bl	80008cc <ak8963_read_reg>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f000 fb81 	bl	80010a0 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a4 	.word	0x200000a4

080009ac <mpu_write_reg>:

void mpu_write_reg(uint8_t reg, uint8_t data)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
	activate_spi2_mpu();
 80009bc:	f7ff ff50 	bl	8000860 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80009c0:	1df9      	adds	r1, r7, #7
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	2201      	movs	r2, #1
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <mpu_write_reg+0x38>)
 80009c8:	f001 fb17 	bl	8001ffa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data,1, 100);
 80009cc:	1db9      	adds	r1, r7, #6
 80009ce:	2364      	movs	r3, #100	; 0x64
 80009d0:	2201      	movs	r2, #1
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <mpu_write_reg+0x38>)
 80009d4:	f001 fb11 	bl	8001ffa <HAL_SPI_Transmit>
	deactivate_spi2_mpu();
 80009d8:	f7ff ff4e 	bl	8000878 <deactivate_spi2_mpu>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000b0 	.word	0x200000b0

080009e8 <mpu_read_reg>:

void mpu_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80 | reg;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	73fb      	strb	r3, [r7, #15]
	activate_spi2_mpu();
 8000a02:	f7ff ff2d 	bl	8000860 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8000a06:	f107 010f 	add.w	r1, r7, #15
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <mpu_read_reg+0x48>)
 8000a10:	f001 faf3 	bl	8001ffa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, len, 100);
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <mpu_read_reg+0x48>)
 8000a1e:	f001 fc2f 	bl	8002280 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 8000a22:	f7ff ff29 	bl	8000878 <deactivate_spi2_mpu>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000b0 	.word	0x200000b0

08000a34 <mpu_read_sensor>:

void mpu_read_sensor(mpu_data *imu_data)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t data[20];
	activate_spi2_mpu();
 8000a3c:	f7ff ff10 	bl	8000860 <activate_spi2_mpu>
	uint8_t temp_reg = 0x80 | ACCEL_XOUT_H;
 8000a40:	23bb      	movs	r3, #187	; 0xbb
 8000a42:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi2, &temp_reg, 1, 100);
 8000a44:	f107 010b 	add.w	r1, r7, #11
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4842      	ldr	r0, [pc, #264]	; (8000b58 <mpu_read_sensor+0x124>)
 8000a4e:	f001 fad4 	bl	8001ffa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 20, 100);
 8000a52:	f107 010c 	add.w	r1, r7, #12
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2214      	movs	r2, #20
 8000a5a:	483f      	ldr	r0, [pc, #252]	; (8000b58 <mpu_read_sensor+0x124>)
 8000a5c:	f001 fc10 	bl	8002280 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 8000a60:	f7ff ff0a 	bl	8000878 <deactivate_spi2_mpu>

	imu_data->x_accel = ((int16_t)data[0]<<8) + data[1];
 8000a64:	7b3b      	ldrb	r3, [r7, #12]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	801a      	strh	r2, [r3, #0]
	imu_data->y_accel = ((int16_t)data[2]<<8) + data[3];
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	805a      	strh	r2, [r3, #2]
	imu_data->z_accel = ((int16_t)data[4]<<8) + data[5];
 8000a90:	7c3b      	ldrb	r3, [r7, #16]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	7c7b      	ldrb	r3, [r7, #17]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	809a      	strh	r2, [r3, #4]

	imu_data->x_gyro = (((int16_t)data[8]<<8) + data[9])   + x_gyro_bias;
 8000aa6:	7d3b      	ldrb	r3, [r7, #20]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	7d7b      	ldrb	r3, [r7, #21]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <mpu_read_sensor+0x128>)
 8000ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	80da      	strh	r2, [r3, #6]
	imu_data->y_gyro = (((int16_t)data[10]<<8) + data[11]) + y_gyro_bias;
 8000ac8:	7dbb      	ldrb	r3, [r7, #22]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <mpu_read_sensor+0x12c>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	811a      	strh	r2, [r3, #8]
	imu_data->z_gyro = (((int16_t)data[12]<<8) + data[13]) + z_gyro_bias;
 8000aea:	7e3b      	ldrb	r3, [r7, #24]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <mpu_read_sensor+0x130>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	815a      	strh	r2, [r3, #10]

	imu_data->x_mag = ((int16_t)data[15]<<8) + data[14];
 8000b0c:	7efb      	ldrb	r3, [r7, #27]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7ebb      	ldrb	r3, [r7, #26]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	819a      	strh	r2, [r3, #12]
	imu_data->y_mag = ((int16_t)data[17]<<8) + data[16];
 8000b22:	7f7b      	ldrb	r3, [r7, #29]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	7f3b      	ldrb	r3, [r7, #28]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	81da      	strh	r2, [r3, #14]
	imu_data->z_mag = ((int16_t)data[19]<<8) + data[18];
 8000b38:	7ffb      	ldrb	r3, [r7, #31]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	7fbb      	ldrb	r3, [r7, #30]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	821a      	strh	r2, [r3, #16]

	//printf("Accelero : %d, %d, and %d \n", imu_data->x_accel, imu_data->y_accel, imu_data->z_accel);
	//printf("Gyro : %d, %d, and %d \n", imu_data->x_gyro, imu_data->y_gyro, imu_data->z_gyro);
	//printf("Magneto : %d, %d, and %d \n", imu_data->x_mag, imu_data->y_mag, imu_data->z_mag);

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	200000a8 	.word	0x200000a8
 8000b60:	200000aa 	.word	0x200000aa
 8000b64:	200000ac 	.word	0x200000ac

08000b68 <remove_gyro_bias>:

static void remove_gyro_bias(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	int32_t x_bias = 0, y_bias = 0, z_bias = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 1000; i++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	e01d      	b.n	8000bbc <remove_gyro_bias+0x54>
	{
		mpu_read_sensor(&imu_data);
 8000b80:	482e      	ldr	r0, [pc, #184]	; (8000c3c <remove_gyro_bias+0xd4>)
 8000b82:	f7ff ff57 	bl	8000a34 <mpu_read_sensor>
		x_bias += (int32_t)imu_data.x_gyro;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <remove_gyro_bias+0xd4>)
 8000b88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
		y_bias += (int32_t)imu_data.y_gyro;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <remove_gyro_bias+0xd4>)
 8000b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
		z_bias += (int32_t)imu_data.z_gyro;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <remove_gyro_bias+0xd4>)
 8000ba4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
		HAL_Delay(2);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f000 fa75 	bl	80010a0 <HAL_Delay>
	for(int i = 0; i < 1000; i++)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc2:	dbdd      	blt.n	8000b80 <remove_gyro_bias+0x18>
	}
	x_gyro_bias =-(int16_t)(x_bias / 1000);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <remove_gyro_bias+0xd8>)
 8000bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bcc:	1192      	asrs	r2, r2, #6
 8000bce:	17db      	asrs	r3, r3, #31
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <remove_gyro_bias+0xdc>)
 8000bdc:	801a      	strh	r2, [r3, #0]
	y_gyro_bias =-(int16_t)(y_bias / 1000);
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <remove_gyro_bias+0xd8>)
 8000be2:	fb82 1203 	smull	r1, r2, r2, r3
 8000be6:	1192      	asrs	r2, r2, #6
 8000be8:	17db      	asrs	r3, r3, #31
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	425b      	negs	r3, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <remove_gyro_bias+0xe0>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	z_gyro_bias =-(int16_t)(z_bias / 1000);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <remove_gyro_bias+0xd8>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	1192      	asrs	r2, r2, #6
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	425b      	negs	r3, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <remove_gyro_bias+0xe4>)
 8000c10:	801a      	strh	r2, [r3, #0]
	printf("x,y,z %d, %d, %d \n", x_gyro_bias, y_gyro_bias, z_gyro_bias);
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <remove_gyro_bias+0xdc>)
 8000c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <remove_gyro_bias+0xe0>)
 8000c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <remove_gyro_bias+0xe4>)
 8000c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <remove_gyro_bias+0xe8>)
 8000c2a:	f001 fff5 	bl	8002c18 <iprintf>
	HAL_Delay(100);
 8000c2e:	2064      	movs	r0, #100	; 0x64
 8000c30:	f000 fa36 	bl	80010a0 <HAL_Delay>
	//mpu_write_reg(XG_OFFSET_L, (uint8_t)(x_gyro_bias));
	//mpu_write_reg(YG_OFFSET_H, (uint8_t)(y_gyro_bias >> 8));
	//mpu_write_reg(YG_OFFSET_L, (uint8_t)(y_gyro_bias));
	//mpu_write_reg(ZG_OFFSET_H, (uint8_t)(z_gyro_bias >> 8));
	//mpu_write_reg(ZG_OFFSET_L, (uint8_t)(z_gyro_bias));
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000090 	.word	0x20000090
 8000c40:	10624dd3 	.word	0x10624dd3
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	200000aa 	.word	0x200000aa
 8000c4c:	200000ac 	.word	0x200000ac
 8000c50:	0800396c 	.word	0x0800396c

08000c54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MX_SPI2_Init+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c88:	2228      	movs	r2, #40	; 0x28
 8000c8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_SPI2_Init+0x64>)
 8000ca6:	f001 f91f 	bl	8001ee8 <HAL_SPI_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cb0:	f7ff fdd0 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000b0 	.word	0x200000b0
 8000cbc:	40003800 	.word	0x40003800

08000cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <HAL_SPI_MspInit+0xc0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d14a      	bne.n	8000d78 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d36:	230c      	movs	r3, #12
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d52:	f000 faaf 	bl	80012b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <HAL_SPI_MspInit+0xcc>)
 8000d74:	f000 fa9e 	bl	80012b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40003800 	.word	0x40003800
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dce:	2007      	movs	r0, #7
 8000dd0:	f000 fa3c 	bl	800124c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f918 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
  }

  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:

int _isatty(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f001 ff2a 	bl	8002d60 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000108 	.word	0x20000108
 8000f40:	20000260 	.word	0x20000260

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f001 fee9 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fb6d 	bl	8000678 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fac:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000fb0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fb4:	2000025c 	.word	0x2000025c

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f931 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fece 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f93b 	bl	800129a <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f911 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	2000010c 	.word	0x2000010c

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2000010c 	.word	0x2000010c

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff8e 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff47 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff5c 	bl	8001130 <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff8e 	bl	80011a0 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5d 	bl	800114c <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffb0 	bl	8001208 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e16b      	b.n	80015a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	f040 815a 	bne.w	80015a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d005      	beq.n	8001306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	2b02      	cmp	r3, #2
 8001304:	d130      	bne.n	8001368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b03      	cmp	r3, #3
 8001372:	d017      	beq.n	80013a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d123      	bne.n	80013f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80b4 	beq.w	80015a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b60      	ldr	r3, [pc, #384]	; (80015c0 <HAL_GPIO_Init+0x30c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <HAL_GPIO_Init+0x30c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_GPIO_Init+0x30c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001456:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <HAL_GPIO_Init+0x310>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_GPIO_Init+0x314>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d02b      	beq.n	80014da <HAL_GPIO_Init+0x226>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_GPIO_Init+0x318>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x222>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a50      	ldr	r2, [pc, #320]	; (80015d0 <HAL_GPIO_Init+0x31c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x21e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4f      	ldr	r2, [pc, #316]	; (80015d4 <HAL_GPIO_Init+0x320>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x21a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4e      	ldr	r2, [pc, #312]	; (80015d8 <HAL_GPIO_Init+0x324>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x216>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4d      	ldr	r2, [pc, #308]	; (80015dc <HAL_GPIO_Init+0x328>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x212>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_GPIO_Init+0x32c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x20e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_GPIO_Init+0x330>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x20a>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00e      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014be:	2308      	movs	r3, #8
 80014c0:	e00c      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014c2:	2306      	movs	r3, #6
 80014c4:	e00a      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x228>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4935      	ldr	r1, [pc, #212]	; (80015c4 <HAL_GPIO_Init+0x310>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_GPIO_Init+0x334>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_GPIO_Init+0x334>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_GPIO_Init+0x334>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_GPIO_Init+0x334>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_GPIO_Init+0x334>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x334>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_GPIO_Init+0x334>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_GPIO_Init+0x334>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f ae90 	bls.w	80012d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40021400 	.word	0x40021400
 80015e0:	40021800 	.word	0x40021800
 80015e4:	40021c00 	.word	0x40021c00
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e267      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b04      	cmp	r3, #4
 8001648:	d00c      	beq.n	8001664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b85      	ldr	r3, [pc, #532]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	2b08      	cmp	r3, #8
 8001654:	d112      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d10b      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d05b      	beq.n	8001728 <HAL_RCC_OscConfig+0x108>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d157      	bne.n	8001728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e242      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x74>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6f      	ldr	r2, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6c      	ldr	r2, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fcd6 	bl	8001088 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fcd2 	bl	8001088 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e207      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fcc2 	bl	8001088 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcbe 	bl	8001088 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1f3      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0xe8>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1c7      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff fc77 	bl	8001088 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fc73 	bl	8001088 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1a8      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4925      	ldr	r1, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x244>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc56 	bl	8001088 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc52 	bl	8001088 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e187      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d036      	beq.n	8001878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fc36 	bl	8001088 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fc32 	bl	8001088 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e167      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x240>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x200>
 800183e:	e01b      	b.n	8001878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_OscConfig+0x248>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fc1f 	bl	8001088 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00e      	b.n	800186c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fc1b 	bl	8001088 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d907      	bls.n	800186c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e150      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800186e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ea      	bne.n	800184e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8097 	beq.w	80019b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a7c      	ldr	r2, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b77      	ldr	r3, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a73      	ldr	r2, [pc, #460]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fbdb 	bl	8001088 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff fbd7 	bl	8001088 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e10c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x474>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x2ea>
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x30c>
 8001912:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x324>
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fb9c 	bl	8001088 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff fb98 	bl	8001088 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0cb      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ee      	beq.n	8001954 <HAL_RCC_OscConfig+0x334>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fb86 	bl	8001088 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff fb82 	bl	8001088 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0b5      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ee      	bne.n	8001980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80a1 	beq.w	8001b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d05c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d141      	bne.n	8001a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb56 	bl	8001088 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fb52 	bl	8001088 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e087      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb2b 	bl	8001088 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fb27 	bl	8001088 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x416>
 8001a54:	e054      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb14 	bl	8001088 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fb10 	bl	8001088 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e045      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x470>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
 8001a82:	e03d      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e038      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4ec>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d028      	beq.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d121      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0cc      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d90c      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	494d      	ldr	r1, [pc, #308]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d044      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e06f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e067      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4934      	ldr	r1, [pc, #208]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c00:	f7ff fa42 	bl	8001088 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff fa3e 	bl	8001088 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e04f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d20c      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e032      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4916      	ldr	r1, [pc, #88]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	490e      	ldr	r1, [pc, #56]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c96:	f000 f821 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	5ccb      	ldrb	r3, [r1, r3]
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f9a2 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08003980 	.word	0x08003980
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce0:	b094      	sub	sp, #80	; 0x50
 8001ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce8:	2300      	movs	r3, #0
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cec:	2300      	movs	r3, #0
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d00d      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x40>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	f200 80e1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0e:	e0db      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d14:	e0db      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1a:	e0d8      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d4e:	4622      	mov	r2, r4
 8001d50:	462b      	mov	r3, r5
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4621      	mov	r1, r4
 8001d68:	1a51      	subs	r1, r2, r1
 8001d6a:	6139      	str	r1, [r7, #16]
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d80:	4659      	mov	r1, fp
 8001d82:	018b      	lsls	r3, r1, #6
 8001d84:	4651      	mov	r1, sl
 8001d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	018a      	lsls	r2, r1, #6
 8001d8e:	4651      	mov	r1, sl
 8001d90:	ebb2 0801 	subs.w	r8, r2, r1
 8001d94:	4659      	mov	r1, fp
 8001d96:	eb63 0901 	sbc.w	r9, r3, r1
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dae:	4690      	mov	r8, r2
 8001db0:	4699      	mov	r9, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	eb18 0303 	adds.w	r3, r8, r3
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	462b      	mov	r3, r5
 8001dbc:	eb49 0303 	adc.w	r3, r9, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	024b      	lsls	r3, r1, #9
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dd8:	4621      	mov	r1, r4
 8001dda:	024a      	lsls	r2, r1, #9
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	2200      	movs	r2, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dec:	f7fe fa40 	bl	8000270 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df8:	e058      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	2200      	movs	r2, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	4611      	mov	r1, r2
 8001e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e14:	4642      	mov	r2, r8
 8001e16:	464b      	mov	r3, r9
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	0159      	lsls	r1, r3, #5
 8001e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e26:	0150      	lsls	r0, r2, #5
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e50:	eb63 050b 	sbc.w	r5, r3, fp
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	00eb      	lsls	r3, r5, #3
 8001e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e62:	00e2      	lsls	r2, r4, #3
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	4643      	mov	r3, r8
 8001e6a:	18e3      	adds	r3, r4, r3
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	464b      	mov	r3, r9
 8001e70:	eb45 0303 	adc.w	r3, r5, r3
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4629      	mov	r1, r5
 8001e84:	028b      	lsls	r3, r1, #10
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	028a      	lsls	r2, r1, #10
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	2200      	movs	r2, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	61fa      	str	r2, [r7, #28]
 8001e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea0:	f7fe f9e6 	bl	8000270 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0x200>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3750      	adds	r7, #80	; 0x50
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07b      	b.n	8001ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f0a:	d009      	beq.n	8001f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
 8001f12:	e005      	b.n	8001f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fec0 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0104 	and.w	r1, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f003 0210 	and.w	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_SPI_Transmit+0x22>
 8002018:	2302      	movs	r3, #2
 800201a:	e12d      	b.n	8002278 <HAL_SPI_Transmit+0x27e>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002024:	f7ff f830 	bl	8001088 <HAL_GetTick>
 8002028:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800203e:	e116      	b.n	800226e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_SPI_Transmit+0x52>
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002050:	e10d      	b.n	800226e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002098:	d10f      	bne.n	80020ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d007      	beq.n	80020d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e0:	d14f      	bne.n	8002182 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Transmit+0xf6>
 80020ea:	8afb      	ldrh	r3, [r7, #22]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d142      	bne.n	8002176 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002114:	e02f      	b.n	8002176 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d112      	bne.n	800214a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	86da      	strh	r2, [r3, #54]	; 0x36
 8002148:	e015      	b.n	8002176 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800214a:	f7fe ff9d 	bl	8001088 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d803      	bhi.n	8002162 <HAL_SPI_Transmit+0x168>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d102      	bne.n	8002168 <HAL_SPI_Transmit+0x16e>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002174:	e07b      	b.n	800226e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ca      	bne.n	8002116 <HAL_SPI_Transmit+0x11c>
 8002180:	e050      	b.n	8002224 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_SPI_Transmit+0x196>
 800218a:	8afb      	ldrh	r3, [r7, #22]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d144      	bne.n	800221a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021b6:	e030      	b.n	800221a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d113      	bne.n	80021ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ec:	e015      	b.n	800221a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ee:	f7fe ff4b 	bl	8001088 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d803      	bhi.n	8002206 <HAL_SPI_Transmit+0x20c>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x212>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002218:	e029      	b.n	800226e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1c9      	bne.n	80021b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbdf 	bl	80029ec <SPI_EndRxTxTransaction>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
 8002264:	e003      	b.n	800226e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002276:	7ffb      	ldrb	r3, [r7, #31]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
 80022a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022a4:	e0fb      	b.n	800249e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ae:	d112      	bne.n	80022d6 <HAL_SPI_Receive+0x56>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10e      	bne.n	80022d6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2204      	movs	r2, #4
 80022bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f8ef 	bl	80024b0 <HAL_SPI_TransmitReceive>
 80022d2:	4603      	mov	r3, r0
 80022d4:	e0e8      	b.n	80024a8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_SPI_Receive+0x64>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0e1      	b.n	80024a8 <HAL_SPI_Receive+0x228>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ec:	f7fe fecc 	bl	8001088 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_Receive+0x7e>
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002302:	e0cc      	b.n	800249e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2204      	movs	r2, #4
 8002308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234a:	d10f      	bne.n	800236c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800236a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d007      	beq.n	800238a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d16a      	bne.n	8002468 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002392:	e032      	b.n	80023fa <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d115      	bne.n	80023ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f103 020c 	add.w	r2, r3, #12
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023cc:	e015      	b.n	80023fa <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ce:	f7fe fe5b 	bl	8001088 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d803      	bhi.n	80023e6 <HAL_SPI_Receive+0x166>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Receive+0x16c>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023f8:	e051      	b.n	800249e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1c7      	bne.n	8002394 <HAL_SPI_Receive+0x114>
 8002404:	e035      	b.n	8002472 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d113      	bne.n	800243c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	b292      	uxth	r2, r2
 8002420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	1c9a      	adds	r2, r3, #2
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243a:	e015      	b.n	8002468 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243c:	f7fe fe24 	bl	8001088 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d803      	bhi.n	8002454 <HAL_SPI_Receive+0x1d4>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d102      	bne.n	800245a <HAL_SPI_Receive+0x1da>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002466:	e01a      	b.n	800249e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1c9      	bne.n	8002406 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fa52 	bl	8002920 <SPI_EndRxTransaction>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
 8002494:	e003      	b.n	800249e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024be:	2301      	movs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x26>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e198      	b.n	8002808 <HAL_SPI_TransmitReceive+0x358>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024de:	f7fe fdd3 	bl	8001088 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d00f      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x70>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002506:	d107      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x68>
 8002510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002514:	2b04      	cmp	r3, #4
 8002516:	d003      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800251e:	e16d      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x82>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x82>
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002538:	e160      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b04      	cmp	r3, #4
 8002544:	d003      	beq.n	800254e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2205      	movs	r2, #5
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025aa:	d17c      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_TransmitReceive+0x10a>
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d16a      	bne.n	8002690 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025de:	e057      	b.n	8002690 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d11b      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x176>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d016      	beq.n	8002626 <HAL_SPI_TransmitReceive+0x176>
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d113      	bne.n	8002626 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d119      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x1b8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	b292      	uxth	r2, r2
 800264a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002668:	f7fe fd0e 	bl	8001088 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002674:	429a      	cmp	r2, r3
 8002676:	d80b      	bhi.n	8002690 <HAL_SPI_TransmitReceive+0x1e0>
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d007      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800268e:	e0b5      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1a2      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x130>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d19d      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x130>
 80026a4:	e080      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x204>
 80026ae:	8b7b      	ldrh	r3, [r7, #26]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d16f      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026da:	e05b      	b.n	8002794 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d11c      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x274>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x274>
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d114      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d119      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x2b6>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d014      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002766:	f7fe fc8f 	bl	8001088 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002772:	429a      	cmp	r2, r3
 8002774:	d803      	bhi.n	800277e <HAL_SPI_TransmitReceive+0x2ce>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d102      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x2d4>
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002792:	e033      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d19e      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x22c>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d199      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f91d 	bl	80029ec <SPI_EndRxTxTransaction>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027c4:	e01a      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027f2:	e003      	b.n	80027fc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002808:	4618      	mov	r0, r3
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002820:	f7fe fc32 	bl	8001088 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002830:	f7fe fc2a 	bl	8001088 <HAL_GetTick>
 8002834:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	015b      	lsls	r3, r3, #5
 800283c:	0d1b      	lsrs	r3, r3, #20
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002846:	e054      	b.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d050      	beq.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002850:	f7fe fc1a 	bl	8001088 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	429a      	cmp	r2, r3
 800285e:	d902      	bls.n	8002866 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d13d      	bne.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d111      	bne.n	80028a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002888:	d004      	beq.n	8002894 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d107      	bne.n	80028a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ac:	d10f      	bne.n	80028ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e017      	b.n	8002912 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	429a      	cmp	r2, r3
 800290e:	d19b      	bne.n	8002848 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002934:	d111      	bne.n	800295a <SPI_EndRxTransaction+0x3a>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293e:	d004      	beq.n	800294a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002948:	d107      	bne.n	800295a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002962:	d12a      	bne.n	80029ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d012      	beq.n	8002994 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ff49 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02d      	beq.n	80029e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e026      	b.n	80029e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	2101      	movs	r1, #1
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ff36 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01a      	beq.n	80029e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e013      	b.n	80029e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2101      	movs	r1, #1
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff23 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e000      	b.n	80029e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2201      	movs	r2, #1
 8002a00:	2102      	movs	r1, #2
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff04 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e032      	b.n	8002a84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <SPI_EndRxTxTransaction+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <SPI_EndRxTxTransaction+0xa4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	0d5b      	lsrs	r3, r3, #21
 8002a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3c:	d112      	bne.n	8002a64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff fee1 	bl	8002810 <SPI_WaitFlagStateUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d016      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e00f      	b.n	8002a84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d0f2      	beq.n	8002a64 <SPI_EndRxTxTransaction+0x78>
 8002a7e:	e000      	b.n	8002a82 <SPI_EndRxTxTransaction+0x96>
        break;
 8002a80:	bf00      	nop
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	165e9f81 	.word	0x165e9f81

08002a94 <std>:
 8002a94:	2300      	movs	r3, #0
 8002a96:	b510      	push	{r4, lr}
 8002a98:	4604      	mov	r4, r0
 8002a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8002a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aa2:	6083      	str	r3, [r0, #8]
 8002aa4:	8181      	strh	r1, [r0, #12]
 8002aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8002aa8:	81c2      	strh	r2, [r0, #14]
 8002aaa:	6183      	str	r3, [r0, #24]
 8002aac:	4619      	mov	r1, r3
 8002aae:	2208      	movs	r2, #8
 8002ab0:	305c      	adds	r0, #92	; 0x5c
 8002ab2:	f000 f906 	bl	8002cc2 <memset>
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <std+0x58>)
 8002ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <std+0x5c>)
 8002abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <std+0x60>)
 8002ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <std+0x64>)
 8002ac4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <std+0x68>)
 8002ac8:	6224      	str	r4, [r4, #32]
 8002aca:	429c      	cmp	r4, r3
 8002acc:	d006      	beq.n	8002adc <std+0x48>
 8002ace:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002ad2:	4294      	cmp	r4, r2
 8002ad4:	d002      	beq.n	8002adc <std+0x48>
 8002ad6:	33d0      	adds	r3, #208	; 0xd0
 8002ad8:	429c      	cmp	r4, r3
 8002ada:	d105      	bne.n	8002ae8 <std+0x54>
 8002adc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae4:	f000 b966 	b.w	8002db4 <__retarget_lock_init_recursive>
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	bf00      	nop
 8002aec:	08002c3d 	.word	0x08002c3d
 8002af0:	08002c5f 	.word	0x08002c5f
 8002af4:	08002c97 	.word	0x08002c97
 8002af8:	08002cbb 	.word	0x08002cbb
 8002afc:	20000110 	.word	0x20000110

08002b00 <stdio_exit_handler>:
 8002b00:	4a02      	ldr	r2, [pc, #8]	; (8002b0c <stdio_exit_handler+0xc>)
 8002b02:	4903      	ldr	r1, [pc, #12]	; (8002b10 <stdio_exit_handler+0x10>)
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <stdio_exit_handler+0x14>)
 8002b06:	f000 b869 	b.w	8002bdc <_fwalk_sglue>
 8002b0a:	bf00      	nop
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	08003661 	.word	0x08003661
 8002b14:	20000018 	.word	0x20000018

08002b18 <cleanup_stdio>:
 8002b18:	6841      	ldr	r1, [r0, #4]
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <cleanup_stdio+0x34>)
 8002b1c:	4299      	cmp	r1, r3
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	d001      	beq.n	8002b28 <cleanup_stdio+0x10>
 8002b24:	f000 fd9c 	bl	8003660 <_fflush_r>
 8002b28:	68a1      	ldr	r1, [r4, #8]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <cleanup_stdio+0x38>)
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	d002      	beq.n	8002b36 <cleanup_stdio+0x1e>
 8002b30:	4620      	mov	r0, r4
 8002b32:	f000 fd95 	bl	8003660 <_fflush_r>
 8002b36:	68e1      	ldr	r1, [r4, #12]
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <cleanup_stdio+0x3c>)
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d004      	beq.n	8002b48 <cleanup_stdio+0x30>
 8002b3e:	4620      	mov	r0, r4
 8002b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b44:	f000 bd8c 	b.w	8003660 <_fflush_r>
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000110 	.word	0x20000110
 8002b50:	20000178 	.word	0x20000178
 8002b54:	200001e0 	.word	0x200001e0

08002b58 <global_stdio_init.part.0>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <global_stdio_init.part.0+0x30>)
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <global_stdio_init.part.0+0x34>)
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <global_stdio_init.part.0+0x38>)
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	4620      	mov	r0, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	2104      	movs	r1, #4
 8002b68:	f7ff ff94 	bl	8002a94 <std>
 8002b6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b70:	2201      	movs	r2, #1
 8002b72:	2109      	movs	r1, #9
 8002b74:	f7ff ff8e 	bl	8002a94 <std>
 8002b78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b82:	2112      	movs	r1, #18
 8002b84:	f7ff bf86 	b.w	8002a94 <std>
 8002b88:	20000248 	.word	0x20000248
 8002b8c:	20000110 	.word	0x20000110
 8002b90:	08002b01 	.word	0x08002b01

08002b94 <__sfp_lock_acquire>:
 8002b94:	4801      	ldr	r0, [pc, #4]	; (8002b9c <__sfp_lock_acquire+0x8>)
 8002b96:	f000 b90e 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 8002b9a:	bf00      	nop
 8002b9c:	20000251 	.word	0x20000251

08002ba0 <__sfp_lock_release>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__sfp_lock_release+0x8>)
 8002ba2:	f000 b909 	b.w	8002db8 <__retarget_lock_release_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	20000251 	.word	0x20000251

08002bac <__sinit>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4604      	mov	r4, r0
 8002bb0:	f7ff fff0 	bl	8002b94 <__sfp_lock_acquire>
 8002bb4:	6a23      	ldr	r3, [r4, #32]
 8002bb6:	b11b      	cbz	r3, 8002bc0 <__sinit+0x14>
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f7ff bff0 	b.w	8002ba0 <__sfp_lock_release>
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__sinit+0x28>)
 8002bc2:	6223      	str	r3, [r4, #32]
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__sinit+0x2c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f5      	bne.n	8002bb8 <__sinit+0xc>
 8002bcc:	f7ff ffc4 	bl	8002b58 <global_stdio_init.part.0>
 8002bd0:	e7f2      	b.n	8002bb8 <__sinit+0xc>
 8002bd2:	bf00      	nop
 8002bd4:	08002b19 	.word	0x08002b19
 8002bd8:	20000248 	.word	0x20000248

08002bdc <_fwalk_sglue>:
 8002bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be0:	4607      	mov	r7, r0
 8002be2:	4688      	mov	r8, r1
 8002be4:	4614      	mov	r4, r2
 8002be6:	2600      	movs	r6, #0
 8002be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bec:	f1b9 0901 	subs.w	r9, r9, #1
 8002bf0:	d505      	bpl.n	8002bfe <_fwalk_sglue+0x22>
 8002bf2:	6824      	ldr	r4, [r4, #0]
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	d1f7      	bne.n	8002be8 <_fwalk_sglue+0xc>
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bfe:	89ab      	ldrh	r3, [r5, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d907      	bls.n	8002c14 <_fwalk_sglue+0x38>
 8002c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <_fwalk_sglue+0x38>
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	4638      	mov	r0, r7
 8002c10:	47c0      	blx	r8
 8002c12:	4306      	orrs	r6, r0
 8002c14:	3568      	adds	r5, #104	; 0x68
 8002c16:	e7e9      	b.n	8002bec <_fwalk_sglue+0x10>

08002c18 <iprintf>:
 8002c18:	b40f      	push	{r0, r1, r2, r3}
 8002c1a:	b507      	push	{r0, r1, r2, lr}
 8002c1c:	4906      	ldr	r1, [pc, #24]	; (8002c38 <iprintf+0x20>)
 8002c1e:	ab04      	add	r3, sp, #16
 8002c20:	6808      	ldr	r0, [r1, #0]
 8002c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c26:	6881      	ldr	r1, [r0, #8]
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f000 f9e9 	bl	8003000 <_vfiprintf_r>
 8002c2e:	b003      	add	sp, #12
 8002c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c34:	b004      	add	sp, #16
 8002c36:	4770      	bx	lr
 8002c38:	20000064 	.word	0x20000064

08002c3c <__sread>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	460c      	mov	r4, r1
 8002c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c44:	f000 f868 	bl	8002d18 <_read_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	bfab      	itete	ge
 8002c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c50:	181b      	addge	r3, r3, r0
 8002c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c56:	bfac      	ite	ge
 8002c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c5a:	81a3      	strhlt	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__swrite>:
 8002c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c62:	461f      	mov	r7, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	4605      	mov	r5, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	d505      	bpl.n	8002c7c <__swrite+0x1e>
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	2302      	movs	r3, #2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f83c 	bl	8002cf4 <_lseek_r>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	4632      	mov	r2, r6
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c92:	f000 b853 	b.w	8002d3c <_write_r>

08002c96 <__sseek>:
 8002c96:	b510      	push	{r4, lr}
 8002c98:	460c      	mov	r4, r1
 8002c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9e:	f000 f829 	bl	8002cf4 <_lseek_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	bf15      	itete	ne
 8002ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cb2:	81a3      	strheq	r3, [r4, #12]
 8002cb4:	bf18      	it	ne
 8002cb6:	81a3      	strhne	r3, [r4, #12]
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <__sclose>:
 8002cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbe:	f000 b809 	b.w	8002cd4 <_close_r>

08002cc2 <memset>:
 8002cc2:	4402      	add	r2, r0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d100      	bne.n	8002ccc <memset+0xa>
 8002cca:	4770      	bx	lr
 8002ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd0:	e7f9      	b.n	8002cc6 <memset+0x4>
	...

08002cd4 <_close_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4d06      	ldr	r5, [pc, #24]	; (8002cf0 <_close_r+0x1c>)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	f7fe f8c5 	bl	8000e6e <_close>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_close_r+0x1a>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_close_r+0x1a>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	2000024c 	.word	0x2000024c

08002cf4 <_lseek_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4d07      	ldr	r5, [pc, #28]	; (8002d14 <_lseek_r+0x20>)
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fe f8da 	bl	8000ebc <_lseek>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_lseek_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_lseek_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	2000024c 	.word	0x2000024c

08002d18 <_read_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4d07      	ldr	r5, [pc, #28]	; (8002d38 <_read_r+0x20>)
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	602a      	str	r2, [r5, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7fe f884 	bl	8000e34 <_read>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_read_r+0x1e>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_read_r+0x1e>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	2000024c 	.word	0x2000024c

08002d3c <_write_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4d07      	ldr	r5, [pc, #28]	; (8002d5c <_write_r+0x20>)
 8002d40:	4604      	mov	r4, r0
 8002d42:	4608      	mov	r0, r1
 8002d44:	4611      	mov	r1, r2
 8002d46:	2200      	movs	r2, #0
 8002d48:	602a      	str	r2, [r5, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f7fd fd66 	bl	800081c <_write>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	d102      	bne.n	8002d5a <_write_r+0x1e>
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	b103      	cbz	r3, 8002d5a <_write_r+0x1e>
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	2000024c 	.word	0x2000024c

08002d60 <__errno>:
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <__errno+0x8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000064 	.word	0x20000064

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	4d0d      	ldr	r5, [pc, #52]	; (8002da4 <__libc_init_array+0x38>)
 8002d70:	4c0d      	ldr	r4, [pc, #52]	; (8002da8 <__libc_init_array+0x3c>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	2600      	movs	r6, #0
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	4d0b      	ldr	r5, [pc, #44]	; (8002dac <__libc_init_array+0x40>)
 8002d7e:	4c0c      	ldr	r4, [pc, #48]	; (8002db0 <__libc_init_array+0x44>)
 8002d80:	f000 fdc0 	bl	8003904 <_init>
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	2600      	movs	r6, #0
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	080039cc 	.word	0x080039cc
 8002da8:	080039cc 	.word	0x080039cc
 8002dac:	080039cc 	.word	0x080039cc
 8002db0:	080039d0 	.word	0x080039d0

08002db4 <__retarget_lock_init_recursive>:
 8002db4:	4770      	bx	lr

08002db6 <__retarget_lock_acquire_recursive>:
 8002db6:	4770      	bx	lr

08002db8 <__retarget_lock_release_recursive>:
 8002db8:	4770      	bx	lr
	...

08002dbc <_free_r>:
 8002dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dbe:	2900      	cmp	r1, #0
 8002dc0:	d044      	beq.n	8002e4c <_free_r+0x90>
 8002dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc6:	9001      	str	r0, [sp, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f1a1 0404 	sub.w	r4, r1, #4
 8002dce:	bfb8      	it	lt
 8002dd0:	18e4      	addlt	r4, r4, r3
 8002dd2:	f000 f8df 	bl	8002f94 <__malloc_lock>
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <_free_r+0x94>)
 8002dd8:	9801      	ldr	r0, [sp, #4]
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	b933      	cbnz	r3, 8002dec <_free_r+0x30>
 8002dde:	6063      	str	r3, [r4, #4]
 8002de0:	6014      	str	r4, [r2, #0]
 8002de2:	b003      	add	sp, #12
 8002de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002de8:	f000 b8da 	b.w	8002fa0 <__malloc_unlock>
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d908      	bls.n	8002e02 <_free_r+0x46>
 8002df0:	6825      	ldr	r5, [r4, #0]
 8002df2:	1961      	adds	r1, r4, r5
 8002df4:	428b      	cmp	r3, r1
 8002df6:	bf01      	itttt	eq
 8002df8:	6819      	ldreq	r1, [r3, #0]
 8002dfa:	685b      	ldreq	r3, [r3, #4]
 8002dfc:	1949      	addeq	r1, r1, r5
 8002dfe:	6021      	streq	r1, [r4, #0]
 8002e00:	e7ed      	b.n	8002dde <_free_r+0x22>
 8002e02:	461a      	mov	r2, r3
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	b10b      	cbz	r3, 8002e0c <_free_r+0x50>
 8002e08:	42a3      	cmp	r3, r4
 8002e0a:	d9fa      	bls.n	8002e02 <_free_r+0x46>
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	1855      	adds	r5, r2, r1
 8002e10:	42a5      	cmp	r5, r4
 8002e12:	d10b      	bne.n	8002e2c <_free_r+0x70>
 8002e14:	6824      	ldr	r4, [r4, #0]
 8002e16:	4421      	add	r1, r4
 8002e18:	1854      	adds	r4, r2, r1
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	6011      	str	r1, [r2, #0]
 8002e1e:	d1e0      	bne.n	8002de2 <_free_r+0x26>
 8002e20:	681c      	ldr	r4, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	6053      	str	r3, [r2, #4]
 8002e26:	440c      	add	r4, r1
 8002e28:	6014      	str	r4, [r2, #0]
 8002e2a:	e7da      	b.n	8002de2 <_free_r+0x26>
 8002e2c:	d902      	bls.n	8002e34 <_free_r+0x78>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	6003      	str	r3, [r0, #0]
 8002e32:	e7d6      	b.n	8002de2 <_free_r+0x26>
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	1961      	adds	r1, r4, r5
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	bf04      	itt	eq
 8002e3c:	6819      	ldreq	r1, [r3, #0]
 8002e3e:	685b      	ldreq	r3, [r3, #4]
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	bf04      	itt	eq
 8002e44:	1949      	addeq	r1, r1, r5
 8002e46:	6021      	streq	r1, [r4, #0]
 8002e48:	6054      	str	r4, [r2, #4]
 8002e4a:	e7ca      	b.n	8002de2 <_free_r+0x26>
 8002e4c:	b003      	add	sp, #12
 8002e4e:	bd30      	pop	{r4, r5, pc}
 8002e50:	20000254 	.word	0x20000254

08002e54 <sbrk_aligned>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4e0e      	ldr	r6, [pc, #56]	; (8002e90 <sbrk_aligned+0x3c>)
 8002e58:	460c      	mov	r4, r1
 8002e5a:	6831      	ldr	r1, [r6, #0]
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b911      	cbnz	r1, 8002e66 <sbrk_aligned+0x12>
 8002e60:	f000 fcbc 	bl	80037dc <_sbrk_r>
 8002e64:	6030      	str	r0, [r6, #0]
 8002e66:	4621      	mov	r1, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 fcb7 	bl	80037dc <_sbrk_r>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d00a      	beq.n	8002e88 <sbrk_aligned+0x34>
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d007      	beq.n	8002e8c <sbrk_aligned+0x38>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 fcac 	bl	80037dc <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d101      	bne.n	8002e8c <sbrk_aligned+0x38>
 8002e88:	f04f 34ff 	mov.w	r4, #4294967295
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	20000258 	.word	0x20000258

08002e94 <_malloc_r>:
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e98:	1ccd      	adds	r5, r1, #3
 8002e9a:	f025 0503 	bic.w	r5, r5, #3
 8002e9e:	3508      	adds	r5, #8
 8002ea0:	2d0c      	cmp	r5, #12
 8002ea2:	bf38      	it	cc
 8002ea4:	250c      	movcc	r5, #12
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	db01      	blt.n	8002eb0 <_malloc_r+0x1c>
 8002eac:	42a9      	cmp	r1, r5
 8002eae:	d905      	bls.n	8002ebc <_malloc_r+0x28>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f90 <_malloc_r+0xfc>
 8002ec0:	f000 f868 	bl	8002f94 <__malloc_lock>
 8002ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec8:	461c      	mov	r4, r3
 8002eca:	bb5c      	cbnz	r4, 8002f24 <_malloc_r+0x90>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7ff ffc0 	bl	8002e54 <sbrk_aligned>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	d155      	bne.n	8002f86 <_malloc_r+0xf2>
 8002eda:	f8d8 4000 	ldr.w	r4, [r8]
 8002ede:	4626      	mov	r6, r4
 8002ee0:	2e00      	cmp	r6, #0
 8002ee2:	d145      	bne.n	8002f70 <_malloc_r+0xdc>
 8002ee4:	2c00      	cmp	r4, #0
 8002ee6:	d048      	beq.n	8002f7a <_malloc_r+0xe6>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	4631      	mov	r1, r6
 8002eec:	4638      	mov	r0, r7
 8002eee:	eb04 0903 	add.w	r9, r4, r3
 8002ef2:	f000 fc73 	bl	80037dc <_sbrk_r>
 8002ef6:	4581      	cmp	r9, r0
 8002ef8:	d13f      	bne.n	8002f7a <_malloc_r+0xe6>
 8002efa:	6821      	ldr	r1, [r4, #0]
 8002efc:	1a6d      	subs	r5, r5, r1
 8002efe:	4629      	mov	r1, r5
 8002f00:	4638      	mov	r0, r7
 8002f02:	f7ff ffa7 	bl	8002e54 <sbrk_aligned>
 8002f06:	3001      	adds	r0, #1
 8002f08:	d037      	beq.n	8002f7a <_malloc_r+0xe6>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	442b      	add	r3, r5
 8002f0e:	6023      	str	r3, [r4, #0]
 8002f10:	f8d8 3000 	ldr.w	r3, [r8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d038      	beq.n	8002f8a <_malloc_r+0xf6>
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	42a2      	cmp	r2, r4
 8002f1c:	d12b      	bne.n	8002f76 <_malloc_r+0xe2>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e00f      	b.n	8002f44 <_malloc_r+0xb0>
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	1b52      	subs	r2, r2, r5
 8002f28:	d41f      	bmi.n	8002f6a <_malloc_r+0xd6>
 8002f2a:	2a0b      	cmp	r2, #11
 8002f2c:	d917      	bls.n	8002f5e <_malloc_r+0xca>
 8002f2e:	1961      	adds	r1, r4, r5
 8002f30:	42a3      	cmp	r3, r4
 8002f32:	6025      	str	r5, [r4, #0]
 8002f34:	bf18      	it	ne
 8002f36:	6059      	strne	r1, [r3, #4]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	bf08      	it	eq
 8002f3c:	f8c8 1000 	streq.w	r1, [r8]
 8002f40:	5162      	str	r2, [r4, r5]
 8002f42:	604b      	str	r3, [r1, #4]
 8002f44:	4638      	mov	r0, r7
 8002f46:	f104 060b 	add.w	r6, r4, #11
 8002f4a:	f000 f829 	bl	8002fa0 <__malloc_unlock>
 8002f4e:	f026 0607 	bic.w	r6, r6, #7
 8002f52:	1d23      	adds	r3, r4, #4
 8002f54:	1af2      	subs	r2, r6, r3
 8002f56:	d0ae      	beq.n	8002eb6 <_malloc_r+0x22>
 8002f58:	1b9b      	subs	r3, r3, r6
 8002f5a:	50a3      	str	r3, [r4, r2]
 8002f5c:	e7ab      	b.n	8002eb6 <_malloc_r+0x22>
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	6862      	ldr	r2, [r4, #4]
 8002f62:	d1dd      	bne.n	8002f20 <_malloc_r+0x8c>
 8002f64:	f8c8 2000 	str.w	r2, [r8]
 8002f68:	e7ec      	b.n	8002f44 <_malloc_r+0xb0>
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	6864      	ldr	r4, [r4, #4]
 8002f6e:	e7ac      	b.n	8002eca <_malloc_r+0x36>
 8002f70:	4634      	mov	r4, r6
 8002f72:	6876      	ldr	r6, [r6, #4]
 8002f74:	e7b4      	b.n	8002ee0 <_malloc_r+0x4c>
 8002f76:	4613      	mov	r3, r2
 8002f78:	e7cc      	b.n	8002f14 <_malloc_r+0x80>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4638      	mov	r0, r7
 8002f80:	f000 f80e 	bl	8002fa0 <__malloc_unlock>
 8002f84:	e797      	b.n	8002eb6 <_malloc_r+0x22>
 8002f86:	6025      	str	r5, [r4, #0]
 8002f88:	e7dc      	b.n	8002f44 <_malloc_r+0xb0>
 8002f8a:	605b      	str	r3, [r3, #4]
 8002f8c:	deff      	udf	#255	; 0xff
 8002f8e:	bf00      	nop
 8002f90:	20000254 	.word	0x20000254

08002f94 <__malloc_lock>:
 8002f94:	4801      	ldr	r0, [pc, #4]	; (8002f9c <__malloc_lock+0x8>)
 8002f96:	f7ff bf0e 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20000250 	.word	0x20000250

08002fa0 <__malloc_unlock>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <__malloc_unlock+0x8>)
 8002fa2:	f7ff bf09 	b.w	8002db8 <__retarget_lock_release_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000250 	.word	0x20000250

08002fac <__sfputc_r>:
 8002fac:	6893      	ldr	r3, [r2, #8]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	b410      	push	{r4}
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	da08      	bge.n	8002fca <__sfputc_r+0x1e>
 8002fb8:	6994      	ldr	r4, [r2, #24]
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	db01      	blt.n	8002fc2 <__sfputc_r+0x16>
 8002fbe:	290a      	cmp	r1, #10
 8002fc0:	d103      	bne.n	8002fca <__sfputc_r+0x1e>
 8002fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc6:	f000 bb73 	b.w	80036b0 <__swbuf_r>
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	1c58      	adds	r0, r3, #1
 8002fce:	6010      	str	r0, [r2, #0]
 8002fd0:	7019      	strb	r1, [r3, #0]
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <__sfputs_r>:
 8002fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fdc:	4606      	mov	r6, r0
 8002fde:	460f      	mov	r7, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	18d5      	adds	r5, r2, r3
 8002fe4:	42ac      	cmp	r4, r5
 8002fe6:	d101      	bne.n	8002fec <__sfputs_r+0x12>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	e007      	b.n	8002ffc <__sfputs_r+0x22>
 8002fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff0:	463a      	mov	r2, r7
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff ffda 	bl	8002fac <__sfputc_r>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d1f3      	bne.n	8002fe4 <__sfputs_r+0xa>
 8002ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003000 <_vfiprintf_r>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	460d      	mov	r5, r1
 8003006:	b09d      	sub	sp, #116	; 0x74
 8003008:	4614      	mov	r4, r2
 800300a:	4698      	mov	r8, r3
 800300c:	4606      	mov	r6, r0
 800300e:	b118      	cbz	r0, 8003018 <_vfiprintf_r+0x18>
 8003010:	6a03      	ldr	r3, [r0, #32]
 8003012:	b90b      	cbnz	r3, 8003018 <_vfiprintf_r+0x18>
 8003014:	f7ff fdca 	bl	8002bac <__sinit>
 8003018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800301a:	07d9      	lsls	r1, r3, #31
 800301c:	d405      	bmi.n	800302a <_vfiprintf_r+0x2a>
 800301e:	89ab      	ldrh	r3, [r5, #12]
 8003020:	059a      	lsls	r2, r3, #22
 8003022:	d402      	bmi.n	800302a <_vfiprintf_r+0x2a>
 8003024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003026:	f7ff fec6 	bl	8002db6 <__retarget_lock_acquire_recursive>
 800302a:	89ab      	ldrh	r3, [r5, #12]
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	d501      	bpl.n	8003034 <_vfiprintf_r+0x34>
 8003030:	692b      	ldr	r3, [r5, #16]
 8003032:	b99b      	cbnz	r3, 800305c <_vfiprintf_r+0x5c>
 8003034:	4629      	mov	r1, r5
 8003036:	4630      	mov	r0, r6
 8003038:	f000 fb78 	bl	800372c <__swsetup_r>
 800303c:	b170      	cbz	r0, 800305c <_vfiprintf_r+0x5c>
 800303e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003040:	07dc      	lsls	r4, r3, #31
 8003042:	d504      	bpl.n	800304e <_vfiprintf_r+0x4e>
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	b01d      	add	sp, #116	; 0x74
 800304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	0598      	lsls	r0, r3, #22
 8003052:	d4f7      	bmi.n	8003044 <_vfiprintf_r+0x44>
 8003054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003056:	f7ff feaf 	bl	8002db8 <__retarget_lock_release_recursive>
 800305a:	e7f3      	b.n	8003044 <_vfiprintf_r+0x44>
 800305c:	2300      	movs	r3, #0
 800305e:	9309      	str	r3, [sp, #36]	; 0x24
 8003060:	2320      	movs	r3, #32
 8003062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003066:	f8cd 800c 	str.w	r8, [sp, #12]
 800306a:	2330      	movs	r3, #48	; 0x30
 800306c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003220 <_vfiprintf_r+0x220>
 8003070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003074:	f04f 0901 	mov.w	r9, #1
 8003078:	4623      	mov	r3, r4
 800307a:	469a      	mov	sl, r3
 800307c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003080:	b10a      	cbz	r2, 8003086 <_vfiprintf_r+0x86>
 8003082:	2a25      	cmp	r2, #37	; 0x25
 8003084:	d1f9      	bne.n	800307a <_vfiprintf_r+0x7a>
 8003086:	ebba 0b04 	subs.w	fp, sl, r4
 800308a:	d00b      	beq.n	80030a4 <_vfiprintf_r+0xa4>
 800308c:	465b      	mov	r3, fp
 800308e:	4622      	mov	r2, r4
 8003090:	4629      	mov	r1, r5
 8003092:	4630      	mov	r0, r6
 8003094:	f7ff ffa1 	bl	8002fda <__sfputs_r>
 8003098:	3001      	adds	r0, #1
 800309a:	f000 80a9 	beq.w	80031f0 <_vfiprintf_r+0x1f0>
 800309e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030a0:	445a      	add	r2, fp
 80030a2:	9209      	str	r2, [sp, #36]	; 0x24
 80030a4:	f89a 3000 	ldrb.w	r3, [sl]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a1 	beq.w	80031f0 <_vfiprintf_r+0x1f0>
 80030ae:	2300      	movs	r3, #0
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030b8:	f10a 0a01 	add.w	sl, sl, #1
 80030bc:	9304      	str	r3, [sp, #16]
 80030be:	9307      	str	r3, [sp, #28]
 80030c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030c4:	931a      	str	r3, [sp, #104]	; 0x68
 80030c6:	4654      	mov	r4, sl
 80030c8:	2205      	movs	r2, #5
 80030ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ce:	4854      	ldr	r0, [pc, #336]	; (8003220 <_vfiprintf_r+0x220>)
 80030d0:	f7fd f87e 	bl	80001d0 <memchr>
 80030d4:	9a04      	ldr	r2, [sp, #16]
 80030d6:	b9d8      	cbnz	r0, 8003110 <_vfiprintf_r+0x110>
 80030d8:	06d1      	lsls	r1, r2, #27
 80030da:	bf44      	itt	mi
 80030dc:	2320      	movmi	r3, #32
 80030de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030e2:	0713      	lsls	r3, r2, #28
 80030e4:	bf44      	itt	mi
 80030e6:	232b      	movmi	r3, #43	; 0x2b
 80030e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ec:	f89a 3000 	ldrb.w	r3, [sl]
 80030f0:	2b2a      	cmp	r3, #42	; 0x2a
 80030f2:	d015      	beq.n	8003120 <_vfiprintf_r+0x120>
 80030f4:	9a07      	ldr	r2, [sp, #28]
 80030f6:	4654      	mov	r4, sl
 80030f8:	2000      	movs	r0, #0
 80030fa:	f04f 0c0a 	mov.w	ip, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003104:	3b30      	subs	r3, #48	; 0x30
 8003106:	2b09      	cmp	r3, #9
 8003108:	d94d      	bls.n	80031a6 <_vfiprintf_r+0x1a6>
 800310a:	b1b0      	cbz	r0, 800313a <_vfiprintf_r+0x13a>
 800310c:	9207      	str	r2, [sp, #28]
 800310e:	e014      	b.n	800313a <_vfiprintf_r+0x13a>
 8003110:	eba0 0308 	sub.w	r3, r0, r8
 8003114:	fa09 f303 	lsl.w	r3, r9, r3
 8003118:	4313      	orrs	r3, r2
 800311a:	9304      	str	r3, [sp, #16]
 800311c:	46a2      	mov	sl, r4
 800311e:	e7d2      	b.n	80030c6 <_vfiprintf_r+0xc6>
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	1d19      	adds	r1, r3, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	bfbb      	ittet	lt
 800312c:	425b      	neglt	r3, r3
 800312e:	f042 0202 	orrlt.w	r2, r2, #2
 8003132:	9307      	strge	r3, [sp, #28]
 8003134:	9307      	strlt	r3, [sp, #28]
 8003136:	bfb8      	it	lt
 8003138:	9204      	strlt	r2, [sp, #16]
 800313a:	7823      	ldrb	r3, [r4, #0]
 800313c:	2b2e      	cmp	r3, #46	; 0x2e
 800313e:	d10c      	bne.n	800315a <_vfiprintf_r+0x15a>
 8003140:	7863      	ldrb	r3, [r4, #1]
 8003142:	2b2a      	cmp	r3, #42	; 0x2a
 8003144:	d134      	bne.n	80031b0 <_vfiprintf_r+0x1b0>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	9203      	str	r2, [sp, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	bfb8      	it	lt
 8003152:	f04f 33ff 	movlt.w	r3, #4294967295
 8003156:	3402      	adds	r4, #2
 8003158:	9305      	str	r3, [sp, #20]
 800315a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003230 <_vfiprintf_r+0x230>
 800315e:	7821      	ldrb	r1, [r4, #0]
 8003160:	2203      	movs	r2, #3
 8003162:	4650      	mov	r0, sl
 8003164:	f7fd f834 	bl	80001d0 <memchr>
 8003168:	b138      	cbz	r0, 800317a <_vfiprintf_r+0x17a>
 800316a:	9b04      	ldr	r3, [sp, #16]
 800316c:	eba0 000a 	sub.w	r0, r0, sl
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	4082      	lsls	r2, r0
 8003174:	4313      	orrs	r3, r2
 8003176:	3401      	adds	r4, #1
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800317e:	4829      	ldr	r0, [pc, #164]	; (8003224 <_vfiprintf_r+0x224>)
 8003180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003184:	2206      	movs	r2, #6
 8003186:	f7fd f823 	bl	80001d0 <memchr>
 800318a:	2800      	cmp	r0, #0
 800318c:	d03f      	beq.n	800320e <_vfiprintf_r+0x20e>
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <_vfiprintf_r+0x228>)
 8003190:	bb1b      	cbnz	r3, 80031da <_vfiprintf_r+0x1da>
 8003192:	9b03      	ldr	r3, [sp, #12]
 8003194:	3307      	adds	r3, #7
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	3308      	adds	r3, #8
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a0:	443b      	add	r3, r7
 80031a2:	9309      	str	r3, [sp, #36]	; 0x24
 80031a4:	e768      	b.n	8003078 <_vfiprintf_r+0x78>
 80031a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80031aa:	460c      	mov	r4, r1
 80031ac:	2001      	movs	r0, #1
 80031ae:	e7a6      	b.n	80030fe <_vfiprintf_r+0xfe>
 80031b0:	2300      	movs	r3, #0
 80031b2:	3401      	adds	r4, #1
 80031b4:	9305      	str	r3, [sp, #20]
 80031b6:	4619      	mov	r1, r3
 80031b8:	f04f 0c0a 	mov.w	ip, #10
 80031bc:	4620      	mov	r0, r4
 80031be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031c2:	3a30      	subs	r2, #48	; 0x30
 80031c4:	2a09      	cmp	r2, #9
 80031c6:	d903      	bls.n	80031d0 <_vfiprintf_r+0x1d0>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0c6      	beq.n	800315a <_vfiprintf_r+0x15a>
 80031cc:	9105      	str	r1, [sp, #20]
 80031ce:	e7c4      	b.n	800315a <_vfiprintf_r+0x15a>
 80031d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80031d4:	4604      	mov	r4, r0
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7f0      	b.n	80031bc <_vfiprintf_r+0x1bc>
 80031da:	ab03      	add	r3, sp, #12
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	462a      	mov	r2, r5
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <_vfiprintf_r+0x22c>)
 80031e2:	a904      	add	r1, sp, #16
 80031e4:	4630      	mov	r0, r6
 80031e6:	f3af 8000 	nop.w
 80031ea:	4607      	mov	r7, r0
 80031ec:	1c78      	adds	r0, r7, #1
 80031ee:	d1d6      	bne.n	800319e <_vfiprintf_r+0x19e>
 80031f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f2:	07d9      	lsls	r1, r3, #31
 80031f4:	d405      	bmi.n	8003202 <_vfiprintf_r+0x202>
 80031f6:	89ab      	ldrh	r3, [r5, #12]
 80031f8:	059a      	lsls	r2, r3, #22
 80031fa:	d402      	bmi.n	8003202 <_vfiprintf_r+0x202>
 80031fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031fe:	f7ff fddb 	bl	8002db8 <__retarget_lock_release_recursive>
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	065b      	lsls	r3, r3, #25
 8003206:	f53f af1d 	bmi.w	8003044 <_vfiprintf_r+0x44>
 800320a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800320c:	e71c      	b.n	8003048 <_vfiprintf_r+0x48>
 800320e:	ab03      	add	r3, sp, #12
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	462a      	mov	r2, r5
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <_vfiprintf_r+0x22c>)
 8003216:	a904      	add	r1, sp, #16
 8003218:	4630      	mov	r0, r6
 800321a:	f000 f879 	bl	8003310 <_printf_i>
 800321e:	e7e4      	b.n	80031ea <_vfiprintf_r+0x1ea>
 8003220:	08003990 	.word	0x08003990
 8003224:	0800399a 	.word	0x0800399a
 8003228:	00000000 	.word	0x00000000
 800322c:	08002fdb 	.word	0x08002fdb
 8003230:	08003996 	.word	0x08003996

08003234 <_printf_common>:
 8003234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003238:	4616      	mov	r6, r2
 800323a:	4699      	mov	r9, r3
 800323c:	688a      	ldr	r2, [r1, #8]
 800323e:	690b      	ldr	r3, [r1, #16]
 8003240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003244:	4293      	cmp	r3, r2
 8003246:	bfb8      	it	lt
 8003248:	4613      	movlt	r3, r2
 800324a:	6033      	str	r3, [r6, #0]
 800324c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003250:	4607      	mov	r7, r0
 8003252:	460c      	mov	r4, r1
 8003254:	b10a      	cbz	r2, 800325a <_printf_common+0x26>
 8003256:	3301      	adds	r3, #1
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	0699      	lsls	r1, r3, #26
 800325e:	bf42      	ittt	mi
 8003260:	6833      	ldrmi	r3, [r6, #0]
 8003262:	3302      	addmi	r3, #2
 8003264:	6033      	strmi	r3, [r6, #0]
 8003266:	6825      	ldr	r5, [r4, #0]
 8003268:	f015 0506 	ands.w	r5, r5, #6
 800326c:	d106      	bne.n	800327c <_printf_common+0x48>
 800326e:	f104 0a19 	add.w	sl, r4, #25
 8003272:	68e3      	ldr	r3, [r4, #12]
 8003274:	6832      	ldr	r2, [r6, #0]
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	42ab      	cmp	r3, r5
 800327a:	dc26      	bgt.n	80032ca <_printf_common+0x96>
 800327c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003280:	1e13      	subs	r3, r2, #0
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	bf18      	it	ne
 8003286:	2301      	movne	r3, #1
 8003288:	0692      	lsls	r2, r2, #26
 800328a:	d42b      	bmi.n	80032e4 <_printf_common+0xb0>
 800328c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003290:	4649      	mov	r1, r9
 8003292:	4638      	mov	r0, r7
 8003294:	47c0      	blx	r8
 8003296:	3001      	adds	r0, #1
 8003298:	d01e      	beq.n	80032d8 <_printf_common+0xa4>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	6922      	ldr	r2, [r4, #16]
 800329e:	f003 0306 	and.w	r3, r3, #6
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	bf02      	ittt	eq
 80032a6:	68e5      	ldreq	r5, [r4, #12]
 80032a8:	6833      	ldreq	r3, [r6, #0]
 80032aa:	1aed      	subeq	r5, r5, r3
 80032ac:	68a3      	ldr	r3, [r4, #8]
 80032ae:	bf0c      	ite	eq
 80032b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b4:	2500      	movne	r5, #0
 80032b6:	4293      	cmp	r3, r2
 80032b8:	bfc4      	itt	gt
 80032ba:	1a9b      	subgt	r3, r3, r2
 80032bc:	18ed      	addgt	r5, r5, r3
 80032be:	2600      	movs	r6, #0
 80032c0:	341a      	adds	r4, #26
 80032c2:	42b5      	cmp	r5, r6
 80032c4:	d11a      	bne.n	80032fc <_printf_common+0xc8>
 80032c6:	2000      	movs	r0, #0
 80032c8:	e008      	b.n	80032dc <_printf_common+0xa8>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4652      	mov	r2, sl
 80032ce:	4649      	mov	r1, r9
 80032d0:	4638      	mov	r0, r7
 80032d2:	47c0      	blx	r8
 80032d4:	3001      	adds	r0, #1
 80032d6:	d103      	bne.n	80032e0 <_printf_common+0xac>
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	3501      	adds	r5, #1
 80032e2:	e7c6      	b.n	8003272 <_printf_common+0x3e>
 80032e4:	18e1      	adds	r1, r4, r3
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	2030      	movs	r0, #48	; 0x30
 80032ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ee:	4422      	add	r2, r4
 80032f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032f8:	3302      	adds	r3, #2
 80032fa:	e7c7      	b.n	800328c <_printf_common+0x58>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4622      	mov	r2, r4
 8003300:	4649      	mov	r1, r9
 8003302:	4638      	mov	r0, r7
 8003304:	47c0      	blx	r8
 8003306:	3001      	adds	r0, #1
 8003308:	d0e6      	beq.n	80032d8 <_printf_common+0xa4>
 800330a:	3601      	adds	r6, #1
 800330c:	e7d9      	b.n	80032c2 <_printf_common+0x8e>
	...

08003310 <_printf_i>:
 8003310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003314:	7e0f      	ldrb	r7, [r1, #24]
 8003316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003318:	2f78      	cmp	r7, #120	; 0x78
 800331a:	4691      	mov	r9, r2
 800331c:	4680      	mov	r8, r0
 800331e:	460c      	mov	r4, r1
 8003320:	469a      	mov	sl, r3
 8003322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003326:	d807      	bhi.n	8003338 <_printf_i+0x28>
 8003328:	2f62      	cmp	r7, #98	; 0x62
 800332a:	d80a      	bhi.n	8003342 <_printf_i+0x32>
 800332c:	2f00      	cmp	r7, #0
 800332e:	f000 80d4 	beq.w	80034da <_printf_i+0x1ca>
 8003332:	2f58      	cmp	r7, #88	; 0x58
 8003334:	f000 80c0 	beq.w	80034b8 <_printf_i+0x1a8>
 8003338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800333c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003340:	e03a      	b.n	80033b8 <_printf_i+0xa8>
 8003342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003346:	2b15      	cmp	r3, #21
 8003348:	d8f6      	bhi.n	8003338 <_printf_i+0x28>
 800334a:	a101      	add	r1, pc, #4	; (adr r1, 8003350 <_printf_i+0x40>)
 800334c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003350:	080033a9 	.word	0x080033a9
 8003354:	080033bd 	.word	0x080033bd
 8003358:	08003339 	.word	0x08003339
 800335c:	08003339 	.word	0x08003339
 8003360:	08003339 	.word	0x08003339
 8003364:	08003339 	.word	0x08003339
 8003368:	080033bd 	.word	0x080033bd
 800336c:	08003339 	.word	0x08003339
 8003370:	08003339 	.word	0x08003339
 8003374:	08003339 	.word	0x08003339
 8003378:	08003339 	.word	0x08003339
 800337c:	080034c1 	.word	0x080034c1
 8003380:	080033e9 	.word	0x080033e9
 8003384:	0800347b 	.word	0x0800347b
 8003388:	08003339 	.word	0x08003339
 800338c:	08003339 	.word	0x08003339
 8003390:	080034e3 	.word	0x080034e3
 8003394:	08003339 	.word	0x08003339
 8003398:	080033e9 	.word	0x080033e9
 800339c:	08003339 	.word	0x08003339
 80033a0:	08003339 	.word	0x08003339
 80033a4:	08003483 	.word	0x08003483
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	1d1a      	adds	r2, r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	602a      	str	r2, [r5, #0]
 80033b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033b8:	2301      	movs	r3, #1
 80033ba:	e09f      	b.n	80034fc <_printf_i+0x1ec>
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	0607      	lsls	r7, r0, #24
 80033c2:	f103 0104 	add.w	r1, r3, #4
 80033c6:	6029      	str	r1, [r5, #0]
 80033c8:	d501      	bpl.n	80033ce <_printf_i+0xbe>
 80033ca:	681e      	ldr	r6, [r3, #0]
 80033cc:	e003      	b.n	80033d6 <_printf_i+0xc6>
 80033ce:	0646      	lsls	r6, r0, #25
 80033d0:	d5fb      	bpl.n	80033ca <_printf_i+0xba>
 80033d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033d6:	2e00      	cmp	r6, #0
 80033d8:	da03      	bge.n	80033e2 <_printf_i+0xd2>
 80033da:	232d      	movs	r3, #45	; 0x2d
 80033dc:	4276      	negs	r6, r6
 80033de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e2:	485a      	ldr	r0, [pc, #360]	; (800354c <_printf_i+0x23c>)
 80033e4:	230a      	movs	r3, #10
 80033e6:	e012      	b.n	800340e <_printf_i+0xfe>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	6029      	str	r1, [r5, #0]
 80033f0:	0605      	lsls	r5, r0, #24
 80033f2:	d501      	bpl.n	80033f8 <_printf_i+0xe8>
 80033f4:	681e      	ldr	r6, [r3, #0]
 80033f6:	e002      	b.n	80033fe <_printf_i+0xee>
 80033f8:	0641      	lsls	r1, r0, #25
 80033fa:	d5fb      	bpl.n	80033f4 <_printf_i+0xe4>
 80033fc:	881e      	ldrh	r6, [r3, #0]
 80033fe:	4853      	ldr	r0, [pc, #332]	; (800354c <_printf_i+0x23c>)
 8003400:	2f6f      	cmp	r7, #111	; 0x6f
 8003402:	bf0c      	ite	eq
 8003404:	2308      	moveq	r3, #8
 8003406:	230a      	movne	r3, #10
 8003408:	2100      	movs	r1, #0
 800340a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800340e:	6865      	ldr	r5, [r4, #4]
 8003410:	60a5      	str	r5, [r4, #8]
 8003412:	2d00      	cmp	r5, #0
 8003414:	bfa2      	ittt	ge
 8003416:	6821      	ldrge	r1, [r4, #0]
 8003418:	f021 0104 	bicge.w	r1, r1, #4
 800341c:	6021      	strge	r1, [r4, #0]
 800341e:	b90e      	cbnz	r6, 8003424 <_printf_i+0x114>
 8003420:	2d00      	cmp	r5, #0
 8003422:	d04b      	beq.n	80034bc <_printf_i+0x1ac>
 8003424:	4615      	mov	r5, r2
 8003426:	fbb6 f1f3 	udiv	r1, r6, r3
 800342a:	fb03 6711 	mls	r7, r3, r1, r6
 800342e:	5dc7      	ldrb	r7, [r0, r7]
 8003430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003434:	4637      	mov	r7, r6
 8003436:	42bb      	cmp	r3, r7
 8003438:	460e      	mov	r6, r1
 800343a:	d9f4      	bls.n	8003426 <_printf_i+0x116>
 800343c:	2b08      	cmp	r3, #8
 800343e:	d10b      	bne.n	8003458 <_printf_i+0x148>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	07de      	lsls	r6, r3, #31
 8003444:	d508      	bpl.n	8003458 <_printf_i+0x148>
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	6861      	ldr	r1, [r4, #4]
 800344a:	4299      	cmp	r1, r3
 800344c:	bfde      	ittt	le
 800344e:	2330      	movle	r3, #48	; 0x30
 8003450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003458:	1b52      	subs	r2, r2, r5
 800345a:	6122      	str	r2, [r4, #16]
 800345c:	f8cd a000 	str.w	sl, [sp]
 8003460:	464b      	mov	r3, r9
 8003462:	aa03      	add	r2, sp, #12
 8003464:	4621      	mov	r1, r4
 8003466:	4640      	mov	r0, r8
 8003468:	f7ff fee4 	bl	8003234 <_printf_common>
 800346c:	3001      	adds	r0, #1
 800346e:	d14a      	bne.n	8003506 <_printf_i+0x1f6>
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	b004      	add	sp, #16
 8003476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	f043 0320 	orr.w	r3, r3, #32
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	4833      	ldr	r0, [pc, #204]	; (8003550 <_printf_i+0x240>)
 8003484:	2778      	movs	r7, #120	; 0x78
 8003486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	6829      	ldr	r1, [r5, #0]
 800348e:	061f      	lsls	r7, r3, #24
 8003490:	f851 6b04 	ldr.w	r6, [r1], #4
 8003494:	d402      	bmi.n	800349c <_printf_i+0x18c>
 8003496:	065f      	lsls	r7, r3, #25
 8003498:	bf48      	it	mi
 800349a:	b2b6      	uxthmi	r6, r6
 800349c:	07df      	lsls	r7, r3, #31
 800349e:	bf48      	it	mi
 80034a0:	f043 0320 	orrmi.w	r3, r3, #32
 80034a4:	6029      	str	r1, [r5, #0]
 80034a6:	bf48      	it	mi
 80034a8:	6023      	strmi	r3, [r4, #0]
 80034aa:	b91e      	cbnz	r6, 80034b4 <_printf_i+0x1a4>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	f023 0320 	bic.w	r3, r3, #32
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	2310      	movs	r3, #16
 80034b6:	e7a7      	b.n	8003408 <_printf_i+0xf8>
 80034b8:	4824      	ldr	r0, [pc, #144]	; (800354c <_printf_i+0x23c>)
 80034ba:	e7e4      	b.n	8003486 <_printf_i+0x176>
 80034bc:	4615      	mov	r5, r2
 80034be:	e7bd      	b.n	800343c <_printf_i+0x12c>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	6826      	ldr	r6, [r4, #0]
 80034c4:	6961      	ldr	r1, [r4, #20]
 80034c6:	1d18      	adds	r0, r3, #4
 80034c8:	6028      	str	r0, [r5, #0]
 80034ca:	0635      	lsls	r5, r6, #24
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	d501      	bpl.n	80034d4 <_printf_i+0x1c4>
 80034d0:	6019      	str	r1, [r3, #0]
 80034d2:	e002      	b.n	80034da <_printf_i+0x1ca>
 80034d4:	0670      	lsls	r0, r6, #25
 80034d6:	d5fb      	bpl.n	80034d0 <_printf_i+0x1c0>
 80034d8:	8019      	strh	r1, [r3, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	6123      	str	r3, [r4, #16]
 80034de:	4615      	mov	r5, r2
 80034e0:	e7bc      	b.n	800345c <_printf_i+0x14c>
 80034e2:	682b      	ldr	r3, [r5, #0]
 80034e4:	1d1a      	adds	r2, r3, #4
 80034e6:	602a      	str	r2, [r5, #0]
 80034e8:	681d      	ldr	r5, [r3, #0]
 80034ea:	6862      	ldr	r2, [r4, #4]
 80034ec:	2100      	movs	r1, #0
 80034ee:	4628      	mov	r0, r5
 80034f0:	f7fc fe6e 	bl	80001d0 <memchr>
 80034f4:	b108      	cbz	r0, 80034fa <_printf_i+0x1ea>
 80034f6:	1b40      	subs	r0, r0, r5
 80034f8:	6060      	str	r0, [r4, #4]
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	2300      	movs	r3, #0
 8003500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003504:	e7aa      	b.n	800345c <_printf_i+0x14c>
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	462a      	mov	r2, r5
 800350a:	4649      	mov	r1, r9
 800350c:	4640      	mov	r0, r8
 800350e:	47d0      	blx	sl
 8003510:	3001      	adds	r0, #1
 8003512:	d0ad      	beq.n	8003470 <_printf_i+0x160>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	079b      	lsls	r3, r3, #30
 8003518:	d413      	bmi.n	8003542 <_printf_i+0x232>
 800351a:	68e0      	ldr	r0, [r4, #12]
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	4298      	cmp	r0, r3
 8003520:	bfb8      	it	lt
 8003522:	4618      	movlt	r0, r3
 8003524:	e7a6      	b.n	8003474 <_printf_i+0x164>
 8003526:	2301      	movs	r3, #1
 8003528:	4632      	mov	r2, r6
 800352a:	4649      	mov	r1, r9
 800352c:	4640      	mov	r0, r8
 800352e:	47d0      	blx	sl
 8003530:	3001      	adds	r0, #1
 8003532:	d09d      	beq.n	8003470 <_printf_i+0x160>
 8003534:	3501      	adds	r5, #1
 8003536:	68e3      	ldr	r3, [r4, #12]
 8003538:	9903      	ldr	r1, [sp, #12]
 800353a:	1a5b      	subs	r3, r3, r1
 800353c:	42ab      	cmp	r3, r5
 800353e:	dcf2      	bgt.n	8003526 <_printf_i+0x216>
 8003540:	e7eb      	b.n	800351a <_printf_i+0x20a>
 8003542:	2500      	movs	r5, #0
 8003544:	f104 0619 	add.w	r6, r4, #25
 8003548:	e7f5      	b.n	8003536 <_printf_i+0x226>
 800354a:	bf00      	nop
 800354c:	080039a1 	.word	0x080039a1
 8003550:	080039b2 	.word	0x080039b2

08003554 <__sflush_r>:
 8003554:	898a      	ldrh	r2, [r1, #12]
 8003556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355a:	4605      	mov	r5, r0
 800355c:	0710      	lsls	r0, r2, #28
 800355e:	460c      	mov	r4, r1
 8003560:	d458      	bmi.n	8003614 <__sflush_r+0xc0>
 8003562:	684b      	ldr	r3, [r1, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dc05      	bgt.n	8003574 <__sflush_r+0x20>
 8003568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	dc02      	bgt.n	8003574 <__sflush_r+0x20>
 800356e:	2000      	movs	r0, #0
 8003570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003576:	2e00      	cmp	r6, #0
 8003578:	d0f9      	beq.n	800356e <__sflush_r+0x1a>
 800357a:	2300      	movs	r3, #0
 800357c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003580:	682f      	ldr	r7, [r5, #0]
 8003582:	6a21      	ldr	r1, [r4, #32]
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	d032      	beq.n	80035ee <__sflush_r+0x9a>
 8003588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	075a      	lsls	r2, r3, #29
 800358e:	d505      	bpl.n	800359c <__sflush_r+0x48>
 8003590:	6863      	ldr	r3, [r4, #4]
 8003592:	1ac0      	subs	r0, r0, r3
 8003594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003596:	b10b      	cbz	r3, 800359c <__sflush_r+0x48>
 8003598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800359a:	1ac0      	subs	r0, r0, r3
 800359c:	2300      	movs	r3, #0
 800359e:	4602      	mov	r2, r0
 80035a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a2:	6a21      	ldr	r1, [r4, #32]
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b0      	blx	r6
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	d106      	bne.n	80035bc <__sflush_r+0x68>
 80035ae:	6829      	ldr	r1, [r5, #0]
 80035b0:	291d      	cmp	r1, #29
 80035b2:	d82b      	bhi.n	800360c <__sflush_r+0xb8>
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <__sflush_r+0x108>)
 80035b6:	410a      	asrs	r2, r1
 80035b8:	07d6      	lsls	r6, r2, #31
 80035ba:	d427      	bmi.n	800360c <__sflush_r+0xb8>
 80035bc:	2200      	movs	r2, #0
 80035be:	6062      	str	r2, [r4, #4]
 80035c0:	04d9      	lsls	r1, r3, #19
 80035c2:	6922      	ldr	r2, [r4, #16]
 80035c4:	6022      	str	r2, [r4, #0]
 80035c6:	d504      	bpl.n	80035d2 <__sflush_r+0x7e>
 80035c8:	1c42      	adds	r2, r0, #1
 80035ca:	d101      	bne.n	80035d0 <__sflush_r+0x7c>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	b903      	cbnz	r3, 80035d2 <__sflush_r+0x7e>
 80035d0:	6560      	str	r0, [r4, #84]	; 0x54
 80035d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035d4:	602f      	str	r7, [r5, #0]
 80035d6:	2900      	cmp	r1, #0
 80035d8:	d0c9      	beq.n	800356e <__sflush_r+0x1a>
 80035da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035de:	4299      	cmp	r1, r3
 80035e0:	d002      	beq.n	80035e8 <__sflush_r+0x94>
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7ff fbea 	bl	8002dbc <_free_r>
 80035e8:	2000      	movs	r0, #0
 80035ea:	6360      	str	r0, [r4, #52]	; 0x34
 80035ec:	e7c0      	b.n	8003570 <__sflush_r+0x1c>
 80035ee:	2301      	movs	r3, #1
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b0      	blx	r6
 80035f4:	1c41      	adds	r1, r0, #1
 80035f6:	d1c8      	bne.n	800358a <__sflush_r+0x36>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0c5      	beq.n	800358a <__sflush_r+0x36>
 80035fe:	2b1d      	cmp	r3, #29
 8003600:	d001      	beq.n	8003606 <__sflush_r+0xb2>
 8003602:	2b16      	cmp	r3, #22
 8003604:	d101      	bne.n	800360a <__sflush_r+0xb6>
 8003606:	602f      	str	r7, [r5, #0]
 8003608:	e7b1      	b.n	800356e <__sflush_r+0x1a>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003610:	81a3      	strh	r3, [r4, #12]
 8003612:	e7ad      	b.n	8003570 <__sflush_r+0x1c>
 8003614:	690f      	ldr	r7, [r1, #16]
 8003616:	2f00      	cmp	r7, #0
 8003618:	d0a9      	beq.n	800356e <__sflush_r+0x1a>
 800361a:	0793      	lsls	r3, r2, #30
 800361c:	680e      	ldr	r6, [r1, #0]
 800361e:	bf08      	it	eq
 8003620:	694b      	ldreq	r3, [r1, #20]
 8003622:	600f      	str	r7, [r1, #0]
 8003624:	bf18      	it	ne
 8003626:	2300      	movne	r3, #0
 8003628:	eba6 0807 	sub.w	r8, r6, r7
 800362c:	608b      	str	r3, [r1, #8]
 800362e:	f1b8 0f00 	cmp.w	r8, #0
 8003632:	dd9c      	ble.n	800356e <__sflush_r+0x1a>
 8003634:	6a21      	ldr	r1, [r4, #32]
 8003636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003638:	4643      	mov	r3, r8
 800363a:	463a      	mov	r2, r7
 800363c:	4628      	mov	r0, r5
 800363e:	47b0      	blx	r6
 8003640:	2800      	cmp	r0, #0
 8003642:	dc06      	bgt.n	8003652 <__sflush_r+0xfe>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364a:	81a3      	strh	r3, [r4, #12]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	e78e      	b.n	8003570 <__sflush_r+0x1c>
 8003652:	4407      	add	r7, r0
 8003654:	eba8 0800 	sub.w	r8, r8, r0
 8003658:	e7e9      	b.n	800362e <__sflush_r+0xda>
 800365a:	bf00      	nop
 800365c:	dfbffffe 	.word	0xdfbffffe

08003660 <_fflush_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	690b      	ldr	r3, [r1, #16]
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	b913      	cbnz	r3, 8003670 <_fflush_r+0x10>
 800366a:	2500      	movs	r5, #0
 800366c:	4628      	mov	r0, r5
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	b118      	cbz	r0, 800367a <_fflush_r+0x1a>
 8003672:	6a03      	ldr	r3, [r0, #32]
 8003674:	b90b      	cbnz	r3, 800367a <_fflush_r+0x1a>
 8003676:	f7ff fa99 	bl	8002bac <__sinit>
 800367a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f3      	beq.n	800366a <_fflush_r+0xa>
 8003682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003684:	07d0      	lsls	r0, r2, #31
 8003686:	d404      	bmi.n	8003692 <_fflush_r+0x32>
 8003688:	0599      	lsls	r1, r3, #22
 800368a:	d402      	bmi.n	8003692 <_fflush_r+0x32>
 800368c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800368e:	f7ff fb92 	bl	8002db6 <__retarget_lock_acquire_recursive>
 8003692:	4628      	mov	r0, r5
 8003694:	4621      	mov	r1, r4
 8003696:	f7ff ff5d 	bl	8003554 <__sflush_r>
 800369a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800369c:	07da      	lsls	r2, r3, #31
 800369e:	4605      	mov	r5, r0
 80036a0:	d4e4      	bmi.n	800366c <_fflush_r+0xc>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	059b      	lsls	r3, r3, #22
 80036a6:	d4e1      	bmi.n	800366c <_fflush_r+0xc>
 80036a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036aa:	f7ff fb85 	bl	8002db8 <__retarget_lock_release_recursive>
 80036ae:	e7dd      	b.n	800366c <_fflush_r+0xc>

080036b0 <__swbuf_r>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	460e      	mov	r6, r1
 80036b4:	4614      	mov	r4, r2
 80036b6:	4605      	mov	r5, r0
 80036b8:	b118      	cbz	r0, 80036c2 <__swbuf_r+0x12>
 80036ba:	6a03      	ldr	r3, [r0, #32]
 80036bc:	b90b      	cbnz	r3, 80036c2 <__swbuf_r+0x12>
 80036be:	f7ff fa75 	bl	8002bac <__sinit>
 80036c2:	69a3      	ldr	r3, [r4, #24]
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	d525      	bpl.n	8003718 <__swbuf_r+0x68>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	b31b      	cbz	r3, 8003718 <__swbuf_r+0x68>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	6922      	ldr	r2, [r4, #16]
 80036d4:	1a98      	subs	r0, r3, r2
 80036d6:	6963      	ldr	r3, [r4, #20]
 80036d8:	b2f6      	uxtb	r6, r6
 80036da:	4283      	cmp	r3, r0
 80036dc:	4637      	mov	r7, r6
 80036de:	dc04      	bgt.n	80036ea <__swbuf_r+0x3a>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7ff ffbc 	bl	8003660 <_fflush_r>
 80036e8:	b9e0      	cbnz	r0, 8003724 <__swbuf_r+0x74>
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	701e      	strb	r6, [r3, #0]
 80036f8:	6962      	ldr	r2, [r4, #20]
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d004      	beq.n	800370a <__swbuf_r+0x5a>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d506      	bpl.n	8003714 <__swbuf_r+0x64>
 8003706:	2e0a      	cmp	r6, #10
 8003708:	d104      	bne.n	8003714 <__swbuf_r+0x64>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f7ff ffa7 	bl	8003660 <_fflush_r>
 8003712:	b938      	cbnz	r0, 8003724 <__swbuf_r+0x74>
 8003714:	4638      	mov	r0, r7
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003718:	4621      	mov	r1, r4
 800371a:	4628      	mov	r0, r5
 800371c:	f000 f806 	bl	800372c <__swsetup_r>
 8003720:	2800      	cmp	r0, #0
 8003722:	d0d5      	beq.n	80036d0 <__swbuf_r+0x20>
 8003724:	f04f 37ff 	mov.w	r7, #4294967295
 8003728:	e7f4      	b.n	8003714 <__swbuf_r+0x64>
	...

0800372c <__swsetup_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <__swsetup_r+0xac>)
 8003730:	4605      	mov	r5, r0
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	460c      	mov	r4, r1
 8003736:	b118      	cbz	r0, 8003740 <__swsetup_r+0x14>
 8003738:	6a03      	ldr	r3, [r0, #32]
 800373a:	b90b      	cbnz	r3, 8003740 <__swsetup_r+0x14>
 800373c:	f7ff fa36 	bl	8002bac <__sinit>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003746:	0718      	lsls	r0, r3, #28
 8003748:	d422      	bmi.n	8003790 <__swsetup_r+0x64>
 800374a:	06d9      	lsls	r1, r3, #27
 800374c:	d407      	bmi.n	800375e <__swsetup_r+0x32>
 800374e:	2309      	movs	r3, #9
 8003750:	602b      	str	r3, [r5, #0]
 8003752:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003756:	81a3      	strh	r3, [r4, #12]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	e034      	b.n	80037c8 <__swsetup_r+0x9c>
 800375e:	0758      	lsls	r0, r3, #29
 8003760:	d512      	bpl.n	8003788 <__swsetup_r+0x5c>
 8003762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003764:	b141      	cbz	r1, 8003778 <__swsetup_r+0x4c>
 8003766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800376a:	4299      	cmp	r1, r3
 800376c:	d002      	beq.n	8003774 <__swsetup_r+0x48>
 800376e:	4628      	mov	r0, r5
 8003770:	f7ff fb24 	bl	8002dbc <_free_r>
 8003774:	2300      	movs	r3, #0
 8003776:	6363      	str	r3, [r4, #52]	; 0x34
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	2300      	movs	r3, #0
 8003782:	6063      	str	r3, [r4, #4]
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	6923      	ldr	r3, [r4, #16]
 8003792:	b94b      	cbnz	r3, 80037a8 <__swsetup_r+0x7c>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d003      	beq.n	80037a8 <__swsetup_r+0x7c>
 80037a0:	4621      	mov	r1, r4
 80037a2:	4628      	mov	r0, r5
 80037a4:	f000 f850 	bl	8003848 <__smakebuf_r>
 80037a8:	89a0      	ldrh	r0, [r4, #12]
 80037aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037ae:	f010 0301 	ands.w	r3, r0, #1
 80037b2:	d00a      	beq.n	80037ca <__swsetup_r+0x9e>
 80037b4:	2300      	movs	r3, #0
 80037b6:	60a3      	str	r3, [r4, #8]
 80037b8:	6963      	ldr	r3, [r4, #20]
 80037ba:	425b      	negs	r3, r3
 80037bc:	61a3      	str	r3, [r4, #24]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	b943      	cbnz	r3, 80037d4 <__swsetup_r+0xa8>
 80037c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037c6:	d1c4      	bne.n	8003752 <__swsetup_r+0x26>
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	0781      	lsls	r1, r0, #30
 80037cc:	bf58      	it	pl
 80037ce:	6963      	ldrpl	r3, [r4, #20]
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	e7f4      	b.n	80037be <__swsetup_r+0x92>
 80037d4:	2000      	movs	r0, #0
 80037d6:	e7f7      	b.n	80037c8 <__swsetup_r+0x9c>
 80037d8:	20000064 	.word	0x20000064

080037dc <_sbrk_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	; (80037f8 <_sbrk_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd fb76 	bl	8000ed8 <_sbrk>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_sbrk_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_sbrk_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	2000024c 	.word	0x2000024c

080037fc <__swhatbuf_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	460c      	mov	r4, r1
 8003800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003804:	2900      	cmp	r1, #0
 8003806:	b096      	sub	sp, #88	; 0x58
 8003808:	4615      	mov	r5, r2
 800380a:	461e      	mov	r6, r3
 800380c:	da0d      	bge.n	800382a <__swhatbuf_r+0x2e>
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	bf0c      	ite	eq
 800381a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800381e:	2340      	movne	r3, #64	; 0x40
 8003820:	2000      	movs	r0, #0
 8003822:	6031      	str	r1, [r6, #0]
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	b016      	add	sp, #88	; 0x58
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	466a      	mov	r2, sp
 800382c:	f000 f848 	bl	80038c0 <_fstat_r>
 8003830:	2800      	cmp	r0, #0
 8003832:	dbec      	blt.n	800380e <__swhatbuf_r+0x12>
 8003834:	9901      	ldr	r1, [sp, #4]
 8003836:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800383a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800383e:	4259      	negs	r1, r3
 8003840:	4159      	adcs	r1, r3
 8003842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003846:	e7eb      	b.n	8003820 <__swhatbuf_r+0x24>

08003848 <__smakebuf_r>:
 8003848:	898b      	ldrh	r3, [r1, #12]
 800384a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800384c:	079d      	lsls	r5, r3, #30
 800384e:	4606      	mov	r6, r0
 8003850:	460c      	mov	r4, r1
 8003852:	d507      	bpl.n	8003864 <__smakebuf_r+0x1c>
 8003854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	2301      	movs	r3, #1
 800385e:	6163      	str	r3, [r4, #20]
 8003860:	b002      	add	sp, #8
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	ab01      	add	r3, sp, #4
 8003866:	466a      	mov	r2, sp
 8003868:	f7ff ffc8 	bl	80037fc <__swhatbuf_r>
 800386c:	9900      	ldr	r1, [sp, #0]
 800386e:	4605      	mov	r5, r0
 8003870:	4630      	mov	r0, r6
 8003872:	f7ff fb0f 	bl	8002e94 <_malloc_r>
 8003876:	b948      	cbnz	r0, 800388c <__smakebuf_r+0x44>
 8003878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387c:	059a      	lsls	r2, r3, #22
 800387e:	d4ef      	bmi.n	8003860 <__smakebuf_r+0x18>
 8003880:	f023 0303 	bic.w	r3, r3, #3
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7e3      	b.n	8003854 <__smakebuf_r+0xc>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	6020      	str	r0, [r4, #0]
 8003890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003894:	81a3      	strh	r3, [r4, #12]
 8003896:	9b00      	ldr	r3, [sp, #0]
 8003898:	6163      	str	r3, [r4, #20]
 800389a:	9b01      	ldr	r3, [sp, #4]
 800389c:	6120      	str	r0, [r4, #16]
 800389e:	b15b      	cbz	r3, 80038b8 <__smakebuf_r+0x70>
 80038a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038a4:	4630      	mov	r0, r6
 80038a6:	f000 f81d 	bl	80038e4 <_isatty_r>
 80038aa:	b128      	cbz	r0, 80038b8 <__smakebuf_r+0x70>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	431d      	orrs	r5, r3
 80038bc:	81a5      	strh	r5, [r4, #12]
 80038be:	e7cf      	b.n	8003860 <__smakebuf_r+0x18>

080038c0 <_fstat_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d07      	ldr	r5, [pc, #28]	; (80038e0 <_fstat_r+0x20>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	602b      	str	r3, [r5, #0]
 80038ce:	f7fd fada 	bl	8000e86 <_fstat>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	d102      	bne.n	80038dc <_fstat_r+0x1c>
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	b103      	cbz	r3, 80038dc <_fstat_r+0x1c>
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	bd38      	pop	{r3, r4, r5, pc}
 80038de:	bf00      	nop
 80038e0:	2000024c 	.word	0x2000024c

080038e4 <_isatty_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d06      	ldr	r5, [pc, #24]	; (8003900 <_isatty_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	f7fd fad9 	bl	8000ea6 <_isatty>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_isatty_r+0x1a>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_isatty_r+0x1a>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	2000024c 	.word	0x2000024c

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
