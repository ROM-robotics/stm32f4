
05 how to read magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000407c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004264  08004264  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800426c  0800426c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000234  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bdce  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021c6  00000000  00000000  0002bea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc0  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009bc  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021a69  00000000  00000000  0002f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f16b  00000000  00000000  00051155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd51e  00000000  00000000  000602c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b84  00000000  00000000  0012d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00131364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041f4 	.word	0x080041f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080041f4 	.word	0x080041f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a25      	ldr	r2, [pc, #148]	; (8000620 <MX_GPIO_Init+0xb4>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005f8:	f001 f86c 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000614:	f000 fec2 	bl	800139c <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d013      	beq.n	8000668 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000648:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	e000      	b.n	8000654 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000652:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fce7 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f809 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff ff73 	bl	800056c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000686:	f000 faaf 	bl	8000be8 <MX_SPI2_Init>
  MX_TIM9_Init();
 800068a:	f000 fc51 	bl	8000f30 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  mpu_init();
 800068e:	f000 f907 	bl	80008a0 <mpu_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x1c>

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ff85 	bl	80035b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fff5 	bl	8001708 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f85a 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fa56 	bl	8001bf8 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f843 	bl	80007dc <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e009      	b.n	800078e <_write+0x26>
		ITM_SendChar(*ptr++);
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	60ba      	str	r2, [r7, #8]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff50 	bl	8000628 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbf1      	blt.n	800077a <_write+0x12>
	return len;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <mpu_callback>:


void mpu_callback(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	mpu_read_sensor(&imu_data);
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <mpu_callback+0x2c>)
 80007a6:	f000 f909 	bl	80009bc <mpu_read_sensor>
	z_gyro = imu_data.z_gyro;
	sum_gyro_x += x_gyro;
	sum_gyro_y += y_gyro;
	sum_gyro_z += z_gyro;
	*/
	x_mag = imu_data.x_mag;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <mpu_callback+0x2c>)
 80007ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <mpu_callback+0x30>)
 80007b2:	801a      	strh	r2, [r3, #0]
	y_mag = imu_data.y_mag;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <mpu_callback+0x2c>)
 80007b6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <mpu_callback+0x34>)
 80007bc:	801a      	strh	r2, [r3, #0]
	z_mag = imu_data.z_mag;
 80007be:	4b03      	ldr	r3, [pc, #12]	; (80007cc <mpu_callback+0x2c>)
 80007c0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <mpu_callback+0x38>)
 80007c6:	801a      	strh	r2, [r3, #0]
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000084 	.word	0x20000084
 80007d0:	20000096 	.word	0x20000096
 80007d4:	20000098 	.word	0x20000098
 80007d8:	2000009a 	.word	0x2000009a

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <activate_spi2_mpu>:
int16_t x_gyro_bias, y_gyro_bias, z_gyro_bias;

static void remove_gyro_bias(void);

static void activate_spi2_mpu(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2101      	movs	r1, #1
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <activate_spi2_mpu+0x14>)
 80007f2:	f000 ff6f 	bl	80016d4 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020800 	.word	0x40020800

08000800 <deactivate_spi2_mpu>:

static void deactivate_spi2_mpu(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <deactivate_spi2_mpu+0x14>)
 800080a:	f000 ff63 	bl	80016d4 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020800 	.word	0x40020800

08000818 <ak8963_write_reg>:


void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 8000828:	210c      	movs	r1, #12
 800082a:	2025      	movs	r0, #37	; 0x25
 800082c:	f000 f882 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4619      	mov	r1, r3
 8000834:	2026      	movs	r0, #38	; 0x26
 8000836:	f000 f87d 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_DATA_REG, data);
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	4619      	mov	r1, r3
 800083e:	2063      	movs	r0, #99	; 0x63
 8000840:	f000 f878 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01) );
 8000844:	2181      	movs	r1, #129	; 0x81
 8000846:	2027      	movs	r0, #39	; 0x27
 8000848:	f000 f874 	bl	8000934 <mpu_write_reg>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <ak8963_read_reg>:

void ak8963_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, (0x80 | AK8963_ADDRESS) );
 8000864:	218c      	movs	r1, #140	; 0x8c
 8000866:	2025      	movs	r0, #37	; 0x25
 8000868:	f000 f864 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4619      	mov	r1, r3
 8000870:	2026      	movs	r0, #38	; 0x26
 8000872:	f000 f85f 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	2027      	movs	r0, #39	; 0x27
 8000882:	f000 f857 	bl	8000934 <mpu_write_reg>
	HAL_Delay(10);
 8000886:	200a      	movs	r0, #10
 8000888:	f000 fc52 	bl	8001130 <HAL_Delay>
	mpu_read_reg(EXT_SENS_DATA_00_REG, data, len);
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	461a      	mov	r2, r3
 8000890:	6839      	ldr	r1, [r7, #0]
 8000892:	2017      	movs	r0, #23
 8000894:	f000 f86c 	bl	8000970 <mpu_read_reg>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <mpu_init>:
void mpu_init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];
	// GYRO configuration
	mpu_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 80008a6:	2108      	movs	r1, #8
 80008a8:	201b      	movs	r0, #27
 80008aa:	f000 f843 	bl	8000934 <mpu_write_reg>

	// ACCELERO configuration
	mpu_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 80008ae:	2108      	movs	r1, #8
 80008b0:	201c      	movs	r0, #28
 80008b2:	f000 f83f 	bl	8000934 <mpu_write_reg>

	// EXTING from sleep mode
	mpu_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 80008b6:	2101      	movs	r1, #1
 80008b8:	206b      	movs	r0, #107	; 0x6b
 80008ba:	f000 f83b 	bl	8000934 <mpu_write_reg>

	// Enable I2C Master setting 400Khz
	mpu_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 80008be:	2120      	movs	r1, #32
 80008c0:	206a      	movs	r0, #106	; 0x6a
 80008c2:	f000 f837 	bl	8000934 <mpu_write_reg>
	mpu_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_400);
 80008c6:	210d      	movs	r1, #13
 80008c8:	2024      	movs	r0, #36	; 0x24
 80008ca:	f000 f833 	bl	8000934 <mpu_write_reg>

	remove_gyro_bias();
 80008ce:	f000 f915 	bl	8000afc <remove_gyro_bias>

	// POWER down Magnetometer
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80008d2:	2100      	movs	r1, #0
 80008d4:	200a      	movs	r0, #10
 80008d6:	f7ff ff9f 	bl	8000818 <ak8963_write_reg>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f000 fc28 	bl	8001130 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 80008e0:	210f      	movs	r1, #15
 80008e2:	200a      	movs	r0, #10
 80008e4:	f7ff ff98 	bl	8000818 <ak8963_write_reg>
	HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f000 fc21 	bl	8001130 <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 80008ee:	2203      	movs	r2, #3
 80008f0:	490f      	ldr	r1, [pc, #60]	; (8000930 <mpu_init+0x90>)
 80008f2:	2010      	movs	r0, #16
 80008f4:	f7ff ffae 	bl	8000854 <ak8963_read_reg>

	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80008f8:	2100      	movs	r1, #0
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff ff8c 	bl	8000818 <ak8963_write_reg>
	HAL_Delay(10);
 8000900:	200a      	movs	r0, #10
 8000902:	f000 fc15 	bl	8001130 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 8000906:	2116      	movs	r1, #22
 8000908:	200a      	movs	r0, #10
 800090a:	f7ff ff85 	bl	8000818 <ak8963_write_reg>
	HAL_Delay(10);
 800090e:	200a      	movs	r0, #10
 8000910:	f000 fc0e 	bl	8001130 <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 8000914:	463b      	mov	r3, r7
 8000916:	2207      	movs	r2, #7
 8000918:	4619      	mov	r1, r3
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff ff9a 	bl	8000854 <ak8963_read_reg>
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f000 fc05 	bl	8001130 <HAL_Delay>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000009c 	.word	0x2000009c

08000934 <mpu_write_reg>:

void mpu_write_reg(uint8_t reg, uint8_t data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
	activate_spi2_mpu();
 8000944:	f7ff ff50 	bl	80007e8 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000948:	1df9      	adds	r1, r7, #7
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	2201      	movs	r2, #1
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <mpu_write_reg+0x38>)
 8000950:	f001 fbc7 	bl	80020e2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data,1, 100);
 8000954:	1db9      	adds	r1, r7, #6
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	2201      	movs	r2, #1
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <mpu_write_reg+0x38>)
 800095c:	f001 fbc1 	bl	80020e2 <HAL_SPI_Transmit>
	deactivate_spi2_mpu();
 8000960:	f7ff ff4e 	bl	8000800 <deactivate_spi2_mpu>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000a8 	.word	0x200000a8

08000970 <mpu_read_reg>:

void mpu_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80 | reg;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000986:	b2db      	uxtb	r3, r3
 8000988:	73fb      	strb	r3, [r7, #15]
	activate_spi2_mpu();
 800098a:	f7ff ff2d 	bl	80007e8 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 800098e:	f107 010f 	add.w	r1, r7, #15
 8000992:	2364      	movs	r3, #100	; 0x64
 8000994:	2201      	movs	r2, #1
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <mpu_read_reg+0x48>)
 8000998:	f001 fba3 	bl	80020e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, len, 100);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <mpu_read_reg+0x48>)
 80009a6:	f001 fcdf 	bl	8002368 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 80009aa:	f7ff ff29 	bl	8000800 <deactivate_spi2_mpu>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000a8 	.word	0x200000a8

080009bc <mpu_read_sensor>:

void mpu_read_sensor(mpu_data *imu_data)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	uint8_t data[20];
	activate_spi2_mpu();
 80009c4:	f7ff ff10 	bl	80007e8 <activate_spi2_mpu>
	uint8_t temp_reg = 0x80 | ACCEL_XOUT_H;
 80009c8:	23bb      	movs	r3, #187	; 0xbb
 80009ca:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi2, &temp_reg, 1, 100);
 80009cc:	f107 010b 	add.w	r1, r7, #11
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	4845      	ldr	r0, [pc, #276]	; (8000aec <mpu_read_sensor+0x130>)
 80009d6:	f001 fb84 	bl	80020e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 20, 100);
 80009da:	f107 010c 	add.w	r1, r7, #12
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2214      	movs	r2, #20
 80009e2:	4842      	ldr	r0, [pc, #264]	; (8000aec <mpu_read_sensor+0x130>)
 80009e4:	f001 fcc0 	bl	8002368 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 80009e8:	f7ff ff0a 	bl	8000800 <deactivate_spi2_mpu>

	imu_data->x_accel = ((int16_t)data[0]<<8) + data[1];
 80009ec:	7b3b      	ldrb	r3, [r7, #12]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	801a      	strh	r2, [r3, #0]
	imu_data->y_accel = ((int16_t)data[2]<<8) + data[3];
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	805a      	strh	r2, [r3, #2]
	imu_data->z_accel = ((int16_t)data[4]<<8) + data[5];
 8000a18:	7c3b      	ldrb	r3, [r7, #16]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	7c7b      	ldrb	r3, [r7, #17]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	809a      	strh	r2, [r3, #4]

	imu_data->x_gyro = (((int16_t)data[8]<<8) + data[9])   + x_gyro_bias;
 8000a2e:	7d3b      	ldrb	r3, [r7, #20]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	7d7b      	ldrb	r3, [r7, #21]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <mpu_read_sensor+0x134>)
 8000a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4413      	add	r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	80da      	strh	r2, [r3, #6]
	imu_data->y_gyro = (((int16_t)data[10]<<8) + data[11]) + y_gyro_bias;
 8000a50:	7dbb      	ldrb	r3, [r7, #22]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <mpu_read_sensor+0x138>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	811a      	strh	r2, [r3, #8]
	imu_data->z_gyro = (((int16_t)data[12]<<8) + data[13]) + z_gyro_bias;
 8000a72:	7e3b      	ldrb	r3, [r7, #24]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	7e7b      	ldrb	r3, [r7, #25]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <mpu_read_sensor+0x13c>)
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	815a      	strh	r2, [r3, #10]

	imu_data->x_mag = ( ((int16_t)data[15]<<8) + data[14] ) - MAG_X_BIAS;
 8000a94:	7efb      	ldrb	r3, [r7, #27]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	7ebb      	ldrb	r3, [r7, #26]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	819a      	strh	r2, [r3, #12]
	imu_data->y_mag = ( ((int16_t)data[17]<<8) + data[16] ) - MAG_Y_BIAS;
 8000ab0:	7f7b      	ldrb	r3, [r7, #29]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	7f3b      	ldrb	r3, [r7, #28]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	81da      	strh	r2, [r3, #14]
	imu_data->z_mag = ( ((int16_t)data[19]<<8) + data[18] ) - MAG_Z_BIAS;
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	7fbb      	ldrb	r3, [r7, #30]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	821a      	strh	r2, [r3, #16]

	//printf("Accelero : %d, %d, and %d \n", imu_data->x_accel, imu_data->y_accel, imu_data->z_accel);
	//printf("Gyro : %d, %d, and %d \n", imu_data->x_gyro, imu_data->y_gyro, imu_data->z_gyro);
	//printf("Magneto : %d, %d, and %d \n", imu_data->x_mag, imu_data->y_mag, imu_data->z_mag);

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000a8 	.word	0x200000a8
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000a2 	.word	0x200000a2
 8000af8:	200000a4 	.word	0x200000a4

08000afc <remove_gyro_bias>:

static void remove_gyro_bias(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0

	int32_t x_bias = 0, y_bias = 0, z_bias = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 1000; i++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	e01d      	b.n	8000b50 <remove_gyro_bias+0x54>
	{
		mpu_read_sensor(&imu_data);
 8000b14:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <remove_gyro_bias+0xd4>)
 8000b16:	f7ff ff51 	bl	80009bc <mpu_read_sensor>
		x_bias += (int32_t)imu_data.x_gyro;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <remove_gyro_bias+0xd4>)
 8000b1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b20:	461a      	mov	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
		y_bias += (int32_t)imu_data.y_gyro;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <remove_gyro_bias+0xd4>)
 8000b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
		z_bias += (int32_t)imu_data.z_gyro;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <remove_gyro_bias+0xd4>)
 8000b38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 faf3 	bl	8001130 <HAL_Delay>
	for(int i = 0; i < 1000; i++)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b56:	dbdd      	blt.n	8000b14 <remove_gyro_bias+0x18>
	}
	x_gyro_bias =-(int16_t)(x_bias / 1000);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <remove_gyro_bias+0xd8>)
 8000b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b60:	1192      	asrs	r2, r2, #6
 8000b62:	17db      	asrs	r3, r3, #31
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	425b      	negs	r3, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <remove_gyro_bias+0xdc>)
 8000b70:	801a      	strh	r2, [r3, #0]
	y_gyro_bias =-(int16_t)(y_bias / 1000);
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <remove_gyro_bias+0xd8>)
 8000b76:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7a:	1192      	asrs	r2, r2, #6
 8000b7c:	17db      	asrs	r3, r3, #31
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	425b      	negs	r3, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <remove_gyro_bias+0xe0>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	z_gyro_bias =-(int16_t)(z_bias / 1000);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <remove_gyro_bias+0xd8>)
 8000b90:	fb82 1203 	smull	r1, r2, r2, r3
 8000b94:	1192      	asrs	r2, r2, #6
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <remove_gyro_bias+0xe4>)
 8000ba4:	801a      	strh	r2, [r3, #0]
	printf("x,y,z %d, %d, %d \n", x_gyro_bias, y_gyro_bias, z_gyro_bias);
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <remove_gyro_bias+0xdc>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <remove_gyro_bias+0xe0>)
 8000bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <remove_gyro_bias+0xe4>)
 8000bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <remove_gyro_bias+0xe8>)
 8000bbe:	f002 fca3 	bl	8003508 <iprintf>
	HAL_Delay(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 fab4 	bl	8001130 <HAL_Delay>
	//mpu_write_reg(XG_OFFSET_L, (uint8_t)(x_gyro_bias));
	//mpu_write_reg(YG_OFFSET_H, (uint8_t)(y_gyro_bias >> 8));
	//mpu_write_reg(YG_OFFSET_L, (uint8_t)(y_gyro_bias));
	//mpu_write_reg(ZG_OFFSET_H, (uint8_t)(z_gyro_bias >> 8));
	//mpu_write_reg(ZG_OFFSET_L, (uint8_t)(z_gyro_bias));
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000084 	.word	0x20000084
 8000bd4:	10624dd3 	.word	0x10624dd3
 8000bd8:	200000a0 	.word	0x200000a0
 8000bdc:	200000a2 	.word	0x200000a2
 8000be0:	200000a4 	.word	0x200000a4
 8000be4:	0800420c 	.word	0x0800420c

08000be8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MX_SPI2_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c1c:	2228      	movs	r2, #40	; 0x28
 8000c1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c34:	220a      	movs	r2, #10
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_SPI2_Init+0x64>)
 8000c3a:	f001 f9c9 	bl	8001fd0 <HAL_SPI_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c44:	f7ff fdca 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000a8 	.word	0x200000a8
 8000c50:	40003800 	.word	0x40003800

08000c54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <HAL_SPI_MspInit+0xc0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d14a      	bne.n	8000d0c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_SPI_MspInit+0xc4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <HAL_SPI_MspInit+0xc8>)
 8000ce6:	f000 fb59 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <HAL_SPI_MspInit+0xcc>)
 8000d08:	f000 fb48 	bl	800139c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40003800 	.word	0x40003800
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fad8 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f996 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if( TIM9->SR & TIM_SR_UIF )
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <TIM1_BRK_TIM9_IRQHandler+0x14>
	{
		mpu_callback();
 8000dd8:	f7ff fce2 	bl	80007a0 <mpu_callback>
	}
	TIM9->SR &= ~TIM_SR_UIF;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8000dea:	f001 ff87 	bl	8002cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40014000 	.word	0x40014000
 8000df8:	20000104 	.word	0x20000104

08000dfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
  }

  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f002 fbbe 	bl	8003650 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000100 	.word	0x20000100
 8000f08:	200002a0 	.word	0x200002a0

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_TIM9_Init+0x74>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f4a:	22a7      	movs	r2, #167	; 0xa7
 8000f4c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f56:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f5a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f6a:	f001 fe07 	bl	8002b7c <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000f74:	f7ff fc32 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f84:	f001 ffaa 	bl	8002edc <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000f8e:	f7ff fc25 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM9_Init+0x70>)
 8000f94:	f001 fe42 	bl	8002c1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM9_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000104 	.word	0x20000104
 8000fa4:	40014000 	.word	0x40014000

08000fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_TIM_Base_MspInit+0x48>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d115      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_TIM_Base_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_TIM_Base_MspInit+0x4c>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_TIM_Base_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2018      	movs	r0, #24
 8000fdc:	f000 f9a7 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fe0:	2018      	movs	r0, #24
 8000fe2:	f000 f9c0 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40014000 	.word	0x40014000
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ffc:	f7ff ff86 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f002 fb19 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fb24 	bl	8000676 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800103c:	08004274 	.word	0x08004274
  ldr r2, =_sbss
 8001040:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001044:	2000029c 	.word	0x2000029c

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_Init+0x40>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_Init+0x40>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x40>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f94f 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fe50 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f967 	bl	8001382 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f92f 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	2000014c 	.word	0x2000014c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000014c 	.word	0x2000014c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff3e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff31 	bl	80011dc <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e16b      	b.n	8001690 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 815a 	bne.w	800168a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d005      	beq.n	80013ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d130      	bne.n	8001450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d017      	beq.n	800148c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80b4 	beq.w	800168a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_GPIO_Init+0x310>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_GPIO_Init+0x314>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <HAL_GPIO_Init+0x318>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x222>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_GPIO_Init+0x31c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <HAL_GPIO_Init+0x320>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x216>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4d      	ldr	r2, [pc, #308]	; (80016c4 <HAL_GPIO_Init+0x328>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x212>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x32c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_GPIO_Init+0x330>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x20a>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00e      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015aa:	2306      	movs	r3, #6
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015c2:	2300      	movs	r3, #0
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d4:	4935      	ldr	r1, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x310>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_GPIO_Init+0x334>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001606:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_GPIO_Init+0x334>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_GPIO_Init+0x334>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	f67f ae90 	bls.w	80013b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40021c00 	.word	0x40021c00
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e267      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b85      	ldr	r3, [pc, #532]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	2b08      	cmp	r3, #8
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x108>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e242      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x74>
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b70      	ldr	r3, [pc, #448]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6f      	ldr	r2, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6c      	ldr	r2, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a68      	ldr	r2, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcaa 	bl	8001118 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fca6 	bl	8001118 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e207      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xc0>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc96 	bl	8001118 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fc92 	bl	8001118 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1f3      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0xe8>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1c7      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_OscConfig+0x244>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fc4b 	bl	8001118 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fc47 	bl	8001118 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1a8      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x244>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc2a 	bl	8001118 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc26 	bl	8001118 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e187      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d036      	beq.n	8001960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x248>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fc0a 	bl	8001118 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc06 	bl	8001118 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e167      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x240>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x200>
 8001926:	e01b      	b.n	8001960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x248>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fbf3 	bl	8001118 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	e00e      	b.n	8001954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fbef 	bl	8001118 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d907      	bls.n	8001954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e150      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
 8001948:	40023800 	.word	0x40023800
 800194c:	42470000 	.word	0x42470000
 8001950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ea      	bne.n	8001936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8097 	beq.w	8001a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a73      	ldr	r2, [pc, #460]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fbaf 	bl	8001118 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff fbab 	bl	8001118 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e10c      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x474>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2ea>
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x324>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x30c>
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6713      	str	r3, [r2, #112]	; 0x70
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0x324>
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d015      	beq.n	8001a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fb70 	bl	8001118 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fb6c 	bl	8001118 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0cb      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ee      	beq.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7ff fb5a 	bl	8001118 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb56 	bl	8001118 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0b5      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ee      	bne.n	8001a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a1 	beq.w	8001be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d05c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d141      	bne.n	8001b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb2a 	bl	8001118 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fb26 	bl	8001118 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e087      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	491b      	ldr	r1, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff faff 	bl	8001118 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fafb 	bl	8001118 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e05c      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x416>
 8001b3c:	e054      	b.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x478>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fae8 	bl	8001118 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fae4 	bl	8001118 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e045      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x470>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
 8001b6a:	e03d      	b.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e038      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4ec>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d028      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d121      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d11a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cc      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d044      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4934      	ldr	r1, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa16 	bl	8001118 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff fa12 	bl	8001118 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d20c      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f976 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08004220 	.word	0x08004220
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc8:	b094      	sub	sp, #80	; 0x50
 8001dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d00d      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x40>
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	f200 80e1 	bhi.w	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x34>
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001df6:	e0db      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001dfc:	e0db      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfe:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e02:	e0d8      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e36:	4622      	mov	r2, r4
 8001e38:	462b      	mov	r3, r5
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	0159      	lsls	r1, r3, #5
 8001e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e48:	0150      	lsls	r0, r2, #5
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4621      	mov	r1, r4
 8001e50:	1a51      	subs	r1, r2, r1
 8001e52:	6139      	str	r1, [r7, #16]
 8001e54:	4629      	mov	r1, r5
 8001e56:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e68:	4659      	mov	r1, fp
 8001e6a:	018b      	lsls	r3, r1, #6
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e72:	4651      	mov	r1, sl
 8001e74:	018a      	lsls	r2, r1, #6
 8001e76:	4651      	mov	r1, sl
 8001e78:	ebb2 0801 	subs.w	r8, r2, r1
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e96:	4690      	mov	r8, r2
 8001e98:	4699      	mov	r9, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	eb49 0303 	adc.w	r3, r9, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	024b      	lsls	r3, r1, #9
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	024a      	lsls	r2, r1, #9
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed4:	f7fe f9cc 	bl	8000270 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee0:	e058      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	4611      	mov	r1, r2
 8001eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	0159      	lsls	r1, r3, #5
 8001f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0e:	0150      	lsls	r0, r2, #5
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4641      	mov	r1, r8
 8001f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f34:	ebb2 040a 	subs.w	r4, r2, sl
 8001f38:	eb63 050b 	sbc.w	r5, r3, fp
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	00eb      	lsls	r3, r5, #3
 8001f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	4643      	mov	r3, r8
 8001f52:	18e3      	adds	r3, r4, r3
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	464b      	mov	r3, r9
 8001f58:	eb45 0303 	adc.w	r3, r5, r3
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	61fa      	str	r2, [r7, #28]
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	f7fe f972 	bl	8000270 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3750      	adds	r7, #80	; 0x50
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07b      	b.n	80020da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ff2:	d009      	beq.n	8002008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
 8001ffa:	e005      	b.n	8002008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fe16 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	ea42 0103 	orr.w	r1, r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	f003 0104 	and.w	r1, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 0210 	and.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b088      	sub	sp, #32
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_SPI_Transmit+0x22>
 8002100:	2302      	movs	r3, #2
 8002102:	e12d      	b.n	8002360 <HAL_SPI_Transmit+0x27e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800210c:	f7ff f804 	bl	8001118 <HAL_GetTick>
 8002110:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d002      	beq.n	8002128 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002126:	e116      	b.n	8002356 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_SPI_Transmit+0x52>
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002138:	e10d      	b.n	8002356 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2203      	movs	r2, #3
 800213e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002180:	d10f      	bne.n	80021a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d007      	beq.n	80021c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021c8:	d14f      	bne.n	800226a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Transmit+0xf6>
 80021d2:	8afb      	ldrh	r3, [r7, #22]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d142      	bne.n	800225e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	1c9a      	adds	r2, r3, #2
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021fc:	e02f      	b.n	800225e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d112      	bne.n	8002232 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	1c9a      	adds	r2, r3, #2
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002230:	e015      	b.n	800225e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002232:	f7fe ff71 	bl	8001118 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d803      	bhi.n	800224a <HAL_SPI_Transmit+0x168>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d102      	bne.n	8002250 <HAL_SPI_Transmit+0x16e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800225c:	e07b      	b.n	8002356 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ca      	bne.n	80021fe <HAL_SPI_Transmit+0x11c>
 8002268:	e050      	b.n	800230c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Transmit+0x196>
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d144      	bne.n	8002302 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800229e:	e030      	b.n	8002302 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d113      	bne.n	80022d6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022d4:	e015      	b.n	8002302 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d6:	f7fe ff1f 	bl	8001118 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d803      	bhi.n	80022ee <HAL_SPI_Transmit+0x20c>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_Transmit+0x212>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002300:	e029      	b.n	8002356 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1c9      	bne.n	80022a0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fbdf 	bl	8002ad4 <SPI_EndRxTxTransaction>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e003      	b.n	8002356 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800235e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d002      	beq.n	800238e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002388:	2302      	movs	r3, #2
 800238a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800238c:	e0fb      	b.n	8002586 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002396:	d112      	bne.n	80023be <HAL_SPI_Receive+0x56>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10e      	bne.n	80023be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2204      	movs	r2, #4
 80023a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8ef 	bl	8002598 <HAL_SPI_TransmitReceive>
 80023ba:	4603      	mov	r3, r0
 80023bc:	e0e8      	b.n	8002590 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_SPI_Receive+0x64>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0e1      	b.n	8002590 <HAL_SPI_Receive+0x228>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d4:	f7fe fea0 	bl	8001118 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_Receive+0x7e>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ea:	e0cc      	b.n	8002586 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2204      	movs	r2, #4
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002432:	d10f      	bne.n	8002454 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d007      	beq.n	8002472 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d16a      	bne.n	8002550 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800247a:	e032      	b.n	80024e2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d115      	bne.n	80024b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f103 020c 	add.w	r2, r3, #12
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b4:	e015      	b.n	80024e2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b6:	f7fe fe2f 	bl	8001118 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d803      	bhi.n	80024ce <HAL_SPI_Receive+0x166>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d102      	bne.n	80024d4 <HAL_SPI_Receive+0x16c>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024e0:	e051      	b.n	8002586 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1c7      	bne.n	800247c <HAL_SPI_Receive+0x114>
 80024ec:	e035      	b.n	800255a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d113      	bne.n	8002524 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	b292      	uxth	r2, r2
 8002508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002522:	e015      	b.n	8002550 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002524:	f7fe fdf8 	bl	8001118 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d803      	bhi.n	800253c <HAL_SPI_Receive+0x1d4>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Receive+0x1da>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800254e:	e01a      	b.n	8002586 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1c9      	bne.n	80024ee <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fa52 	bl	8002a08 <SPI_EndRxTransaction>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	75fb      	strb	r3, [r7, #23]
 800257c:	e003      	b.n	8002586 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_SPI_TransmitReceive+0x26>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e198      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x358>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025c6:	f7fe fda7 	bl	8001118 <HAL_GetTick>
 80025ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d00f      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x70>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ee:	d107      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x68>
 80025f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d003      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002600:	2302      	movs	r3, #2
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002606:	e16d      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_SPI_TransmitReceive+0x82>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_TransmitReceive+0x82>
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002620:	e160      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b04      	cmp	r3, #4
 800262c:	d003      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2205      	movs	r2, #5
 8002632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d007      	beq.n	800268a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002692:	d17c      	bne.n	800278e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0x10a>
 800269c:	8b7b      	ldrh	r3, [r7, #26]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d16a      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	1c9a      	adds	r2, r3, #2
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c6:	e057      	b.n	8002778 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11b      	bne.n	800270e <HAL_SPI_TransmitReceive+0x176>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_SPI_TransmitReceive+0x176>
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	1c9a      	adds	r2, r3, #2
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d119      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x1b8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d014      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	b292      	uxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	1c9a      	adds	r2, r3, #2
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800274c:	2301      	movs	r3, #1
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002750:	f7fe fce2 	bl	8001118 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275c:	429a      	cmp	r2, r3
 800275e:	d80b      	bhi.n	8002778 <HAL_SPI_TransmitReceive+0x1e0>
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d007      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002776:	e0b5      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1a2      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x130>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d19d      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x130>
 800278c:	e080      	b.n	8002890 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_SPI_TransmitReceive+0x204>
 8002796:	8b7b      	ldrh	r3, [r7, #26]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d16f      	bne.n	800287c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c2:	e05b      	b.n	800287c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d11c      	bne.n	800280c <HAL_SPI_TransmitReceive+0x274>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d017      	beq.n	800280c <HAL_SPI_TransmitReceive+0x274>
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d114      	bne.n	800280c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d119      	bne.n	800284e <HAL_SPI_TransmitReceive+0x2b6>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d014      	beq.n	800284e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800284a:	2301      	movs	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800284e:	f7fe fc63 	bl	8001118 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800285a:	429a      	cmp	r2, r3
 800285c:	d803      	bhi.n	8002866 <HAL_SPI_TransmitReceive+0x2ce>
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d102      	bne.n	800286c <HAL_SPI_TransmitReceive+0x2d4>
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800287a:	e033      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d19e      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x22c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d199      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f91d 	bl	8002ad4 <SPI_EndRxTxTransaction>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028ac:	e01a      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028da:	e003      	b.n	80028e4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3730      	adds	r7, #48	; 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002908:	f7fe fc06 	bl	8001118 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002918:	f7fe fbfe 	bl	8001118 <HAL_GetTick>
 800291c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	0d1b      	lsrs	r3, r3, #20
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800292e:	e054      	b.n	80029da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d050      	beq.n	80029da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002938:	f7fe fbee 	bl	8001118 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	429a      	cmp	r2, r3
 8002946:	d902      	bls.n	800294e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d13d      	bne.n	80029ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800295c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002966:	d111      	bne.n	800298c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002970:	d004      	beq.n	800297c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d107      	bne.n	800298c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002994:	d10f      	bne.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e017      	b.n	80029fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d19b      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000

08002a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1c:	d111      	bne.n	8002a42 <SPI_EndRxTransaction+0x3a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	d004      	beq.n	8002a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d107      	bne.n	8002a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d12a      	bne.n	8002aa2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d012      	beq.n	8002a7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff ff49 	bl	80028f8 <SPI_WaitFlagStateUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02d      	beq.n	8002ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e026      	b.n	8002aca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2101      	movs	r1, #1
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ff36 	bl	80028f8 <SPI_WaitFlagStateUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e013      	b.n	8002aca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2101      	movs	r1, #1
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff23 	bl	80028f8 <SPI_WaitFlagStateUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e000      	b.n	8002aca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2102      	movs	r1, #2
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ff04 	bl	80028f8 <SPI_WaitFlagStateUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e032      	b.n	8002b6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <SPI_EndRxTxTransaction+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <SPI_EndRxTxTransaction+0xa4>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0d5b      	lsrs	r3, r3, #21
 8002b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b24:	d112      	bne.n	8002b4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fee1 	bl	80028f8 <SPI_WaitFlagStateUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d016      	beq.n	8002b6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e00f      	b.n	8002b6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d0f2      	beq.n	8002b4c <SPI_EndRxTxTransaction+0x78>
 8002b66:	e000      	b.n	8002b6a <SPI_EndRxTxTransaction+0x96>
        break;
 8002b68:	bf00      	nop
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000000 	.word	0x20000000
 8002b78:	165e9f81 	.word	0x165e9f81

08002b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e041      	b.n	8002c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fa00 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f000 fa88 	bl	80030d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04e      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d01d      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_TIM_Base_Start_IT+0xd0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x80>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d010      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	e007      	b.n	8002cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40010400 	.word	0x40010400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40001800 	.word	0x40001800

08002cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d020      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0202 	mvn.w	r2, #2
 8002d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9a3 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f995 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f9a6 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d020      	beq.n	8002dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0204 	mvn.w	r2, #4
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f97d 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f96f 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f980 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d020      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0208 	mvn.w	r2, #8
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f957 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f949 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f95a 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d020      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0210 	mvn.w	r2, #16
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f931 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f923 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f934 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0201 	mvn.w	r2, #1
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f901 	bl	800306a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa72 	bl	8003370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f905 	bl	80030ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0220 	mvn.w	r2, #32
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fa44 	bl	800335c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0b4      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x186>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d03e      	beq.n	8002fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	f200 8087 	bhi.w	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	f000 8086 	beq.w	800304e <HAL_TIM_ConfigClockSource+0x172>
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d87f      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b70      	cmp	r3, #112	; 0x70
 8002f4a:	d01a      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0xa6>
 8002f4c:	2b70      	cmp	r3, #112	; 0x70
 8002f4e:	d87b      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b60      	cmp	r3, #96	; 0x60
 8002f52:	d050      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f54:	2b60      	cmp	r3, #96	; 0x60
 8002f56:	d877      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f5c:	2b50      	cmp	r3, #80	; 0x50
 8002f5e:	d873      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d058      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x13a>
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d86f      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b30      	cmp	r3, #48	; 0x30
 8002f6a:	d064      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x15a>
 8002f6c:	2b30      	cmp	r3, #48	; 0x30
 8002f6e:	d86b      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d060      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x15a>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d867      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05c      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x15a>
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d05a      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x15a>
 8002f80:	e062      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f92:	f000 f9c3 	bl	800331c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	609a      	str	r2, [r3, #8]
      break;
 8002fae:	e04f      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	f000 f9ac 	bl	800331c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd2:	609a      	str	r2, [r3, #8]
      break;
 8002fd4:	e03c      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 f920 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2150      	movs	r1, #80	; 0x50
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f979 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e02c      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003002:	461a      	mov	r2, r3
 8003004:	f000 f93f 	bl	8003286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2160      	movs	r1, #96	; 0x60
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f969 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 8003014:	e01c      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	461a      	mov	r2, r3
 8003024:	f000 f900 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f959 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 8003034:	e00c      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f000 f950 	bl	80032e6 <TIM_ITRx_SetConfig>
      break;
 8003046:	e003      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e000      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800304e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a46      	ldr	r2, [pc, #280]	; (80031fc <TIM_Base_SetConfig+0x12c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d00f      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a43      	ldr	r2, [pc, #268]	; (8003200 <TIM_Base_SetConfig+0x130>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a42      	ldr	r2, [pc, #264]	; (8003204 <TIM_Base_SetConfig+0x134>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <TIM_Base_SetConfig+0x138>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a40      	ldr	r2, [pc, #256]	; (800320c <TIM_Base_SetConfig+0x13c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d108      	bne.n	8003122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a35      	ldr	r2, [pc, #212]	; (80031fc <TIM_Base_SetConfig+0x12c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d027      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a32      	ldr	r2, [pc, #200]	; (8003200 <TIM_Base_SetConfig+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d023      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a31      	ldr	r2, [pc, #196]	; (8003204 <TIM_Base_SetConfig+0x134>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a30      	ldr	r2, [pc, #192]	; (8003208 <TIM_Base_SetConfig+0x138>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2f      	ldr	r2, [pc, #188]	; (800320c <TIM_Base_SetConfig+0x13c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d017      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <TIM_Base_SetConfig+0x140>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <TIM_Base_SetConfig+0x144>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2c      	ldr	r2, [pc, #176]	; (8003218 <TIM_Base_SetConfig+0x148>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a2b      	ldr	r2, [pc, #172]	; (800321c <TIM_Base_SetConfig+0x14c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2a      	ldr	r2, [pc, #168]	; (8003220 <TIM_Base_SetConfig+0x150>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <TIM_Base_SetConfig+0x154>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <TIM_Base_SetConfig+0x12c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0xf8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <TIM_Base_SetConfig+0x13c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d103      	bne.n	80031d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]
  }
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	40001800 	.word	0x40001800
 8003220:	40001c00 	.word	0x40001c00
 8003224:	40002000 	.word	0x40002000

08003228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f023 0201 	bic.w	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 030a 	bic.w	r3, r3, #10
 8003264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003286:	b480      	push	{r7}
 8003288:	b087      	sub	sp, #28
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f023 0210 	bic.w	r2, r3, #16
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	031b      	lsls	r3, r3, #12
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	f043 0307 	orr.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	021a      	lsls	r2, r3, #8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	431a      	orrs	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <std>:
 8003384:	2300      	movs	r3, #0
 8003386:	b510      	push	{r4, lr}
 8003388:	4604      	mov	r4, r0
 800338a:	e9c0 3300 	strd	r3, r3, [r0]
 800338e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003392:	6083      	str	r3, [r0, #8]
 8003394:	8181      	strh	r1, [r0, #12]
 8003396:	6643      	str	r3, [r0, #100]	; 0x64
 8003398:	81c2      	strh	r2, [r0, #14]
 800339a:	6183      	str	r3, [r0, #24]
 800339c:	4619      	mov	r1, r3
 800339e:	2208      	movs	r2, #8
 80033a0:	305c      	adds	r0, #92	; 0x5c
 80033a2:	f000 f906 	bl	80035b2 <memset>
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <std+0x58>)
 80033a8:	6263      	str	r3, [r4, #36]	; 0x24
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <std+0x5c>)
 80033ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <std+0x60>)
 80033b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <std+0x64>)
 80033b4:	6323      	str	r3, [r4, #48]	; 0x30
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <std+0x68>)
 80033b8:	6224      	str	r4, [r4, #32]
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d006      	beq.n	80033cc <std+0x48>
 80033be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033c2:	4294      	cmp	r4, r2
 80033c4:	d002      	beq.n	80033cc <std+0x48>
 80033c6:	33d0      	adds	r3, #208	; 0xd0
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d105      	bne.n	80033d8 <std+0x54>
 80033cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d4:	f000 b966 	b.w	80036a4 <__retarget_lock_init_recursive>
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	0800352d 	.word	0x0800352d
 80033e0:	0800354f 	.word	0x0800354f
 80033e4:	08003587 	.word	0x08003587
 80033e8:	080035ab 	.word	0x080035ab
 80033ec:	20000150 	.word	0x20000150

080033f0 <stdio_exit_handler>:
 80033f0:	4a02      	ldr	r2, [pc, #8]	; (80033fc <stdio_exit_handler+0xc>)
 80033f2:	4903      	ldr	r1, [pc, #12]	; (8003400 <stdio_exit_handler+0x10>)
 80033f4:	4803      	ldr	r0, [pc, #12]	; (8003404 <stdio_exit_handler+0x14>)
 80033f6:	f000 b869 	b.w	80034cc <_fwalk_sglue>
 80033fa:	bf00      	nop
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	08003f51 	.word	0x08003f51
 8003404:	20000018 	.word	0x20000018

08003408 <cleanup_stdio>:
 8003408:	6841      	ldr	r1, [r0, #4]
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <cleanup_stdio+0x34>)
 800340c:	4299      	cmp	r1, r3
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
 8003412:	d001      	beq.n	8003418 <cleanup_stdio+0x10>
 8003414:	f000 fd9c 	bl	8003f50 <_fflush_r>
 8003418:	68a1      	ldr	r1, [r4, #8]
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <cleanup_stdio+0x38>)
 800341c:	4299      	cmp	r1, r3
 800341e:	d002      	beq.n	8003426 <cleanup_stdio+0x1e>
 8003420:	4620      	mov	r0, r4
 8003422:	f000 fd95 	bl	8003f50 <_fflush_r>
 8003426:	68e1      	ldr	r1, [r4, #12]
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <cleanup_stdio+0x3c>)
 800342a:	4299      	cmp	r1, r3
 800342c:	d004      	beq.n	8003438 <cleanup_stdio+0x30>
 800342e:	4620      	mov	r0, r4
 8003430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003434:	f000 bd8c 	b.w	8003f50 <_fflush_r>
 8003438:	bd10      	pop	{r4, pc}
 800343a:	bf00      	nop
 800343c:	20000150 	.word	0x20000150
 8003440:	200001b8 	.word	0x200001b8
 8003444:	20000220 	.word	0x20000220

08003448 <global_stdio_init.part.0>:
 8003448:	b510      	push	{r4, lr}
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <global_stdio_init.part.0+0x30>)
 800344c:	4c0b      	ldr	r4, [pc, #44]	; (800347c <global_stdio_init.part.0+0x34>)
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <global_stdio_init.part.0+0x38>)
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	4620      	mov	r0, r4
 8003454:	2200      	movs	r2, #0
 8003456:	2104      	movs	r1, #4
 8003458:	f7ff ff94 	bl	8003384 <std>
 800345c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003460:	2201      	movs	r2, #1
 8003462:	2109      	movs	r1, #9
 8003464:	f7ff ff8e 	bl	8003384 <std>
 8003468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800346c:	2202      	movs	r2, #2
 800346e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003472:	2112      	movs	r1, #18
 8003474:	f7ff bf86 	b.w	8003384 <std>
 8003478:	20000288 	.word	0x20000288
 800347c:	20000150 	.word	0x20000150
 8003480:	080033f1 	.word	0x080033f1

08003484 <__sfp_lock_acquire>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__sfp_lock_acquire+0x8>)
 8003486:	f000 b90e 	b.w	80036a6 <__retarget_lock_acquire_recursive>
 800348a:	bf00      	nop
 800348c:	20000291 	.word	0x20000291

08003490 <__sfp_lock_release>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__sfp_lock_release+0x8>)
 8003492:	f000 b909 	b.w	80036a8 <__retarget_lock_release_recursive>
 8003496:	bf00      	nop
 8003498:	20000291 	.word	0x20000291

0800349c <__sinit>:
 800349c:	b510      	push	{r4, lr}
 800349e:	4604      	mov	r4, r0
 80034a0:	f7ff fff0 	bl	8003484 <__sfp_lock_acquire>
 80034a4:	6a23      	ldr	r3, [r4, #32]
 80034a6:	b11b      	cbz	r3, 80034b0 <__sinit+0x14>
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	f7ff bff0 	b.w	8003490 <__sfp_lock_release>
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <__sinit+0x28>)
 80034b2:	6223      	str	r3, [r4, #32]
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <__sinit+0x2c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f5      	bne.n	80034a8 <__sinit+0xc>
 80034bc:	f7ff ffc4 	bl	8003448 <global_stdio_init.part.0>
 80034c0:	e7f2      	b.n	80034a8 <__sinit+0xc>
 80034c2:	bf00      	nop
 80034c4:	08003409 	.word	0x08003409
 80034c8:	20000288 	.word	0x20000288

080034cc <_fwalk_sglue>:
 80034cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d0:	4607      	mov	r7, r0
 80034d2:	4688      	mov	r8, r1
 80034d4:	4614      	mov	r4, r2
 80034d6:	2600      	movs	r6, #0
 80034d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034dc:	f1b9 0901 	subs.w	r9, r9, #1
 80034e0:	d505      	bpl.n	80034ee <_fwalk_sglue+0x22>
 80034e2:	6824      	ldr	r4, [r4, #0]
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d1f7      	bne.n	80034d8 <_fwalk_sglue+0xc>
 80034e8:	4630      	mov	r0, r6
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	89ab      	ldrh	r3, [r5, #12]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d907      	bls.n	8003504 <_fwalk_sglue+0x38>
 80034f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034f8:	3301      	adds	r3, #1
 80034fa:	d003      	beq.n	8003504 <_fwalk_sglue+0x38>
 80034fc:	4629      	mov	r1, r5
 80034fe:	4638      	mov	r0, r7
 8003500:	47c0      	blx	r8
 8003502:	4306      	orrs	r6, r0
 8003504:	3568      	adds	r5, #104	; 0x68
 8003506:	e7e9      	b.n	80034dc <_fwalk_sglue+0x10>

08003508 <iprintf>:
 8003508:	b40f      	push	{r0, r1, r2, r3}
 800350a:	b507      	push	{r0, r1, r2, lr}
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <iprintf+0x20>)
 800350e:	ab04      	add	r3, sp, #16
 8003510:	6808      	ldr	r0, [r1, #0]
 8003512:	f853 2b04 	ldr.w	r2, [r3], #4
 8003516:	6881      	ldr	r1, [r0, #8]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	f000 f9e9 	bl	80038f0 <_vfiprintf_r>
 800351e:	b003      	add	sp, #12
 8003520:	f85d eb04 	ldr.w	lr, [sp], #4
 8003524:	b004      	add	sp, #16
 8003526:	4770      	bx	lr
 8003528:	20000064 	.word	0x20000064

0800352c <__sread>:
 800352c:	b510      	push	{r4, lr}
 800352e:	460c      	mov	r4, r1
 8003530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003534:	f000 f868 	bl	8003608 <_read_r>
 8003538:	2800      	cmp	r0, #0
 800353a:	bfab      	itete	ge
 800353c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800353e:	89a3      	ldrhlt	r3, [r4, #12]
 8003540:	181b      	addge	r3, r3, r0
 8003542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003546:	bfac      	ite	ge
 8003548:	6563      	strge	r3, [r4, #84]	; 0x54
 800354a:	81a3      	strhlt	r3, [r4, #12]
 800354c:	bd10      	pop	{r4, pc}

0800354e <__swrite>:
 800354e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003552:	461f      	mov	r7, r3
 8003554:	898b      	ldrh	r3, [r1, #12]
 8003556:	05db      	lsls	r3, r3, #23
 8003558:	4605      	mov	r5, r0
 800355a:	460c      	mov	r4, r1
 800355c:	4616      	mov	r6, r2
 800355e:	d505      	bpl.n	800356c <__swrite+0x1e>
 8003560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003564:	2302      	movs	r3, #2
 8003566:	2200      	movs	r2, #0
 8003568:	f000 f83c 	bl	80035e4 <_lseek_r>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	4632      	mov	r2, r6
 800357a:	463b      	mov	r3, r7
 800357c:	4628      	mov	r0, r5
 800357e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003582:	f000 b853 	b.w	800362c <_write_r>

08003586 <__sseek>:
 8003586:	b510      	push	{r4, lr}
 8003588:	460c      	mov	r4, r1
 800358a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358e:	f000 f829 	bl	80035e4 <_lseek_r>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	bf15      	itete	ne
 8003598:	6560      	strne	r0, [r4, #84]	; 0x54
 800359a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800359e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035a2:	81a3      	strheq	r3, [r4, #12]
 80035a4:	bf18      	it	ne
 80035a6:	81a3      	strhne	r3, [r4, #12]
 80035a8:	bd10      	pop	{r4, pc}

080035aa <__sclose>:
 80035aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ae:	f000 b809 	b.w	80035c4 <_close_r>

080035b2 <memset>:
 80035b2:	4402      	add	r2, r0
 80035b4:	4603      	mov	r3, r0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d100      	bne.n	80035bc <memset+0xa>
 80035ba:	4770      	bx	lr
 80035bc:	f803 1b01 	strb.w	r1, [r3], #1
 80035c0:	e7f9      	b.n	80035b6 <memset+0x4>
	...

080035c4 <_close_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d06      	ldr	r5, [pc, #24]	; (80035e0 <_close_r+0x1c>)
 80035c8:	2300      	movs	r3, #0
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	f7fd fc31 	bl	8000e36 <_close>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_close_r+0x1a>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	b103      	cbz	r3, 80035de <_close_r+0x1a>
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	2000028c 	.word	0x2000028c

080035e4 <_lseek_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	4d07      	ldr	r5, [pc, #28]	; (8003604 <_lseek_r+0x20>)
 80035e8:	4604      	mov	r4, r0
 80035ea:	4608      	mov	r0, r1
 80035ec:	4611      	mov	r1, r2
 80035ee:	2200      	movs	r2, #0
 80035f0:	602a      	str	r2, [r5, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f7fd fc46 	bl	8000e84 <_lseek>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_lseek_r+0x1e>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_lseek_r+0x1e>
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	2000028c 	.word	0x2000028c

08003608 <_read_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4d07      	ldr	r5, [pc, #28]	; (8003628 <_read_r+0x20>)
 800360c:	4604      	mov	r4, r0
 800360e:	4608      	mov	r0, r1
 8003610:	4611      	mov	r1, r2
 8003612:	2200      	movs	r2, #0
 8003614:	602a      	str	r2, [r5, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f7fd fbf0 	bl	8000dfc <_read>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_read_r+0x1e>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_read_r+0x1e>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	2000028c 	.word	0x2000028c

0800362c <_write_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4d07      	ldr	r5, [pc, #28]	; (800364c <_write_r+0x20>)
 8003630:	4604      	mov	r4, r0
 8003632:	4608      	mov	r0, r1
 8003634:	4611      	mov	r1, r2
 8003636:	2200      	movs	r2, #0
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f7fd f894 	bl	8000768 <_write>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_write_r+0x1e>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_write_r+0x1e>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	2000028c 	.word	0x2000028c

08003650 <__errno>:
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <__errno+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000064 	.word	0x20000064

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4d0d      	ldr	r5, [pc, #52]	; (8003694 <__libc_init_array+0x38>)
 8003660:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <__libc_init_array+0x3c>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	2600      	movs	r6, #0
 8003668:	42a6      	cmp	r6, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	4d0b      	ldr	r5, [pc, #44]	; (800369c <__libc_init_array+0x40>)
 800366e:	4c0c      	ldr	r4, [pc, #48]	; (80036a0 <__libc_init_array+0x44>)
 8003670:	f000 fdc0 	bl	80041f4 <_init>
 8003674:	1b64      	subs	r4, r4, r5
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	2600      	movs	r6, #0
 800367a:	42a6      	cmp	r6, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f855 3b04 	ldr.w	r3, [r5], #4
 8003684:	4798      	blx	r3
 8003686:	3601      	adds	r6, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	f855 3b04 	ldr.w	r3, [r5], #4
 800368e:	4798      	blx	r3
 8003690:	3601      	adds	r6, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	0800426c 	.word	0x0800426c
 8003698:	0800426c 	.word	0x0800426c
 800369c:	0800426c 	.word	0x0800426c
 80036a0:	08004270 	.word	0x08004270

080036a4 <__retarget_lock_init_recursive>:
 80036a4:	4770      	bx	lr

080036a6 <__retarget_lock_acquire_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <__retarget_lock_release_recursive>:
 80036a8:	4770      	bx	lr
	...

080036ac <_free_r>:
 80036ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d044      	beq.n	800373c <_free_r+0x90>
 80036b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b6:	9001      	str	r0, [sp, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f1a1 0404 	sub.w	r4, r1, #4
 80036be:	bfb8      	it	lt
 80036c0:	18e4      	addlt	r4, r4, r3
 80036c2:	f000 f8df 	bl	8003884 <__malloc_lock>
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <_free_r+0x94>)
 80036c8:	9801      	ldr	r0, [sp, #4]
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	b933      	cbnz	r3, 80036dc <_free_r+0x30>
 80036ce:	6063      	str	r3, [r4, #4]
 80036d0:	6014      	str	r4, [r2, #0]
 80036d2:	b003      	add	sp, #12
 80036d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036d8:	f000 b8da 	b.w	8003890 <__malloc_unlock>
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d908      	bls.n	80036f2 <_free_r+0x46>
 80036e0:	6825      	ldr	r5, [r4, #0]
 80036e2:	1961      	adds	r1, r4, r5
 80036e4:	428b      	cmp	r3, r1
 80036e6:	bf01      	itttt	eq
 80036e8:	6819      	ldreq	r1, [r3, #0]
 80036ea:	685b      	ldreq	r3, [r3, #4]
 80036ec:	1949      	addeq	r1, r1, r5
 80036ee:	6021      	streq	r1, [r4, #0]
 80036f0:	e7ed      	b.n	80036ce <_free_r+0x22>
 80036f2:	461a      	mov	r2, r3
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b10b      	cbz	r3, 80036fc <_free_r+0x50>
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d9fa      	bls.n	80036f2 <_free_r+0x46>
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	1855      	adds	r5, r2, r1
 8003700:	42a5      	cmp	r5, r4
 8003702:	d10b      	bne.n	800371c <_free_r+0x70>
 8003704:	6824      	ldr	r4, [r4, #0]
 8003706:	4421      	add	r1, r4
 8003708:	1854      	adds	r4, r2, r1
 800370a:	42a3      	cmp	r3, r4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	d1e0      	bne.n	80036d2 <_free_r+0x26>
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	6053      	str	r3, [r2, #4]
 8003716:	440c      	add	r4, r1
 8003718:	6014      	str	r4, [r2, #0]
 800371a:	e7da      	b.n	80036d2 <_free_r+0x26>
 800371c:	d902      	bls.n	8003724 <_free_r+0x78>
 800371e:	230c      	movs	r3, #12
 8003720:	6003      	str	r3, [r0, #0]
 8003722:	e7d6      	b.n	80036d2 <_free_r+0x26>
 8003724:	6825      	ldr	r5, [r4, #0]
 8003726:	1961      	adds	r1, r4, r5
 8003728:	428b      	cmp	r3, r1
 800372a:	bf04      	itt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	bf04      	itt	eq
 8003734:	1949      	addeq	r1, r1, r5
 8003736:	6021      	streq	r1, [r4, #0]
 8003738:	6054      	str	r4, [r2, #4]
 800373a:	e7ca      	b.n	80036d2 <_free_r+0x26>
 800373c:	b003      	add	sp, #12
 800373e:	bd30      	pop	{r4, r5, pc}
 8003740:	20000294 	.word	0x20000294

08003744 <sbrk_aligned>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4e0e      	ldr	r6, [pc, #56]	; (8003780 <sbrk_aligned+0x3c>)
 8003748:	460c      	mov	r4, r1
 800374a:	6831      	ldr	r1, [r6, #0]
 800374c:	4605      	mov	r5, r0
 800374e:	b911      	cbnz	r1, 8003756 <sbrk_aligned+0x12>
 8003750:	f000 fcbc 	bl	80040cc <_sbrk_r>
 8003754:	6030      	str	r0, [r6, #0]
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	f000 fcb7 	bl	80040cc <_sbrk_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d00a      	beq.n	8003778 <sbrk_aligned+0x34>
 8003762:	1cc4      	adds	r4, r0, #3
 8003764:	f024 0403 	bic.w	r4, r4, #3
 8003768:	42a0      	cmp	r0, r4
 800376a:	d007      	beq.n	800377c <sbrk_aligned+0x38>
 800376c:	1a21      	subs	r1, r4, r0
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fcac 	bl	80040cc <_sbrk_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d101      	bne.n	800377c <sbrk_aligned+0x38>
 8003778:	f04f 34ff 	mov.w	r4, #4294967295
 800377c:	4620      	mov	r0, r4
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	20000298 	.word	0x20000298

08003784 <_malloc_r>:
 8003784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003788:	1ccd      	adds	r5, r1, #3
 800378a:	f025 0503 	bic.w	r5, r5, #3
 800378e:	3508      	adds	r5, #8
 8003790:	2d0c      	cmp	r5, #12
 8003792:	bf38      	it	cc
 8003794:	250c      	movcc	r5, #12
 8003796:	2d00      	cmp	r5, #0
 8003798:	4607      	mov	r7, r0
 800379a:	db01      	blt.n	80037a0 <_malloc_r+0x1c>
 800379c:	42a9      	cmp	r1, r5
 800379e:	d905      	bls.n	80037ac <_malloc_r+0x28>
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	2600      	movs	r6, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003880 <_malloc_r+0xfc>
 80037b0:	f000 f868 	bl	8003884 <__malloc_lock>
 80037b4:	f8d8 3000 	ldr.w	r3, [r8]
 80037b8:	461c      	mov	r4, r3
 80037ba:	bb5c      	cbnz	r4, 8003814 <_malloc_r+0x90>
 80037bc:	4629      	mov	r1, r5
 80037be:	4638      	mov	r0, r7
 80037c0:	f7ff ffc0 	bl	8003744 <sbrk_aligned>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	4604      	mov	r4, r0
 80037c8:	d155      	bne.n	8003876 <_malloc_r+0xf2>
 80037ca:	f8d8 4000 	ldr.w	r4, [r8]
 80037ce:	4626      	mov	r6, r4
 80037d0:	2e00      	cmp	r6, #0
 80037d2:	d145      	bne.n	8003860 <_malloc_r+0xdc>
 80037d4:	2c00      	cmp	r4, #0
 80037d6:	d048      	beq.n	800386a <_malloc_r+0xe6>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	4631      	mov	r1, r6
 80037dc:	4638      	mov	r0, r7
 80037de:	eb04 0903 	add.w	r9, r4, r3
 80037e2:	f000 fc73 	bl	80040cc <_sbrk_r>
 80037e6:	4581      	cmp	r9, r0
 80037e8:	d13f      	bne.n	800386a <_malloc_r+0xe6>
 80037ea:	6821      	ldr	r1, [r4, #0]
 80037ec:	1a6d      	subs	r5, r5, r1
 80037ee:	4629      	mov	r1, r5
 80037f0:	4638      	mov	r0, r7
 80037f2:	f7ff ffa7 	bl	8003744 <sbrk_aligned>
 80037f6:	3001      	adds	r0, #1
 80037f8:	d037      	beq.n	800386a <_malloc_r+0xe6>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	442b      	add	r3, r5
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	f8d8 3000 	ldr.w	r3, [r8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d038      	beq.n	800387a <_malloc_r+0xf6>
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	42a2      	cmp	r2, r4
 800380c:	d12b      	bne.n	8003866 <_malloc_r+0xe2>
 800380e:	2200      	movs	r2, #0
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	e00f      	b.n	8003834 <_malloc_r+0xb0>
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	1b52      	subs	r2, r2, r5
 8003818:	d41f      	bmi.n	800385a <_malloc_r+0xd6>
 800381a:	2a0b      	cmp	r2, #11
 800381c:	d917      	bls.n	800384e <_malloc_r+0xca>
 800381e:	1961      	adds	r1, r4, r5
 8003820:	42a3      	cmp	r3, r4
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	bf18      	it	ne
 8003826:	6059      	strne	r1, [r3, #4]
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	bf08      	it	eq
 800382c:	f8c8 1000 	streq.w	r1, [r8]
 8003830:	5162      	str	r2, [r4, r5]
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	4638      	mov	r0, r7
 8003836:	f104 060b 	add.w	r6, r4, #11
 800383a:	f000 f829 	bl	8003890 <__malloc_unlock>
 800383e:	f026 0607 	bic.w	r6, r6, #7
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	1af2      	subs	r2, r6, r3
 8003846:	d0ae      	beq.n	80037a6 <_malloc_r+0x22>
 8003848:	1b9b      	subs	r3, r3, r6
 800384a:	50a3      	str	r3, [r4, r2]
 800384c:	e7ab      	b.n	80037a6 <_malloc_r+0x22>
 800384e:	42a3      	cmp	r3, r4
 8003850:	6862      	ldr	r2, [r4, #4]
 8003852:	d1dd      	bne.n	8003810 <_malloc_r+0x8c>
 8003854:	f8c8 2000 	str.w	r2, [r8]
 8003858:	e7ec      	b.n	8003834 <_malloc_r+0xb0>
 800385a:	4623      	mov	r3, r4
 800385c:	6864      	ldr	r4, [r4, #4]
 800385e:	e7ac      	b.n	80037ba <_malloc_r+0x36>
 8003860:	4634      	mov	r4, r6
 8003862:	6876      	ldr	r6, [r6, #4]
 8003864:	e7b4      	b.n	80037d0 <_malloc_r+0x4c>
 8003866:	4613      	mov	r3, r2
 8003868:	e7cc      	b.n	8003804 <_malloc_r+0x80>
 800386a:	230c      	movs	r3, #12
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4638      	mov	r0, r7
 8003870:	f000 f80e 	bl	8003890 <__malloc_unlock>
 8003874:	e797      	b.n	80037a6 <_malloc_r+0x22>
 8003876:	6025      	str	r5, [r4, #0]
 8003878:	e7dc      	b.n	8003834 <_malloc_r+0xb0>
 800387a:	605b      	str	r3, [r3, #4]
 800387c:	deff      	udf	#255	; 0xff
 800387e:	bf00      	nop
 8003880:	20000294 	.word	0x20000294

08003884 <__malloc_lock>:
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <__malloc_lock+0x8>)
 8003886:	f7ff bf0e 	b.w	80036a6 <__retarget_lock_acquire_recursive>
 800388a:	bf00      	nop
 800388c:	20000290 	.word	0x20000290

08003890 <__malloc_unlock>:
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <__malloc_unlock+0x8>)
 8003892:	f7ff bf09 	b.w	80036a8 <__retarget_lock_release_recursive>
 8003896:	bf00      	nop
 8003898:	20000290 	.word	0x20000290

0800389c <__sfputc_r>:
 800389c:	6893      	ldr	r3, [r2, #8]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	b410      	push	{r4}
 80038a4:	6093      	str	r3, [r2, #8]
 80038a6:	da08      	bge.n	80038ba <__sfputc_r+0x1e>
 80038a8:	6994      	ldr	r4, [r2, #24]
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	db01      	blt.n	80038b2 <__sfputc_r+0x16>
 80038ae:	290a      	cmp	r1, #10
 80038b0:	d103      	bne.n	80038ba <__sfputc_r+0x1e>
 80038b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038b6:	f000 bb73 	b.w	8003fa0 <__swbuf_r>
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	1c58      	adds	r0, r3, #1
 80038be:	6010      	str	r0, [r2, #0]
 80038c0:	7019      	strb	r1, [r3, #0]
 80038c2:	4608      	mov	r0, r1
 80038c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <__sfputs_r>:
 80038ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038cc:	4606      	mov	r6, r0
 80038ce:	460f      	mov	r7, r1
 80038d0:	4614      	mov	r4, r2
 80038d2:	18d5      	adds	r5, r2, r3
 80038d4:	42ac      	cmp	r4, r5
 80038d6:	d101      	bne.n	80038dc <__sfputs_r+0x12>
 80038d8:	2000      	movs	r0, #0
 80038da:	e007      	b.n	80038ec <__sfputs_r+0x22>
 80038dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e0:	463a      	mov	r2, r7
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff ffda 	bl	800389c <__sfputc_r>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d1f3      	bne.n	80038d4 <__sfputs_r+0xa>
 80038ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038f0 <_vfiprintf_r>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	460d      	mov	r5, r1
 80038f6:	b09d      	sub	sp, #116	; 0x74
 80038f8:	4614      	mov	r4, r2
 80038fa:	4698      	mov	r8, r3
 80038fc:	4606      	mov	r6, r0
 80038fe:	b118      	cbz	r0, 8003908 <_vfiprintf_r+0x18>
 8003900:	6a03      	ldr	r3, [r0, #32]
 8003902:	b90b      	cbnz	r3, 8003908 <_vfiprintf_r+0x18>
 8003904:	f7ff fdca 	bl	800349c <__sinit>
 8003908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800390a:	07d9      	lsls	r1, r3, #31
 800390c:	d405      	bmi.n	800391a <_vfiprintf_r+0x2a>
 800390e:	89ab      	ldrh	r3, [r5, #12]
 8003910:	059a      	lsls	r2, r3, #22
 8003912:	d402      	bmi.n	800391a <_vfiprintf_r+0x2a>
 8003914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003916:	f7ff fec6 	bl	80036a6 <__retarget_lock_acquire_recursive>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	d501      	bpl.n	8003924 <_vfiprintf_r+0x34>
 8003920:	692b      	ldr	r3, [r5, #16]
 8003922:	b99b      	cbnz	r3, 800394c <_vfiprintf_r+0x5c>
 8003924:	4629      	mov	r1, r5
 8003926:	4630      	mov	r0, r6
 8003928:	f000 fb78 	bl	800401c <__swsetup_r>
 800392c:	b170      	cbz	r0, 800394c <_vfiprintf_r+0x5c>
 800392e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003930:	07dc      	lsls	r4, r3, #31
 8003932:	d504      	bpl.n	800393e <_vfiprintf_r+0x4e>
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	b01d      	add	sp, #116	; 0x74
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	0598      	lsls	r0, r3, #22
 8003942:	d4f7      	bmi.n	8003934 <_vfiprintf_r+0x44>
 8003944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003946:	f7ff feaf 	bl	80036a8 <__retarget_lock_release_recursive>
 800394a:	e7f3      	b.n	8003934 <_vfiprintf_r+0x44>
 800394c:	2300      	movs	r3, #0
 800394e:	9309      	str	r3, [sp, #36]	; 0x24
 8003950:	2320      	movs	r3, #32
 8003952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003956:	f8cd 800c 	str.w	r8, [sp, #12]
 800395a:	2330      	movs	r3, #48	; 0x30
 800395c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003b10 <_vfiprintf_r+0x220>
 8003960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003964:	f04f 0901 	mov.w	r9, #1
 8003968:	4623      	mov	r3, r4
 800396a:	469a      	mov	sl, r3
 800396c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003970:	b10a      	cbz	r2, 8003976 <_vfiprintf_r+0x86>
 8003972:	2a25      	cmp	r2, #37	; 0x25
 8003974:	d1f9      	bne.n	800396a <_vfiprintf_r+0x7a>
 8003976:	ebba 0b04 	subs.w	fp, sl, r4
 800397a:	d00b      	beq.n	8003994 <_vfiprintf_r+0xa4>
 800397c:	465b      	mov	r3, fp
 800397e:	4622      	mov	r2, r4
 8003980:	4629      	mov	r1, r5
 8003982:	4630      	mov	r0, r6
 8003984:	f7ff ffa1 	bl	80038ca <__sfputs_r>
 8003988:	3001      	adds	r0, #1
 800398a:	f000 80a9 	beq.w	8003ae0 <_vfiprintf_r+0x1f0>
 800398e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003990:	445a      	add	r2, fp
 8003992:	9209      	str	r2, [sp, #36]	; 0x24
 8003994:	f89a 3000 	ldrb.w	r3, [sl]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a1 	beq.w	8003ae0 <_vfiprintf_r+0x1f0>
 800399e:	2300      	movs	r3, #0
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a8:	f10a 0a01 	add.w	sl, sl, #1
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	9307      	str	r3, [sp, #28]
 80039b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b4:	931a      	str	r3, [sp, #104]	; 0x68
 80039b6:	4654      	mov	r4, sl
 80039b8:	2205      	movs	r2, #5
 80039ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039be:	4854      	ldr	r0, [pc, #336]	; (8003b10 <_vfiprintf_r+0x220>)
 80039c0:	f7fc fc06 	bl	80001d0 <memchr>
 80039c4:	9a04      	ldr	r2, [sp, #16]
 80039c6:	b9d8      	cbnz	r0, 8003a00 <_vfiprintf_r+0x110>
 80039c8:	06d1      	lsls	r1, r2, #27
 80039ca:	bf44      	itt	mi
 80039cc:	2320      	movmi	r3, #32
 80039ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d2:	0713      	lsls	r3, r2, #28
 80039d4:	bf44      	itt	mi
 80039d6:	232b      	movmi	r3, #43	; 0x2b
 80039d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039dc:	f89a 3000 	ldrb.w	r3, [sl]
 80039e0:	2b2a      	cmp	r3, #42	; 0x2a
 80039e2:	d015      	beq.n	8003a10 <_vfiprintf_r+0x120>
 80039e4:	9a07      	ldr	r2, [sp, #28]
 80039e6:	4654      	mov	r4, sl
 80039e8:	2000      	movs	r0, #0
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f4:	3b30      	subs	r3, #48	; 0x30
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d94d      	bls.n	8003a96 <_vfiprintf_r+0x1a6>
 80039fa:	b1b0      	cbz	r0, 8003a2a <_vfiprintf_r+0x13a>
 80039fc:	9207      	str	r2, [sp, #28]
 80039fe:	e014      	b.n	8003a2a <_vfiprintf_r+0x13a>
 8003a00:	eba0 0308 	sub.w	r3, r0, r8
 8003a04:	fa09 f303 	lsl.w	r3, r9, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	e7d2      	b.n	80039b6 <_vfiprintf_r+0xc6>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d19      	adds	r1, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9103      	str	r1, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfbb      	ittet	lt
 8003a1c:	425b      	neglt	r3, r3
 8003a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a22:	9307      	strge	r3, [sp, #28]
 8003a24:	9307      	strlt	r3, [sp, #28]
 8003a26:	bfb8      	it	lt
 8003a28:	9204      	strlt	r2, [sp, #16]
 8003a2a:	7823      	ldrb	r3, [r4, #0]
 8003a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2e:	d10c      	bne.n	8003a4a <_vfiprintf_r+0x15a>
 8003a30:	7863      	ldrb	r3, [r4, #1]
 8003a32:	2b2a      	cmp	r3, #42	; 0x2a
 8003a34:	d134      	bne.n	8003aa0 <_vfiprintf_r+0x1b0>
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	1d1a      	adds	r2, r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	9203      	str	r2, [sp, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a46:	3402      	adds	r4, #2
 8003a48:	9305      	str	r3, [sp, #20]
 8003a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003b20 <_vfiprintf_r+0x230>
 8003a4e:	7821      	ldrb	r1, [r4, #0]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4650      	mov	r0, sl
 8003a54:	f7fc fbbc 	bl	80001d0 <memchr>
 8003a58:	b138      	cbz	r0, 8003a6a <_vfiprintf_r+0x17a>
 8003a5a:	9b04      	ldr	r3, [sp, #16]
 8003a5c:	eba0 000a 	sub.w	r0, r0, sl
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	4082      	lsls	r2, r0
 8003a64:	4313      	orrs	r3, r2
 8003a66:	3401      	adds	r4, #1
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6e:	4829      	ldr	r0, [pc, #164]	; (8003b14 <_vfiprintf_r+0x224>)
 8003a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a74:	2206      	movs	r2, #6
 8003a76:	f7fc fbab 	bl	80001d0 <memchr>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d03f      	beq.n	8003afe <_vfiprintf_r+0x20e>
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <_vfiprintf_r+0x228>)
 8003a80:	bb1b      	cbnz	r3, 8003aca <_vfiprintf_r+0x1da>
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	3307      	adds	r3, #7
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	9303      	str	r3, [sp, #12]
 8003a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a90:	443b      	add	r3, r7
 8003a92:	9309      	str	r3, [sp, #36]	; 0x24
 8003a94:	e768      	b.n	8003968 <_vfiprintf_r+0x78>
 8003a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7a6      	b.n	80039ee <_vfiprintf_r+0xfe>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	3401      	adds	r4, #1
 8003aa4:	9305      	str	r3, [sp, #20]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f04f 0c0a 	mov.w	ip, #10
 8003aac:	4620      	mov	r0, r4
 8003aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab2:	3a30      	subs	r2, #48	; 0x30
 8003ab4:	2a09      	cmp	r2, #9
 8003ab6:	d903      	bls.n	8003ac0 <_vfiprintf_r+0x1d0>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0c6      	beq.n	8003a4a <_vfiprintf_r+0x15a>
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	e7c4      	b.n	8003a4a <_vfiprintf_r+0x15a>
 8003ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e7f0      	b.n	8003aac <_vfiprintf_r+0x1bc>
 8003aca:	ab03      	add	r3, sp, #12
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	462a      	mov	r2, r5
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <_vfiprintf_r+0x22c>)
 8003ad2:	a904      	add	r1, sp, #16
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f3af 8000 	nop.w
 8003ada:	4607      	mov	r7, r0
 8003adc:	1c78      	adds	r0, r7, #1
 8003ade:	d1d6      	bne.n	8003a8e <_vfiprintf_r+0x19e>
 8003ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae2:	07d9      	lsls	r1, r3, #31
 8003ae4:	d405      	bmi.n	8003af2 <_vfiprintf_r+0x202>
 8003ae6:	89ab      	ldrh	r3, [r5, #12]
 8003ae8:	059a      	lsls	r2, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_vfiprintf_r+0x202>
 8003aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aee:	f7ff fddb 	bl	80036a8 <__retarget_lock_release_recursive>
 8003af2:	89ab      	ldrh	r3, [r5, #12]
 8003af4:	065b      	lsls	r3, r3, #25
 8003af6:	f53f af1d 	bmi.w	8003934 <_vfiprintf_r+0x44>
 8003afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afc:	e71c      	b.n	8003938 <_vfiprintf_r+0x48>
 8003afe:	ab03      	add	r3, sp, #12
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	462a      	mov	r2, r5
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <_vfiprintf_r+0x22c>)
 8003b06:	a904      	add	r1, sp, #16
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f000 f879 	bl	8003c00 <_printf_i>
 8003b0e:	e7e4      	b.n	8003ada <_vfiprintf_r+0x1ea>
 8003b10:	08004230 	.word	0x08004230
 8003b14:	0800423a 	.word	0x0800423a
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	080038cb 	.word	0x080038cb
 8003b20:	08004236 	.word	0x08004236

08003b24 <_printf_common>:
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	4616      	mov	r6, r2
 8003b2a:	4699      	mov	r9, r3
 8003b2c:	688a      	ldr	r2, [r1, #8]
 8003b2e:	690b      	ldr	r3, [r1, #16]
 8003b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bfb8      	it	lt
 8003b38:	4613      	movlt	r3, r2
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b40:	4607      	mov	r7, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	b10a      	cbz	r2, 8003b4a <_printf_common+0x26>
 8003b46:	3301      	adds	r3, #1
 8003b48:	6033      	str	r3, [r6, #0]
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	0699      	lsls	r1, r3, #26
 8003b4e:	bf42      	ittt	mi
 8003b50:	6833      	ldrmi	r3, [r6, #0]
 8003b52:	3302      	addmi	r3, #2
 8003b54:	6033      	strmi	r3, [r6, #0]
 8003b56:	6825      	ldr	r5, [r4, #0]
 8003b58:	f015 0506 	ands.w	r5, r5, #6
 8003b5c:	d106      	bne.n	8003b6c <_printf_common+0x48>
 8003b5e:	f104 0a19 	add.w	sl, r4, #25
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	6832      	ldr	r2, [r6, #0]
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	42ab      	cmp	r3, r5
 8003b6a:	dc26      	bgt.n	8003bba <_printf_common+0x96>
 8003b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b70:	1e13      	subs	r3, r2, #0
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	bf18      	it	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	0692      	lsls	r2, r2, #26
 8003b7a:	d42b      	bmi.n	8003bd4 <_printf_common+0xb0>
 8003b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d01e      	beq.n	8003bc8 <_printf_common+0xa4>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	6922      	ldr	r2, [r4, #16]
 8003b8e:	f003 0306 	and.w	r3, r3, #6
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	bf02      	ittt	eq
 8003b96:	68e5      	ldreq	r5, [r4, #12]
 8003b98:	6833      	ldreq	r3, [r6, #0]
 8003b9a:	1aed      	subeq	r5, r5, r3
 8003b9c:	68a3      	ldr	r3, [r4, #8]
 8003b9e:	bf0c      	ite	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	2500      	movne	r5, #0
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	bfc4      	itt	gt
 8003baa:	1a9b      	subgt	r3, r3, r2
 8003bac:	18ed      	addgt	r5, r5, r3
 8003bae:	2600      	movs	r6, #0
 8003bb0:	341a      	adds	r4, #26
 8003bb2:	42b5      	cmp	r5, r6
 8003bb4:	d11a      	bne.n	8003bec <_printf_common+0xc8>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e008      	b.n	8003bcc <_printf_common+0xa8>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	47c0      	blx	r8
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d103      	bne.n	8003bd0 <_printf_common+0xac>
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd0:	3501      	adds	r5, #1
 8003bd2:	e7c6      	b.n	8003b62 <_printf_common+0x3e>
 8003bd4:	18e1      	adds	r1, r4, r3
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	2030      	movs	r0, #48	; 0x30
 8003bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bde:	4422      	add	r2, r4
 8003be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be8:	3302      	adds	r3, #2
 8003bea:	e7c7      	b.n	8003b7c <_printf_common+0x58>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4622      	mov	r2, r4
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0e6      	beq.n	8003bc8 <_printf_common+0xa4>
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7d9      	b.n	8003bb2 <_printf_common+0x8e>
	...

08003c00 <_printf_i>:
 8003c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	7e0f      	ldrb	r7, [r1, #24]
 8003c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c08:	2f78      	cmp	r7, #120	; 0x78
 8003c0a:	4691      	mov	r9, r2
 8003c0c:	4680      	mov	r8, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	469a      	mov	sl, r3
 8003c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c16:	d807      	bhi.n	8003c28 <_printf_i+0x28>
 8003c18:	2f62      	cmp	r7, #98	; 0x62
 8003c1a:	d80a      	bhi.n	8003c32 <_printf_i+0x32>
 8003c1c:	2f00      	cmp	r7, #0
 8003c1e:	f000 80d4 	beq.w	8003dca <_printf_i+0x1ca>
 8003c22:	2f58      	cmp	r7, #88	; 0x58
 8003c24:	f000 80c0 	beq.w	8003da8 <_printf_i+0x1a8>
 8003c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c30:	e03a      	b.n	8003ca8 <_printf_i+0xa8>
 8003c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c36:	2b15      	cmp	r3, #21
 8003c38:	d8f6      	bhi.n	8003c28 <_printf_i+0x28>
 8003c3a:	a101      	add	r1, pc, #4	; (adr r1, 8003c40 <_printf_i+0x40>)
 8003c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c40:	08003c99 	.word	0x08003c99
 8003c44:	08003cad 	.word	0x08003cad
 8003c48:	08003c29 	.word	0x08003c29
 8003c4c:	08003c29 	.word	0x08003c29
 8003c50:	08003c29 	.word	0x08003c29
 8003c54:	08003c29 	.word	0x08003c29
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003c29 	.word	0x08003c29
 8003c60:	08003c29 	.word	0x08003c29
 8003c64:	08003c29 	.word	0x08003c29
 8003c68:	08003c29 	.word	0x08003c29
 8003c6c:	08003db1 	.word	0x08003db1
 8003c70:	08003cd9 	.word	0x08003cd9
 8003c74:	08003d6b 	.word	0x08003d6b
 8003c78:	08003c29 	.word	0x08003c29
 8003c7c:	08003c29 	.word	0x08003c29
 8003c80:	08003dd3 	.word	0x08003dd3
 8003c84:	08003c29 	.word	0x08003c29
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003c29 	.word	0x08003c29
 8003c90:	08003c29 	.word	0x08003c29
 8003c94:	08003d73 	.word	0x08003d73
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	602a      	str	r2, [r5, #0]
 8003ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e09f      	b.n	8003dec <_printf_i+0x1ec>
 8003cac:	6820      	ldr	r0, [r4, #0]
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	0607      	lsls	r7, r0, #24
 8003cb2:	f103 0104 	add.w	r1, r3, #4
 8003cb6:	6029      	str	r1, [r5, #0]
 8003cb8:	d501      	bpl.n	8003cbe <_printf_i+0xbe>
 8003cba:	681e      	ldr	r6, [r3, #0]
 8003cbc:	e003      	b.n	8003cc6 <_printf_i+0xc6>
 8003cbe:	0646      	lsls	r6, r0, #25
 8003cc0:	d5fb      	bpl.n	8003cba <_printf_i+0xba>
 8003cc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	da03      	bge.n	8003cd2 <_printf_i+0xd2>
 8003cca:	232d      	movs	r3, #45	; 0x2d
 8003ccc:	4276      	negs	r6, r6
 8003cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd2:	485a      	ldr	r0, [pc, #360]	; (8003e3c <_printf_i+0x23c>)
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	e012      	b.n	8003cfe <_printf_i+0xfe>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	6029      	str	r1, [r5, #0]
 8003ce0:	0605      	lsls	r5, r0, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xe8>
 8003ce4:	681e      	ldr	r6, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0xee>
 8003ce8:	0641      	lsls	r1, r0, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xe4>
 8003cec:	881e      	ldrh	r6, [r3, #0]
 8003cee:	4853      	ldr	r0, [pc, #332]	; (8003e3c <_printf_i+0x23c>)
 8003cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2308      	moveq	r3, #8
 8003cf6:	230a      	movne	r3, #10
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	60a5      	str	r5, [r4, #8]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	bfa2      	ittt	ge
 8003d06:	6821      	ldrge	r1, [r4, #0]
 8003d08:	f021 0104 	bicge.w	r1, r1, #4
 8003d0c:	6021      	strge	r1, [r4, #0]
 8003d0e:	b90e      	cbnz	r6, 8003d14 <_printf_i+0x114>
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	d04b      	beq.n	8003dac <_printf_i+0x1ac>
 8003d14:	4615      	mov	r5, r2
 8003d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d1e:	5dc7      	ldrb	r7, [r0, r7]
 8003d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d24:	4637      	mov	r7, r6
 8003d26:	42bb      	cmp	r3, r7
 8003d28:	460e      	mov	r6, r1
 8003d2a:	d9f4      	bls.n	8003d16 <_printf_i+0x116>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10b      	bne.n	8003d48 <_printf_i+0x148>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	07de      	lsls	r6, r3, #31
 8003d34:	d508      	bpl.n	8003d48 <_printf_i+0x148>
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	6861      	ldr	r1, [r4, #4]
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	bfde      	ittt	le
 8003d3e:	2330      	movle	r3, #48	; 0x30
 8003d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d48:	1b52      	subs	r2, r2, r5
 8003d4a:	6122      	str	r2, [r4, #16]
 8003d4c:	f8cd a000 	str.w	sl, [sp]
 8003d50:	464b      	mov	r3, r9
 8003d52:	aa03      	add	r2, sp, #12
 8003d54:	4621      	mov	r1, r4
 8003d56:	4640      	mov	r0, r8
 8003d58:	f7ff fee4 	bl	8003b24 <_printf_common>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d14a      	bne.n	8003df6 <_printf_i+0x1f6>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b004      	add	sp, #16
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	4833      	ldr	r0, [pc, #204]	; (8003e40 <_printf_i+0x240>)
 8003d74:	2778      	movs	r7, #120	; 0x78
 8003d76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	6829      	ldr	r1, [r5, #0]
 8003d7e:	061f      	lsls	r7, r3, #24
 8003d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d84:	d402      	bmi.n	8003d8c <_printf_i+0x18c>
 8003d86:	065f      	lsls	r7, r3, #25
 8003d88:	bf48      	it	mi
 8003d8a:	b2b6      	uxthmi	r6, r6
 8003d8c:	07df      	lsls	r7, r3, #31
 8003d8e:	bf48      	it	mi
 8003d90:	f043 0320 	orrmi.w	r3, r3, #32
 8003d94:	6029      	str	r1, [r5, #0]
 8003d96:	bf48      	it	mi
 8003d98:	6023      	strmi	r3, [r4, #0]
 8003d9a:	b91e      	cbnz	r6, 8003da4 <_printf_i+0x1a4>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	2310      	movs	r3, #16
 8003da6:	e7a7      	b.n	8003cf8 <_printf_i+0xf8>
 8003da8:	4824      	ldr	r0, [pc, #144]	; (8003e3c <_printf_i+0x23c>)
 8003daa:	e7e4      	b.n	8003d76 <_printf_i+0x176>
 8003dac:	4615      	mov	r5, r2
 8003dae:	e7bd      	b.n	8003d2c <_printf_i+0x12c>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	6826      	ldr	r6, [r4, #0]
 8003db4:	6961      	ldr	r1, [r4, #20]
 8003db6:	1d18      	adds	r0, r3, #4
 8003db8:	6028      	str	r0, [r5, #0]
 8003dba:	0635      	lsls	r5, r6, #24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	d501      	bpl.n	8003dc4 <_printf_i+0x1c4>
 8003dc0:	6019      	str	r1, [r3, #0]
 8003dc2:	e002      	b.n	8003dca <_printf_i+0x1ca>
 8003dc4:	0670      	lsls	r0, r6, #25
 8003dc6:	d5fb      	bpl.n	8003dc0 <_printf_i+0x1c0>
 8003dc8:	8019      	strh	r1, [r3, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	4615      	mov	r5, r2
 8003dd0:	e7bc      	b.n	8003d4c <_printf_i+0x14c>
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	681d      	ldr	r5, [r3, #0]
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7fc f9f6 	bl	80001d0 <memchr>
 8003de4:	b108      	cbz	r0, 8003dea <_printf_i+0x1ea>
 8003de6:	1b40      	subs	r0, r0, r5
 8003de8:	6060      	str	r0, [r4, #4]
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	2300      	movs	r3, #0
 8003df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df4:	e7aa      	b.n	8003d4c <_printf_i+0x14c>
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	462a      	mov	r2, r5
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	4640      	mov	r0, r8
 8003dfe:	47d0      	blx	sl
 8003e00:	3001      	adds	r0, #1
 8003e02:	d0ad      	beq.n	8003d60 <_printf_i+0x160>
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	079b      	lsls	r3, r3, #30
 8003e08:	d413      	bmi.n	8003e32 <_printf_i+0x232>
 8003e0a:	68e0      	ldr	r0, [r4, #12]
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	4298      	cmp	r0, r3
 8003e10:	bfb8      	it	lt
 8003e12:	4618      	movlt	r0, r3
 8003e14:	e7a6      	b.n	8003d64 <_printf_i+0x164>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	47d0      	blx	sl
 8003e20:	3001      	adds	r0, #1
 8003e22:	d09d      	beq.n	8003d60 <_printf_i+0x160>
 8003e24:	3501      	adds	r5, #1
 8003e26:	68e3      	ldr	r3, [r4, #12]
 8003e28:	9903      	ldr	r1, [sp, #12]
 8003e2a:	1a5b      	subs	r3, r3, r1
 8003e2c:	42ab      	cmp	r3, r5
 8003e2e:	dcf2      	bgt.n	8003e16 <_printf_i+0x216>
 8003e30:	e7eb      	b.n	8003e0a <_printf_i+0x20a>
 8003e32:	2500      	movs	r5, #0
 8003e34:	f104 0619 	add.w	r6, r4, #25
 8003e38:	e7f5      	b.n	8003e26 <_printf_i+0x226>
 8003e3a:	bf00      	nop
 8003e3c:	08004241 	.word	0x08004241
 8003e40:	08004252 	.word	0x08004252

08003e44 <__sflush_r>:
 8003e44:	898a      	ldrh	r2, [r1, #12]
 8003e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	0710      	lsls	r0, r2, #28
 8003e4e:	460c      	mov	r4, r1
 8003e50:	d458      	bmi.n	8003f04 <__sflush_r+0xc0>
 8003e52:	684b      	ldr	r3, [r1, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	dc05      	bgt.n	8003e64 <__sflush_r+0x20>
 8003e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	dc02      	bgt.n	8003e64 <__sflush_r+0x20>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	d0f9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e70:	682f      	ldr	r7, [r5, #0]
 8003e72:	6a21      	ldr	r1, [r4, #32]
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	d032      	beq.n	8003ede <__sflush_r+0x9a>
 8003e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	075a      	lsls	r2, r3, #29
 8003e7e:	d505      	bpl.n	8003e8c <__sflush_r+0x48>
 8003e80:	6863      	ldr	r3, [r4, #4]
 8003e82:	1ac0      	subs	r0, r0, r3
 8003e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e86:	b10b      	cbz	r3, 8003e8c <__sflush_r+0x48>
 8003e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e8a:	1ac0      	subs	r0, r0, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b0      	blx	r6
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	d106      	bne.n	8003eac <__sflush_r+0x68>
 8003e9e:	6829      	ldr	r1, [r5, #0]
 8003ea0:	291d      	cmp	r1, #29
 8003ea2:	d82b      	bhi.n	8003efc <__sflush_r+0xb8>
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <__sflush_r+0x108>)
 8003ea6:	410a      	asrs	r2, r1
 8003ea8:	07d6      	lsls	r6, r2, #31
 8003eaa:	d427      	bmi.n	8003efc <__sflush_r+0xb8>
 8003eac:	2200      	movs	r2, #0
 8003eae:	6062      	str	r2, [r4, #4]
 8003eb0:	04d9      	lsls	r1, r3, #19
 8003eb2:	6922      	ldr	r2, [r4, #16]
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	d504      	bpl.n	8003ec2 <__sflush_r+0x7e>
 8003eb8:	1c42      	adds	r2, r0, #1
 8003eba:	d101      	bne.n	8003ec0 <__sflush_r+0x7c>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b903      	cbnz	r3, 8003ec2 <__sflush_r+0x7e>
 8003ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ec4:	602f      	str	r7, [r5, #0]
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	d0c9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ece:	4299      	cmp	r1, r3
 8003ed0:	d002      	beq.n	8003ed8 <__sflush_r+0x94>
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f7ff fbea 	bl	80036ac <_free_r>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	6360      	str	r0, [r4, #52]	; 0x34
 8003edc:	e7c0      	b.n	8003e60 <__sflush_r+0x1c>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b0      	blx	r6
 8003ee4:	1c41      	adds	r1, r0, #1
 8003ee6:	d1c8      	bne.n	8003e7a <__sflush_r+0x36>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0c5      	beq.n	8003e7a <__sflush_r+0x36>
 8003eee:	2b1d      	cmp	r3, #29
 8003ef0:	d001      	beq.n	8003ef6 <__sflush_r+0xb2>
 8003ef2:	2b16      	cmp	r3, #22
 8003ef4:	d101      	bne.n	8003efa <__sflush_r+0xb6>
 8003ef6:	602f      	str	r7, [r5, #0]
 8003ef8:	e7b1      	b.n	8003e5e <__sflush_r+0x1a>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	e7ad      	b.n	8003e60 <__sflush_r+0x1c>
 8003f04:	690f      	ldr	r7, [r1, #16]
 8003f06:	2f00      	cmp	r7, #0
 8003f08:	d0a9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003f0a:	0793      	lsls	r3, r2, #30
 8003f0c:	680e      	ldr	r6, [r1, #0]
 8003f0e:	bf08      	it	eq
 8003f10:	694b      	ldreq	r3, [r1, #20]
 8003f12:	600f      	str	r7, [r1, #0]
 8003f14:	bf18      	it	ne
 8003f16:	2300      	movne	r3, #0
 8003f18:	eba6 0807 	sub.w	r8, r6, r7
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	f1b8 0f00 	cmp.w	r8, #0
 8003f22:	dd9c      	ble.n	8003e5e <__sflush_r+0x1a>
 8003f24:	6a21      	ldr	r1, [r4, #32]
 8003f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f28:	4643      	mov	r3, r8
 8003f2a:	463a      	mov	r2, r7
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b0      	blx	r6
 8003f30:	2800      	cmp	r0, #0
 8003f32:	dc06      	bgt.n	8003f42 <__sflush_r+0xfe>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e78e      	b.n	8003e60 <__sflush_r+0x1c>
 8003f42:	4407      	add	r7, r0
 8003f44:	eba8 0800 	sub.w	r8, r8, r0
 8003f48:	e7e9      	b.n	8003f1e <__sflush_r+0xda>
 8003f4a:	bf00      	nop
 8003f4c:	dfbffffe 	.word	0xdfbffffe

08003f50 <_fflush_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	690b      	ldr	r3, [r1, #16]
 8003f54:	4605      	mov	r5, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	b913      	cbnz	r3, 8003f60 <_fflush_r+0x10>
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	b118      	cbz	r0, 8003f6a <_fflush_r+0x1a>
 8003f62:	6a03      	ldr	r3, [r0, #32]
 8003f64:	b90b      	cbnz	r3, 8003f6a <_fflush_r+0x1a>
 8003f66:	f7ff fa99 	bl	800349c <__sinit>
 8003f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f3      	beq.n	8003f5a <_fflush_r+0xa>
 8003f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f74:	07d0      	lsls	r0, r2, #31
 8003f76:	d404      	bmi.n	8003f82 <_fflush_r+0x32>
 8003f78:	0599      	lsls	r1, r3, #22
 8003f7a:	d402      	bmi.n	8003f82 <_fflush_r+0x32>
 8003f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f7e:	f7ff fb92 	bl	80036a6 <__retarget_lock_acquire_recursive>
 8003f82:	4628      	mov	r0, r5
 8003f84:	4621      	mov	r1, r4
 8003f86:	f7ff ff5d 	bl	8003e44 <__sflush_r>
 8003f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f8c:	07da      	lsls	r2, r3, #31
 8003f8e:	4605      	mov	r5, r0
 8003f90:	d4e4      	bmi.n	8003f5c <_fflush_r+0xc>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	059b      	lsls	r3, r3, #22
 8003f96:	d4e1      	bmi.n	8003f5c <_fflush_r+0xc>
 8003f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9a:	f7ff fb85 	bl	80036a8 <__retarget_lock_release_recursive>
 8003f9e:	e7dd      	b.n	8003f5c <_fflush_r+0xc>

08003fa0 <__swbuf_r>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	460e      	mov	r6, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	b118      	cbz	r0, 8003fb2 <__swbuf_r+0x12>
 8003faa:	6a03      	ldr	r3, [r0, #32]
 8003fac:	b90b      	cbnz	r3, 8003fb2 <__swbuf_r+0x12>
 8003fae:	f7ff fa75 	bl	800349c <__sinit>
 8003fb2:	69a3      	ldr	r3, [r4, #24]
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	071a      	lsls	r2, r3, #28
 8003fba:	d525      	bpl.n	8004008 <__swbuf_r+0x68>
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	b31b      	cbz	r3, 8004008 <__swbuf_r+0x68>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	6922      	ldr	r2, [r4, #16]
 8003fc4:	1a98      	subs	r0, r3, r2
 8003fc6:	6963      	ldr	r3, [r4, #20]
 8003fc8:	b2f6      	uxtb	r6, r6
 8003fca:	4283      	cmp	r3, r0
 8003fcc:	4637      	mov	r7, r6
 8003fce:	dc04      	bgt.n	8003fda <__swbuf_r+0x3a>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7ff ffbc 	bl	8003f50 <_fflush_r>
 8003fd8:	b9e0      	cbnz	r0, 8004014 <__swbuf_r+0x74>
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	6022      	str	r2, [r4, #0]
 8003fe6:	701e      	strb	r6, [r3, #0]
 8003fe8:	6962      	ldr	r2, [r4, #20]
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d004      	beq.n	8003ffa <__swbuf_r+0x5a>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	07db      	lsls	r3, r3, #31
 8003ff4:	d506      	bpl.n	8004004 <__swbuf_r+0x64>
 8003ff6:	2e0a      	cmp	r6, #10
 8003ff8:	d104      	bne.n	8004004 <__swbuf_r+0x64>
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f7ff ffa7 	bl	8003f50 <_fflush_r>
 8004002:	b938      	cbnz	r0, 8004014 <__swbuf_r+0x74>
 8004004:	4638      	mov	r0, r7
 8004006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f806 	bl	800401c <__swsetup_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	d0d5      	beq.n	8003fc0 <__swbuf_r+0x20>
 8004014:	f04f 37ff 	mov.w	r7, #4294967295
 8004018:	e7f4      	b.n	8004004 <__swbuf_r+0x64>
	...

0800401c <__swsetup_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <__swsetup_r+0xac>)
 8004020:	4605      	mov	r5, r0
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	460c      	mov	r4, r1
 8004026:	b118      	cbz	r0, 8004030 <__swsetup_r+0x14>
 8004028:	6a03      	ldr	r3, [r0, #32]
 800402a:	b90b      	cbnz	r3, 8004030 <__swsetup_r+0x14>
 800402c:	f7ff fa36 	bl	800349c <__sinit>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004036:	0718      	lsls	r0, r3, #28
 8004038:	d422      	bmi.n	8004080 <__swsetup_r+0x64>
 800403a:	06d9      	lsls	r1, r3, #27
 800403c:	d407      	bmi.n	800404e <__swsetup_r+0x32>
 800403e:	2309      	movs	r3, #9
 8004040:	602b      	str	r3, [r5, #0]
 8004042:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004046:	81a3      	strh	r3, [r4, #12]
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e034      	b.n	80040b8 <__swsetup_r+0x9c>
 800404e:	0758      	lsls	r0, r3, #29
 8004050:	d512      	bpl.n	8004078 <__swsetup_r+0x5c>
 8004052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004054:	b141      	cbz	r1, 8004068 <__swsetup_r+0x4c>
 8004056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800405a:	4299      	cmp	r1, r3
 800405c:	d002      	beq.n	8004064 <__swsetup_r+0x48>
 800405e:	4628      	mov	r0, r5
 8004060:	f7ff fb24 	bl	80036ac <_free_r>
 8004064:	2300      	movs	r3, #0
 8004066:	6363      	str	r3, [r4, #52]	; 0x34
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	2300      	movs	r3, #0
 8004072:	6063      	str	r3, [r4, #4]
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	b94b      	cbnz	r3, 8004098 <__swsetup_r+0x7c>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d003      	beq.n	8004098 <__swsetup_r+0x7c>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 f850 	bl	8004138 <__smakebuf_r>
 8004098:	89a0      	ldrh	r0, [r4, #12]
 800409a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800409e:	f010 0301 	ands.w	r3, r0, #1
 80040a2:	d00a      	beq.n	80040ba <__swsetup_r+0x9e>
 80040a4:	2300      	movs	r3, #0
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	6963      	ldr	r3, [r4, #20]
 80040aa:	425b      	negs	r3, r3
 80040ac:	61a3      	str	r3, [r4, #24]
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b943      	cbnz	r3, 80040c4 <__swsetup_r+0xa8>
 80040b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040b6:	d1c4      	bne.n	8004042 <__swsetup_r+0x26>
 80040b8:	bd38      	pop	{r3, r4, r5, pc}
 80040ba:	0781      	lsls	r1, r0, #30
 80040bc:	bf58      	it	pl
 80040be:	6963      	ldrpl	r3, [r4, #20]
 80040c0:	60a3      	str	r3, [r4, #8]
 80040c2:	e7f4      	b.n	80040ae <__swsetup_r+0x92>
 80040c4:	2000      	movs	r0, #0
 80040c6:	e7f7      	b.n	80040b8 <__swsetup_r+0x9c>
 80040c8:	20000064 	.word	0x20000064

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4d06      	ldr	r5, [pc, #24]	; (80040e8 <_sbrk_r+0x1c>)
 80040d0:	2300      	movs	r3, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fc fee2 	bl	8000ea0 <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	2000028c 	.word	0x2000028c

080040ec <__swhatbuf_r>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	460c      	mov	r4, r1
 80040f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f4:	2900      	cmp	r1, #0
 80040f6:	b096      	sub	sp, #88	; 0x58
 80040f8:	4615      	mov	r5, r2
 80040fa:	461e      	mov	r6, r3
 80040fc:	da0d      	bge.n	800411a <__swhatbuf_r+0x2e>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	bf0c      	ite	eq
 800410a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800410e:	2340      	movne	r3, #64	; 0x40
 8004110:	2000      	movs	r0, #0
 8004112:	6031      	str	r1, [r6, #0]
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	b016      	add	sp, #88	; 0x58
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	466a      	mov	r2, sp
 800411c:	f000 f848 	bl	80041b0 <_fstat_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	dbec      	blt.n	80040fe <__swhatbuf_r+0x12>
 8004124:	9901      	ldr	r1, [sp, #4]
 8004126:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800412a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800412e:	4259      	negs	r1, r3
 8004130:	4159      	adcs	r1, r3
 8004132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004136:	e7eb      	b.n	8004110 <__swhatbuf_r+0x24>

08004138 <__smakebuf_r>:
 8004138:	898b      	ldrh	r3, [r1, #12]
 800413a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800413c:	079d      	lsls	r5, r3, #30
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	d507      	bpl.n	8004154 <__smakebuf_r+0x1c>
 8004144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	2301      	movs	r3, #1
 800414e:	6163      	str	r3, [r4, #20]
 8004150:	b002      	add	sp, #8
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	ab01      	add	r3, sp, #4
 8004156:	466a      	mov	r2, sp
 8004158:	f7ff ffc8 	bl	80040ec <__swhatbuf_r>
 800415c:	9900      	ldr	r1, [sp, #0]
 800415e:	4605      	mov	r5, r0
 8004160:	4630      	mov	r0, r6
 8004162:	f7ff fb0f 	bl	8003784 <_malloc_r>
 8004166:	b948      	cbnz	r0, 800417c <__smakebuf_r+0x44>
 8004168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d4ef      	bmi.n	8004150 <__smakebuf_r+0x18>
 8004170:	f023 0303 	bic.w	r3, r3, #3
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	e7e3      	b.n	8004144 <__smakebuf_r+0xc>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	9b00      	ldr	r3, [sp, #0]
 8004188:	6163      	str	r3, [r4, #20]
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	6120      	str	r0, [r4, #16]
 800418e:	b15b      	cbz	r3, 80041a8 <__smakebuf_r+0x70>
 8004190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f81d 	bl	80041d4 <_isatty_r>
 800419a:	b128      	cbz	r0, 80041a8 <__smakebuf_r+0x70>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	431d      	orrs	r5, r3
 80041ac:	81a5      	strh	r5, [r4, #12]
 80041ae:	e7cf      	b.n	8004150 <__smakebuf_r+0x18>

080041b0 <_fstat_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4d07      	ldr	r5, [pc, #28]	; (80041d0 <_fstat_r+0x20>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	602b      	str	r3, [r5, #0]
 80041be:	f7fc fe46 	bl	8000e4e <_fstat>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d102      	bne.n	80041cc <_fstat_r+0x1c>
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	b103      	cbz	r3, 80041cc <_fstat_r+0x1c>
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	bd38      	pop	{r3, r4, r5, pc}
 80041ce:	bf00      	nop
 80041d0:	2000028c 	.word	0x2000028c

080041d4 <_isatty_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4d06      	ldr	r5, [pc, #24]	; (80041f0 <_isatty_r+0x1c>)
 80041d8:	2300      	movs	r3, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fc fe45 	bl	8000e6e <_isatty>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_isatty_r+0x1a>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_isatty_r+0x1a>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	2000028c 	.word	0x2000028c

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
