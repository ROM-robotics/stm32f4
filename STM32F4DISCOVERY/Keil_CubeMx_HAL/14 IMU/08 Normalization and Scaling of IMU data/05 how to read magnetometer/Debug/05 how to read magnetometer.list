
05 how to read magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de4  08004de4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000254  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c160  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000234d  00000000  00000000  0002c23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009d0  00000000  00000000  0002f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ac4  00000000  00000000  0002fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fba1  00000000  00000000  000526fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd687  00000000  00000000  0006229d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d44  00000000  00000000  0012f924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00133668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d58 	.word	0x08004d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004d58 	.word	0x08004d58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000e34:	f001 f9de 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000e50:	f001 f834 	bl	8001ebc <HAL_GPIO_Init>

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	00000000 	.word	0x00000000

08000e68 <sensor2imu>:

#include "imu_data.h"
#include "stdio.h"

void sensor2imu(mpu_data icm_data, imu_norm* imu)
{
 8000e68:	b084      	sub	sp, #16
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b088      	sub	sp, #32
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000e74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float32_t norm_acc, norm_mag;
	arm_status arm_status_temp;

	arm_status_temp = arm_sqrt_f32((float32_t)icm_data.x_accel * icm_data.x_accel + (float32_t)icm_data.y_accel * icm_data.y_accel
 8000e78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e84:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ea0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ icm_data.z_accel * icm_data.z_accel, &norm_acc);
 8000eb4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000eb8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
	arm_status_temp = arm_sqrt_f32((float32_t)icm_data.x_accel * icm_data.x_accel + (float32_t)icm_data.y_accel * icm_data.y_accel
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ecc:	edc7 7a06 	vstr	s15, [r7, #24]
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	db0a      	blt.n	8000efa <sensor2imu+0x92>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000ee4:	ed97 0a06 	vldr	s0, [r7, #24]
 8000ee8:	f003 ff14 	bl	8004d14 <sqrtf>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e005      	b.n	8000f06 <sensor2imu+0x9e>
    }
    else
    {
      *pOut = 0.0f;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	77fb      	strb	r3, [r7, #31]

	if(arm_status_temp != ARM_MATH_SUCCESS)
 8000f08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <sensor2imu+0xb6>
	{
		printf("error sqrt! %d \n", arm_status_temp);
 8000f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f14:	4619      	mov	r1, r3
 8000f16:	488e      	ldr	r0, [pc, #568]	; (8001150 <sensor2imu+0x2e8>)
 8000f18:	f003 f886 	bl	8004028 <iprintf>
		while(1);
 8000f1c:	e7fe      	b.n	8000f1c <sensor2imu+0xb4>
	}
	arm_status_temp = arm_sqrt_f32((float32_t)icm_data.x_mag * icm_data.x_mag
 8000f1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (float32_t)icm_data.y_mag * icm_data.y_mag
 8000f3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f46:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f56:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (float32_t)icm_data.z_mag * icm_data.z_mag, &norm_mag);
 8000f5a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f66:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
	arm_status_temp = arm_sqrt_f32((float32_t)icm_data.x_mag * icm_data.x_mag
 8000f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7a:	edc7 7a04 	vstr	s15, [r7, #16]
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8000f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	db0a      	blt.n	8000fa6 <sensor2imu+0x13e>
      *pOut = __builtin_sqrtf(in);
 8000f90:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f94:	f003 febe 	bl	8004d14 <sqrtf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e005      	b.n	8000fb2 <sensor2imu+0x14a>
      *pOut = 0.0f;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	77fb      	strb	r3, [r7, #31]

	if(arm_status_temp != ARM_MATH_SUCCESS)
 8000fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <sensor2imu+0x162>
	{
		printf("error sqrt! %d \n", arm_status_temp);
 8000fbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4863      	ldr	r0, [pc, #396]	; (8001150 <sensor2imu+0x2e8>)
 8000fc4:	f003 f830 	bl	8004028 <iprintf>
		while(1);
 8000fc8:	e7fe      	b.n	8000fc8 <sensor2imu+0x160>
	}
	imu->ax =  ((float32_t)icm_data.y_accel) / norm_acc;
 8000fca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fd6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
	imu->ay =  ((float32_t)icm_data.x_accel) / norm_acc;
 8000fe4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffa:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->az = -((float32_t)icm_data.z_accel) / norm_acc;
 8000ffe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100a:	eef1 6a67 	vneg.f32	s13, s15
 800100e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001018:	edc3 7a02 	vstr	s15, [r3, #8]

	imu->gx =  ((float32_t)icm_data.y_gyro) * GYRO_SCALE;
 800101c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ee17 0a90 	vmov	r0, s15
 800102c:	f7ff fa84 	bl	8000538 <__aeabi_f2d>
 8001030:	a345      	add	r3, pc, #276	; (adr r3, 8001148 <sensor2imu+0x2e0>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fad7 	bl	80005e8 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <sensor2imu+0x2ec>)
 8001048:	f7ff fbf8 	bl	800083c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fcda 	bl	8000a0c <__aeabi_d2f>
 8001058:	4602      	mov	r2, r0
 800105a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105c:	619a      	str	r2, [r3, #24]
	imu->gy =  ((float32_t)icm_data.x_gyro) * GYRO_SCALE;
 800105e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ee17 0a90 	vmov	r0, s15
 800106e:	f7ff fa63 	bl	8000538 <__aeabi_f2d>
 8001072:	a335      	add	r3, pc, #212	; (adr r3, 8001148 <sensor2imu+0x2e0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fab6 	bl	80005e8 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <sensor2imu+0x2ec>)
 800108a:	f7ff fbd7 	bl	800083c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fcb9 	bl	8000a0c <__aeabi_d2f>
 800109a:	4602      	mov	r2, r0
 800109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109e:	61da      	str	r2, [r3, #28]
	imu->gz = -((float32_t)icm_data.z_gyro) * GYRO_SCALE;
 80010a0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	eef1 7a67 	vneg.f32	s15, s15
 80010b0:	ee17 3a90 	vmov	r3, s15
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa3f 	bl	8000538 <__aeabi_f2d>
 80010ba:	a323      	add	r3, pc, #140	; (adr r3, 8001148 <sensor2imu+0x2e0>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff fa92 	bl	80005e8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <sensor2imu+0x2ec>)
 80010d2:	f7ff fbb3 	bl	800083c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fc95 	bl	8000a0c <__aeabi_d2f>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e6:	621a      	str	r2, [r3, #32]

	imu->mx =  ((float32_t)icm_data.x_mag) / norm_mag;
 80010e8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fe:	edc3 7a03 	vstr	s15, [r3, #12]
	imu->my =  ((float32_t)icm_data.y_mag) / norm_mag;
 8001102:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800110e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001118:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->mz =  ((float32_t)icm_data.z_mag) / norm_mag;
 800111c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001128:	ed97 7a01 	vldr	s14, [r7, #4]
 800112c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001132:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr
 8001144:	f3af 8000 	nop.w
 8001148:	baa87bed 	.word	0xbaa87bed
 800114c:	3f31742d 	.word	0x3f31742d
 8001150:	08004d70 	.word	0x08004d70
 8001154:	40590000 	.word	0x40590000

08001158 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001160:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001164:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d013      	beq.n	8001198 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001170:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001174:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001178:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00b      	beq.n	8001198 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001180:	e000      	b.n	8001184 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001182:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f9      	beq.n	8001182 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800118e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001198:	687b      	ldr	r3, [r7, #4]
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011aa:	f000 fcdf 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ae:	f000 f809 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b2:	f7ff fdf9 	bl	8000da8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011b6:	f000 faa7 	bl	8001708 <MX_SPI2_Init>
  MX_TIM9_Init();
 80011ba:	f000 fc49 	bl	8001a50 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  mpu_init();
 80011be:	f000 f8ff 	bl	80013c0 <mpu_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0x1c>

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 ff7d 	bl	80040d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <SystemClock_Config+0xcc>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <SystemClock_Config+0xd0>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001238:	23a8      	movs	r3, #168	; 0xa8
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001240:	2307      	movs	r3, #7
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f000 ffed 	bl	8002228 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001254:	f000 f852 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125c:	2302      	movs	r3, #2
 800125e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001264:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2105      	movs	r1, #5
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fa4e 	bl	8002718 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001282:	f000 f83b 	bl	80012fc <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	; 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e009      	b.n	80012be <_write+0x26>
		ITM_SendChar(*ptr++);
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff50 	bl	8001158 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf1      	blt.n	80012aa <_write+0x12>
	return len;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <mpu_callback>:


void mpu_callback(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af02      	add	r7, sp, #8
	mpu_read_sensor(&imu_data);
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <mpu_callback+0x24>)
 80012d8:	f000 f900 	bl	80014dc <mpu_read_sensor>
	/*
	x_mag = imu_data.x_mag;
	y_mag = imu_data.y_mag;
	z_mag = imu_data.z_mag;
	*/
	sensor2imu(imu_data, &imu_norm_var);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <mpu_callback+0x24>)
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <mpu_callback+0x28>)
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	8a1a      	ldrh	r2, [r3, #16]
 80012e4:	f8ad 2000 	strh.w	r2, [sp]
 80012e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ea:	f7ff fdbd 	bl	8000e68 <sensor2imu>
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000a8 	.word	0x200000a8
 80012f8:	20000084 	.word	0x20000084

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <activate_spi2_mpu>:
int16_t x_gyro_bias, y_gyro_bias, z_gyro_bias;

static void remove_gyro_bias(void);

static void activate_spi2_mpu(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <activate_spi2_mpu+0x14>)
 8001312:	f000 ff6f 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020800 	.word	0x40020800

08001320 <deactivate_spi2_mpu>:

static void deactivate_spi2_mpu(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2101      	movs	r1, #1
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <deactivate_spi2_mpu+0x14>)
 800132a:	f000 ff63 	bl	80021f4 <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020800 	.word	0x40020800

08001338 <ak8963_write_reg>:


void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 8001348:	210c      	movs	r1, #12
 800134a:	2025      	movs	r0, #37	; 0x25
 800134c:	f000 f882 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4619      	mov	r1, r3
 8001354:	2026      	movs	r0, #38	; 0x26
 8001356:	f000 f87d 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_DATA_REG, data);
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4619      	mov	r1, r3
 800135e:	2063      	movs	r0, #99	; 0x63
 8001360:	f000 f878 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01) );
 8001364:	2181      	movs	r1, #129	; 0x81
 8001366:	2027      	movs	r0, #39	; 0x27
 8001368:	f000 f874 	bl	8001454 <mpu_write_reg>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <ak8963_read_reg>:

void ak8963_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, (0x80 | AK8963_ADDRESS) );
 8001384:	218c      	movs	r1, #140	; 0x8c
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 f864 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4619      	mov	r1, r3
 8001390:	2026      	movs	r0, #38	; 0x26
 8001392:	f000 f85f 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	2027      	movs	r0, #39	; 0x27
 80013a2:	f000 f857 	bl	8001454 <mpu_write_reg>
	HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f000 fc52 	bl	8001c50 <HAL_Delay>
	mpu_read_reg(EXT_SENS_DATA_00_REG, data, len);
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	461a      	mov	r2, r3
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	2017      	movs	r0, #23
 80013b4:	f000 f86c 	bl	8001490 <mpu_read_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <mpu_init>:
void mpu_init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];
	// GYRO configuration
	mpu_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 80013c6:	2108      	movs	r1, #8
 80013c8:	201b      	movs	r0, #27
 80013ca:	f000 f843 	bl	8001454 <mpu_write_reg>

	// ACCELERO configuration
	mpu_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 80013ce:	2108      	movs	r1, #8
 80013d0:	201c      	movs	r0, #28
 80013d2:	f000 f83f 	bl	8001454 <mpu_write_reg>

	// EXTING from sleep mode
	mpu_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 80013d6:	2101      	movs	r1, #1
 80013d8:	206b      	movs	r0, #107	; 0x6b
 80013da:	f000 f83b 	bl	8001454 <mpu_write_reg>

	// Enable I2C Master setting 400Khz
	mpu_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 80013de:	2120      	movs	r1, #32
 80013e0:	206a      	movs	r0, #106	; 0x6a
 80013e2:	f000 f837 	bl	8001454 <mpu_write_reg>
	mpu_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_400);
 80013e6:	210d      	movs	r1, #13
 80013e8:	2024      	movs	r0, #36	; 0x24
 80013ea:	f000 f833 	bl	8001454 <mpu_write_reg>

	remove_gyro_bias();
 80013ee:	f000 f915 	bl	800161c <remove_gyro_bias>

	// POWER down Magnetometer
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80013f2:	2100      	movs	r1, #0
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff ff9f 	bl	8001338 <ak8963_write_reg>
	HAL_Delay(10);
 80013fa:	200a      	movs	r0, #10
 80013fc:	f000 fc28 	bl	8001c50 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 8001400:	210f      	movs	r1, #15
 8001402:	200a      	movs	r0, #10
 8001404:	f7ff ff98 	bl	8001338 <ak8963_write_reg>
	HAL_Delay(10);
 8001408:	200a      	movs	r0, #10
 800140a:	f000 fc21 	bl	8001c50 <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 800140e:	2203      	movs	r2, #3
 8001410:	490f      	ldr	r1, [pc, #60]	; (8001450 <mpu_init+0x90>)
 8001412:	2010      	movs	r0, #16
 8001414:	f7ff ffae 	bl	8001374 <ak8963_read_reg>

	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 8001418:	2100      	movs	r1, #0
 800141a:	200a      	movs	r0, #10
 800141c:	f7ff ff8c 	bl	8001338 <ak8963_write_reg>
	HAL_Delay(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f000 fc15 	bl	8001c50 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 8001426:	2116      	movs	r1, #22
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff ff85 	bl	8001338 <ak8963_write_reg>
	HAL_Delay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f000 fc0e 	bl	8001c50 <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 8001434:	463b      	mov	r3, r7
 8001436:	2207      	movs	r2, #7
 8001438:	4619      	mov	r1, r3
 800143a:	2003      	movs	r0, #3
 800143c:	f7ff ff9a 	bl	8001374 <ak8963_read_reg>
	HAL_Delay(10);
 8001440:	200a      	movs	r0, #10
 8001442:	f000 fc05 	bl	8001c50 <HAL_Delay>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000bc 	.word	0x200000bc

08001454 <mpu_write_reg>:

void mpu_write_reg(uint8_t reg, uint8_t data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
	activate_spi2_mpu();
 8001464:	f7ff ff50 	bl	8001308 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001468:	1df9      	adds	r1, r7, #7
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	2201      	movs	r2, #1
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <mpu_write_reg+0x38>)
 8001470:	f001 fbc7 	bl	8002c02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data,1, 100);
 8001474:	1db9      	adds	r1, r7, #6
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	2201      	movs	r2, #1
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <mpu_write_reg+0x38>)
 800147c:	f001 fbc1 	bl	8002c02 <HAL_SPI_Transmit>
	deactivate_spi2_mpu();
 8001480:	f7ff ff4e 	bl	8001320 <deactivate_spi2_mpu>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000c8 	.word	0x200000c8

08001490 <mpu_read_reg>:

void mpu_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80 | reg;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	73fb      	strb	r3, [r7, #15]
	activate_spi2_mpu();
 80014aa:	f7ff ff2d 	bl	8001308 <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 80014ae:	f107 010f 	add.w	r1, r7, #15
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	2201      	movs	r2, #1
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <mpu_read_reg+0x48>)
 80014b8:	f001 fba3 	bl	8002c02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, len, 100);
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <mpu_read_reg+0x48>)
 80014c6:	f001 fcdf 	bl	8002e88 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 80014ca:	f7ff ff29 	bl	8001320 <deactivate_spi2_mpu>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000c8 	.word	0x200000c8

080014dc <mpu_read_sensor>:

void mpu_read_sensor(mpu_data *imu_data)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	uint8_t data[20];
	activate_spi2_mpu();
 80014e4:	f7ff ff10 	bl	8001308 <activate_spi2_mpu>
	uint8_t temp_reg = 0x80 | ACCEL_XOUT_H;
 80014e8:	23bb      	movs	r3, #187	; 0xbb
 80014ea:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi2, &temp_reg, 1, 100);
 80014ec:	f107 010b 	add.w	r1, r7, #11
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	2201      	movs	r2, #1
 80014f4:	4845      	ldr	r0, [pc, #276]	; (800160c <mpu_read_sensor+0x130>)
 80014f6:	f001 fb84 	bl	8002c02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 20, 100);
 80014fa:	f107 010c 	add.w	r1, r7, #12
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	2214      	movs	r2, #20
 8001502:	4842      	ldr	r0, [pc, #264]	; (800160c <mpu_read_sensor+0x130>)
 8001504:	f001 fcc0 	bl	8002e88 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 8001508:	f7ff ff0a 	bl	8001320 <deactivate_spi2_mpu>

	imu_data->x_accel = ((int16_t)data[0]<<8) + data[1];
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	b29b      	uxth	r3, r3
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b29a      	uxth	r2, r3
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21a      	sxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	801a      	strh	r2, [r3, #0]
	imu_data->y_accel = ((int16_t)data[2]<<8) + data[3];
 8001522:	7bbb      	ldrb	r3, [r7, #14]
 8001524:	b29b      	uxth	r3, r3
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b29a      	uxth	r2, r3
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	b21a      	sxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	805a      	strh	r2, [r3, #2]
	imu_data->z_accel = ((int16_t)data[4]<<8) + data[5];
 8001538:	7c3b      	ldrb	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29a      	uxth	r2, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]

	imu_data->x_gyro = (((int16_t)data[8]<<8) + data[9])   + x_gyro_bias;
 800154e:	7d3b      	ldrb	r3, [r7, #20]
 8001550:	b29b      	uxth	r3, r3
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b29a      	uxth	r2, r3
 8001556:	7d7b      	ldrb	r3, [r7, #21]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <mpu_read_sensor+0x134>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	80da      	strh	r2, [r3, #6]
	imu_data->y_gyro = (((int16_t)data[10]<<8) + data[11]) + y_gyro_bias;
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	b29b      	uxth	r3, r3
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b29a      	uxth	r2, r3
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <mpu_read_sensor+0x138>)
 8001582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	811a      	strh	r2, [r3, #8]
	imu_data->z_gyro = (((int16_t)data[12]<<8) + data[13]) + z_gyro_bias;
 8001592:	7e3b      	ldrb	r3, [r7, #24]
 8001594:	b29b      	uxth	r3, r3
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b29a      	uxth	r2, r3
 800159a:	7e7b      	ldrb	r3, [r7, #25]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <mpu_read_sensor+0x13c>)
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	815a      	strh	r2, [r3, #10]

	imu_data->x_mag = ( ((int16_t)data[15]<<8) + data[14] ) - MAG_X_BIAS;
 80015b4:	7efb      	ldrb	r3, [r7, #27]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	7ebb      	ldrb	r3, [r7, #26]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	819a      	strh	r2, [r3, #12]
	imu_data->y_mag = ( ((int16_t)data[17]<<8) + data[16] ) - MAG_Y_BIAS;
 80015d0:	7f7b      	ldrb	r3, [r7, #29]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	7f3b      	ldrb	r3, [r7, #28]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	81da      	strh	r2, [r3, #14]
	imu_data->z_mag = ( ((int16_t)data[19]<<8) + data[18] ) - MAG_Z_BIAS;
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	7fbb      	ldrb	r3, [r7, #30]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	821a      	strh	r2, [r3, #16]

	//printf("Accelero : %d, %d, and %d \n", imu_data->x_accel, imu_data->y_accel, imu_data->z_accel);
	//printf("Gyro : %d, %d, and %d \n", imu_data->x_gyro, imu_data->y_gyro, imu_data->z_gyro);
	//printf("Magneto : %d, %d, and %d \n", imu_data->x_mag, imu_data->y_mag, imu_data->z_mag);

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000c8 	.word	0x200000c8
 8001610:	200000c0 	.word	0x200000c0
 8001614:	200000c2 	.word	0x200000c2
 8001618:	200000c4 	.word	0x200000c4

0800161c <remove_gyro_bias>:

static void remove_gyro_bias(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

	int32_t x_bias = 0, y_bias = 0, z_bias = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 1000; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	e01d      	b.n	8001670 <remove_gyro_bias+0x54>
	{
		mpu_read_sensor(&imu_data);
 8001634:	482e      	ldr	r0, [pc, #184]	; (80016f0 <remove_gyro_bias+0xd4>)
 8001636:	f7ff ff51 	bl	80014dc <mpu_read_sensor>
		x_bias += (int32_t)imu_data.x_gyro;
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <remove_gyro_bias+0xd4>)
 800163c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
		y_bias += (int32_t)imu_data.y_gyro;
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <remove_gyro_bias+0xd4>)
 800164a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800164e:	461a      	mov	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4413      	add	r3, r2
 8001654:	60bb      	str	r3, [r7, #8]
		z_bias += (int32_t)imu_data.z_gyro;
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <remove_gyro_bias+0xd4>)
 8001658:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	607b      	str	r3, [r7, #4]
		HAL_Delay(2);
 8001664:	2002      	movs	r0, #2
 8001666:	f000 faf3 	bl	8001c50 <HAL_Delay>
	for(int i = 0; i < 1000; i++)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001676:	dbdd      	blt.n	8001634 <remove_gyro_bias+0x18>
	}
	x_gyro_bias =-(int16_t)(x_bias / 1000);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <remove_gyro_bias+0xd8>)
 800167c:	fb82 1203 	smull	r1, r2, r2, r3
 8001680:	1192      	asrs	r2, r2, #6
 8001682:	17db      	asrs	r3, r3, #31
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b29b      	uxth	r3, r3
 8001688:	425b      	negs	r3, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	b21a      	sxth	r2, r3
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <remove_gyro_bias+0xdc>)
 8001690:	801a      	strh	r2, [r3, #0]
	y_gyro_bias =-(int16_t)(y_bias / 1000);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <remove_gyro_bias+0xd8>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1192      	asrs	r2, r2, #6
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	425b      	negs	r3, r3
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <remove_gyro_bias+0xe0>)
 80016aa:	801a      	strh	r2, [r3, #0]
	z_gyro_bias =-(int16_t)(z_bias / 1000);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <remove_gyro_bias+0xd8>)
 80016b0:	fb82 1203 	smull	r1, r2, r2, r3
 80016b4:	1192      	asrs	r2, r2, #6
 80016b6:	17db      	asrs	r3, r3, #31
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	425b      	negs	r3, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <remove_gyro_bias+0xe4>)
 80016c4:	801a      	strh	r2, [r3, #0]
	printf("x,y,z %d, %d, %d \n", x_gyro_bias, y_gyro_bias, z_gyro_bias);
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <remove_gyro_bias+0xdc>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <remove_gyro_bias+0xe0>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <remove_gyro_bias+0xe4>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <remove_gyro_bias+0xe8>)
 80016de:	f002 fca3 	bl	8004028 <iprintf>
	HAL_Delay(100);
 80016e2:	2064      	movs	r0, #100	; 0x64
 80016e4:	f000 fab4 	bl	8001c50 <HAL_Delay>
	//mpu_write_reg(XG_OFFSET_L, (uint8_t)(x_gyro_bias));
	//mpu_write_reg(YG_OFFSET_H, (uint8_t)(y_gyro_bias >> 8));
	//mpu_write_reg(YG_OFFSET_L, (uint8_t)(y_gyro_bias));
	//mpu_write_reg(ZG_OFFSET_H, (uint8_t)(z_gyro_bias >> 8));
	//mpu_write_reg(ZG_OFFSET_L, (uint8_t)(z_gyro_bias));
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000a8 	.word	0x200000a8
 80016f4:	10624dd3 	.word	0x10624dd3
 80016f8:	200000c0 	.word	0x200000c0
 80016fc:	200000c2 	.word	0x200000c2
 8001700:	200000c4 	.word	0x200000c4
 8001704:	08004d84 	.word	0x08004d84

08001708 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_SPI2_Init+0x64>)
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <MX_SPI2_Init+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_SPI2_Init+0x64>)
 8001714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_SPI2_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_SPI2_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_SPI2_Init+0x64>)
 8001728:	2202      	movs	r2, #2
 800172a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_SPI2_Init+0x64>)
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_SPI2_Init+0x64>)
 8001734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001738:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_SPI2_Init+0x64>)
 800173c:	2228      	movs	r2, #40	; 0x28
 800173e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_SPI2_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_SPI2_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_SPI2_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_SPI2_Init+0x64>)
 8001754:	220a      	movs	r2, #10
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_SPI2_Init+0x64>)
 800175a:	f001 f9c9 	bl	8002af0 <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001764:	f7ff fdca 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000c8 	.word	0x200000c8
 8001770:	40003800 	.word	0x40003800

08001774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_SPI_MspInit+0xc0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d14a      	bne.n	800182c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_SPI_MspInit+0xc4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <HAL_SPI_MspInit+0xc8>)
 8001806:	f000 fb59 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181c:	2305      	movs	r3, #5
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_SPI_MspInit+0xcc>)
 8001828:	f000 fb48 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40003800 	.word	0x40003800
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_MspInit+0x4c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x4c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001882:	2007      	movs	r0, #7
 8001884:	f000 fad8 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001898:	e7fe      	b.n	8001898 <NMI_Handler+0x4>

0800189a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <MemManage_Handler+0x4>

080018a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e0:	f000 f996 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if( TIM9->SR & TIM_SR_UIF )
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <TIM1_BRK_TIM9_IRQHandler+0x14>
	{
		mpu_callback();
 80018f8:	f7ff fcea 	bl	80012d0 <mpu_callback>
	}
	TIM9->SR &= ~TIM_SR_UIF;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 800190a:	f001 ff87 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40014000 	.word	0x40014000
 8001918:	20000124 	.word	0x20000124

0800191c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
  }

  return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	605a      	str	r2, [r3, #4]
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_isatty>:

int _isatty(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f002 fbbe 	bl	8004170 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20020000 	.word	0x20020000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	20000120 	.word	0x20000120
 8001a28:	200002c0 	.word	0x200002c0

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SystemInit+0x20>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <SystemInit+0x20>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <MX_TIM9_Init+0x74>)
 8001a66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a6a:	22a7      	movs	r2, #167	; 0xa7
 8001a6c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a76:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a7a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001a8a:	f001 fe07 	bl	800369c <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a94:	f7ff fc32 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001aa4:	f001 ffaa 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001aae:	f7ff fc25 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <MX_TIM9_Init+0x70>)
 8001ab4:	f001 fe42 	bl	800373c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM9_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000124 	.word	0x20000124
 8001ac4:	40014000 	.word	0x40014000

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_TIM_Base_MspInit+0x48>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d115      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2018      	movs	r0, #24
 8001afc:	f000 f9a7 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b00:	2018      	movs	r0, #24
 8001b02:	f000 f9c0 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40014000 	.word	0x40014000
 8001b14:	40023800 	.word	0x40023800

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b1c:	f7ff ff86 	bl	8001a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f002 fb19 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff fb2c 	bl	80011a6 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b5c:	08004dec 	.word	0x08004dec
  ldr r2, =_sbss
 8001b60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b64:	200002bc 	.word	0x200002bc

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f94f 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fe50 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f967 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f92f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	2000016c 	.word	0x2000016c

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000016c 	.word	0x2000016c

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008

08001c98 <__NVIC_SetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e16b      	b.n	80021b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 815a 	bne.w	80021aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80b4 	beq.w	80021aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_GPIO_Init+0x310>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x314>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x226>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x318>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a50      	ldr	r2, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x31c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x320>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x324>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x328>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x32c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_GPIO_Init+0x330>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x20a>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020c6:	2308      	movs	r3, #8
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x310>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae90 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e267      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d075      	beq.n	8002332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d00c      	beq.n	800226c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d112      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226a:	d10b      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d05b      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d157      	bne.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e242      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d106      	bne.n	800229c <HAL_RCC_OscConfig+0x74>
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6f      	ldr	r2, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6c      	ldr	r2, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fcaa 	bl	8001c38 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fca6 	bl	8001c38 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e207      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fc96 	bl	8001c38 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fc92 	bl	8001c38 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1f3      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0xe8>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233e:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c7      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4937      	ldr	r1, [pc, #220]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x244>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff fc4b 	bl	8001c38 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff fc47 	bl	8001c38 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a8      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4925      	ldr	r1, [pc, #148]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x244>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc2a 	bl	8001c38 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc26 	bl	8001c38 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e187      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_RCC_OscConfig+0x248>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff fc0a 	bl	8001c38 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fc06 	bl	8001c38 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e167      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x240>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x200>
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_OscConfig+0x248>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7ff fbf3 	bl	8001c38 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e00e      	b.n	8002474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff fbef 	bl	8001c38 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d907      	bls.n	8002474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e150      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
 8002468:	40023800 	.word	0x40023800
 800246c:	42470000 	.word	0x42470000
 8002470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ea      	bne.n	8002456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8097 	beq.w	80025bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a7c      	ldr	r2, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b7a      	ldr	r3, [pc, #488]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b77      	ldr	r3, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b74      	ldr	r3, [pc, #464]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a73      	ldr	r2, [pc, #460]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fbaf 	bl	8001c38 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fbab 	bl	8001c38 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e10c      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x474>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x2ea>
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a63      	ldr	r2, [pc, #396]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x324>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x30c>
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5e      	ldr	r2, [pc, #376]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x324>
 8002534:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	4b55      	ldr	r3, [pc, #340]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7ff fb70 	bl	8001c38 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff fb6c 	bl	8001c38 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0cb      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ee      	beq.n	800255c <HAL_RCC_OscConfig+0x334>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7ff fb5a 	bl	8001c38 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff fb56 	bl	8001c38 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0b5      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ee      	bne.n	8002588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a1 	beq.w	8002708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d05c      	beq.n	800268c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d141      	bne.n	800265e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fb2a 	bl	8001c38 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff fb26 	bl	8001c38 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e087      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff faff 	bl	8001c38 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fafb 	bl	8001c38 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e05c      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x416>
 800265c:	e054      	b.n	8002708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fae8 	bl	8001c38 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff fae4 	bl	8001c38 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e045      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x470>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
 800268a:	e03d      	b.n	8002708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e038      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000
 80026a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4ec>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d028      	beq.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d121      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d11a      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d4:	4013      	ands	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	4293      	cmp	r3, r2
 80026de:	d111      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0cc      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d90c      	bls.n	8002754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d044      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d119      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e067      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4934      	ldr	r1, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7ff fa16 	bl	8001c38 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff fa12 	bl	8001c38 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d20c      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f976 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023c00 	.word	0x40023c00
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08004d98 	.word	0x08004d98
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e8:	b094      	sub	sp, #80	; 0x50
 80028ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
 80028f0:	2300      	movs	r3, #0
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f4:	2300      	movs	r3, #0
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d00d      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x40>
 8002908:	2b08      	cmp	r3, #8
 800290a:	f200 80e1 	bhi.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x34>
 8002912:	2b04      	cmp	r3, #4
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x3a>
 8002916:	e0db      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800291c:	e0db      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291e:	4b73      	ldr	r3, [pc, #460]	; (8002aec <HAL_RCC_GetSysClockFreq+0x208>)
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002922:	e0d8      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002924:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292e:	4b6d      	ldr	r3, [pc, #436]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
 8002944:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
 800294e:	2300      	movs	r3, #0
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
 8002952:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002956:	4622      	mov	r2, r4
 8002958:	462b      	mov	r3, r5
 800295a:	f04f 0000 	mov.w	r0, #0
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	0159      	lsls	r1, r3, #5
 8002964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002968:	0150      	lsls	r0, r2, #5
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4621      	mov	r1, r4
 8002970:	1a51      	subs	r1, r2, r1
 8002972:	6139      	str	r1, [r7, #16]
 8002974:	4629      	mov	r1, r5
 8002976:	eb63 0301 	sbc.w	r3, r3, r1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002988:	4659      	mov	r1, fp
 800298a:	018b      	lsls	r3, r1, #6
 800298c:	4651      	mov	r1, sl
 800298e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002992:	4651      	mov	r1, sl
 8002994:	018a      	lsls	r2, r1, #6
 8002996:	4651      	mov	r1, sl
 8002998:	ebb2 0801 	subs.w	r8, r2, r1
 800299c:	4659      	mov	r1, fp
 800299e:	eb63 0901 	sbc.w	r9, r3, r1
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b6:	4690      	mov	r8, r2
 80029b8:	4699      	mov	r9, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	eb18 0303 	adds.w	r3, r8, r3
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	462b      	mov	r3, r5
 80029c4:	eb49 0303 	adc.w	r3, r9, r3
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029d6:	4629      	mov	r1, r5
 80029d8:	024b      	lsls	r3, r1, #9
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e0:	4621      	mov	r1, r4
 80029e2:	024a      	lsls	r2, r1, #9
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ea:	2200      	movs	r2, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029f4:	f7fe f85a 	bl	8000aac <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a00:	e058      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	f04f 0000 	mov.w	r0, #0
 8002a24:	f04f 0100 	mov.w	r1, #0
 8002a28:	0159      	lsls	r1, r3, #5
 8002a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2e:	0150      	lsls	r0, r2, #5
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4641      	mov	r1, r8
 8002a36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a54:	ebb2 040a 	subs.w	r4, r2, sl
 8002a58:	eb63 050b 	sbc.w	r5, r3, fp
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	00eb      	lsls	r3, r5, #3
 8002a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6a:	00e2      	lsls	r2, r4, #3
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	464b      	mov	r3, r9
 8002a78:	eb45 0303 	adc.w	r3, r5, r3
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	028b      	lsls	r3, r1, #10
 8002a8e:	4621      	mov	r1, r4
 8002a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a94:	4621      	mov	r1, r4
 8002a96:	028a      	lsls	r2, r1, #10
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	61fa      	str	r2, [r7, #28]
 8002aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa8:	f7fe f800 	bl	8000aac <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3750      	adds	r7, #80	; 0x50
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200

08002af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07b      	b.n	8002bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b12:	d009      	beq.n	8002b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
 8002b1a:	e005      	b.n	8002b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fe16 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f003 0104 	and.w	r1, r3, #4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0210 	and.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b088      	sub	sp, #32
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_SPI_Transmit+0x22>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e12d      	b.n	8002e80 <HAL_SPI_Transmit+0x27e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2c:	f7ff f804 	bl	8001c38 <HAL_GetTick>
 8002c30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c46:	e116      	b.n	8002e76 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Transmit+0x52>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e10d      	b.n	8002e76 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d007      	beq.n	8002ce0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce8:	d14f      	bne.n	8002d8a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0xf6>
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d142      	bne.n	8002d7e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1c:	e02f      	b.n	8002d7e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d112      	bne.n	8002d52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	1c9a      	adds	r2, r3, #2
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d50:	e015      	b.n	8002d7e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d52:	f7fe ff71 	bl	8001c38 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d803      	bhi.n	8002d6a <HAL_SPI_Transmit+0x168>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Transmit+0x16e>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d7c:	e07b      	b.n	8002e76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ca      	bne.n	8002d1e <HAL_SPI_Transmit+0x11c>
 8002d88:	e050      	b.n	8002e2c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x196>
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d144      	bne.n	8002e22 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dbe:	e030      	b.n	8002e22 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d113      	bne.n	8002df6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002df4:	e015      	b.n	8002e22 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df6:	f7fe ff1f 	bl	8001c38 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d803      	bhi.n	8002e0e <HAL_SPI_Transmit+0x20c>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x212>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e20:	e029      	b.n	8002e76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1c9      	bne.n	8002dc0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	6839      	ldr	r1, [r7, #0]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fbdf 	bl	80035f4 <SPI_EndRxTxTransaction>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e003      	b.n	8002e76 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eac:	e0fb      	b.n	80030a6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb6:	d112      	bne.n	8002ede <HAL_SPI_Receive+0x56>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10e      	bne.n	8002ede <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f8ef 	bl	80030b8 <HAL_SPI_TransmitReceive>
 8002eda:	4603      	mov	r3, r0
 8002edc:	e0e8      	b.n	80030b0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_SPI_Receive+0x64>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0e1      	b.n	80030b0 <HAL_SPI_Receive+0x228>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef4:	f7fe fea0 	bl	8001c38 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Receive+0x7e>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f0a:	e0cc      	b.n	80030a6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f52:	d10f      	bne.n	8002f74 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16a      	bne.n	8003070 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f9a:	e032      	b.n	8003002 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d115      	bne.n	8002fd6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f103 020c 	add.w	r2, r3, #12
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fd4:	e015      	b.n	8003002 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd6:	f7fe fe2f 	bl	8001c38 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d803      	bhi.n	8002fee <HAL_SPI_Receive+0x166>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x16c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003000:	e051      	b.n	80030a6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1c7      	bne.n	8002f9c <HAL_SPI_Receive+0x114>
 800300c:	e035      	b.n	800307a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d113      	bne.n	8003044 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	b292      	uxth	r2, r2
 8003028:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	1c9a      	adds	r2, r3, #2
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003042:	e015      	b.n	8003070 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003044:	f7fe fdf8 	bl	8001c38 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d803      	bhi.n	800305c <HAL_SPI_Receive+0x1d4>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d102      	bne.n	8003062 <HAL_SPI_Receive+0x1da>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800306e:	e01a      	b.n	80030a6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1c9      	bne.n	800300e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa52 	bl	8003528 <SPI_EndRxTransaction>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
 800309c:	e003      	b.n	80030a6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_SPI_TransmitReceive+0x26>
 80030da:	2302      	movs	r3, #2
 80030dc:	e198      	b.n	8003410 <HAL_SPI_TransmitReceive+0x358>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e6:	f7fe fda7 	bl	8001c38 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003104:	2b01      	cmp	r3, #1
 8003106:	d00f      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x70>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d107      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x68>
 8003118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800311c:	2b04      	cmp	r3, #4
 800311e:	d003      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003126:	e16d      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_SPI_TransmitReceive+0x82>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_TransmitReceive+0x82>
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003140:	e160      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b04      	cmp	r3, #4
 800314c:	d003      	beq.n	8003156 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2205      	movs	r2, #5
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	887a      	ldrh	r2, [r7, #2]
 8003166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	887a      	ldrh	r2, [r7, #2]
 800317e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d007      	beq.n	80031aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b2:	d17c      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x10a>
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d16a      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e6:	e057      	b.n	8003298 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d11b      	bne.n	800322e <HAL_SPI_TransmitReceive+0x176>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_SPI_TransmitReceive+0x176>
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d113      	bne.n	800322e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d119      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x1b8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d014      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	b292      	uxth	r2, r2
 8003252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800326c:	2301      	movs	r3, #1
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003270:	f7fe fce2 	bl	8001c38 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	429a      	cmp	r2, r3
 800327e:	d80b      	bhi.n	8003298 <HAL_SPI_TransmitReceive+0x1e0>
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d007      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003296:	e0b5      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1a2      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x130>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d19d      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x130>
 80032ac:	e080      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x204>
 80032b6:	8b7b      	ldrh	r3, [r7, #26]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d16f      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e2:	e05b      	b.n	800339c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d11c      	bne.n	800332c <HAL_SPI_TransmitReceive+0x274>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <HAL_SPI_TransmitReceive+0x274>
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d114      	bne.n	800332c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d119      	bne.n	800336e <HAL_SPI_TransmitReceive+0x2b6>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d014      	beq.n	800336e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800336a:	2301      	movs	r3, #1
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800336e:	f7fe fc63 	bl	8001c38 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800337a:	429a      	cmp	r2, r3
 800337c:	d803      	bhi.n	8003386 <HAL_SPI_TransmitReceive+0x2ce>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d102      	bne.n	800338c <HAL_SPI_TransmitReceive+0x2d4>
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800339a:	e033      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d19e      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x22c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d199      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f91d 	bl	80035f4 <SPI_EndRxTxTransaction>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033cc:	e01a      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fa:	e003      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800340c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003410:	4618      	mov	r0, r3
 8003412:	3730      	adds	r7, #48	; 0x30
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003428:	f7fe fc06 	bl	8001c38 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003438:	f7fe fbfe 	bl	8001c38 <HAL_GetTick>
 800343c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	0d1b      	lsrs	r3, r3, #20
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344e:	e054      	b.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d050      	beq.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003458:	f7fe fbee 	bl	8001c38 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d902      	bls.n	800346e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d13d      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800347c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003486:	d111      	bne.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	d004      	beq.n	800349c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d107      	bne.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b4:	d10f      	bne.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e017      	b.n	800351a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d19b      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000000 	.word	0x20000000

08003528 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353c:	d111      	bne.n	8003562 <SPI_EndRxTransaction+0x3a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d004      	beq.n	8003552 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d107      	bne.n	8003562 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d12a      	bne.n	80035c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d012      	beq.n	800359c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ff49 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02d      	beq.n	80035e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e026      	b.n	80035ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2101      	movs	r1, #1
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff36 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01a      	beq.n	80035e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e013      	b.n	80035ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2101      	movs	r1, #1
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ff23 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e000      	b.n	80035ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2201      	movs	r2, #1
 8003608:	2102      	movs	r1, #2
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff ff04 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e032      	b.n	800368c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <SPI_EndRxTxTransaction+0xa0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <SPI_EndRxTxTransaction+0xa4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0d5b      	lsrs	r3, r3, #21
 8003632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003644:	d112      	bne.n	800366c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fee1 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d016      	beq.n	800368a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e00f      	b.n	800368c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3b01      	subs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d0f2      	beq.n	800366c <SPI_EndRxTxTransaction+0x78>
 8003686:	e000      	b.n	800368a <SPI_EndRxTxTransaction+0x96>
        break;
 8003688:	bf00      	nop
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000000 	.word	0x20000000
 8003698:	165e9f81 	.word	0x165e9f81

0800369c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e041      	b.n	8003732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fe fa00 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 fa88 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e04e      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_TIM_Base_Start_IT+0xc4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d022      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d01d      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_TIM_Base_Start_IT+0xc8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d018      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <HAL_TIM_Base_Start_IT+0xcc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIM_Base_Start_IT+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIM_Base_Start_IT+0xd4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIM_Base_Start_IT+0xdc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d111      	bne.n	80037e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d010      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e007      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40001800 	.word	0x40001800

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0202 	mvn.w	r2, #2
 8003850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9a3 	bl	8003bb2 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f995 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9a6 	bl	8003bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0204 	mvn.w	r2, #4
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f97d 	bl	8003bb2 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f96f 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f980 	bl	8003bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0208 	mvn.w	r2, #8
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2204      	movs	r2, #4
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f957 	bl	8003bb2 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f949 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f95a 	bl	8003bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f931 	bl	8003bb2 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f923 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f934 	bl	8003bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0201 	mvn.w	r2, #1
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f901 	bl	8003b8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa72 	bl	8003e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f905 	bl	8003bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0220 	mvn.w	r2, #32
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa44 	bl	8003e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0b4      	b.n	8003b82 <HAL_TIM_ConfigClockSource+0x186>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a50:	d03e      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	f200 8087 	bhi.w	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	f000 8086 	beq.w	8003b6e <HAL_TIM_ConfigClockSource+0x172>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d87f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d01a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d87b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d050      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0x11a>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d877      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b50      	cmp	r3, #80	; 0x50
 8003a7a:	d03c      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d873      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d058      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x13a>
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d86f      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b30      	cmp	r3, #48	; 0x30
 8003a8a:	d064      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a8c:	2b30      	cmp	r3, #48	; 0x30
 8003a8e:	d86b      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d060      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d867      	bhi.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d05a      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x15a>
 8003aa0:	e062      	b.n	8003b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab2:	f000 f9c3 	bl	8003e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	609a      	str	r2, [r3, #8]
      break;
 8003ace:	e04f      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae0:	f000 f9ac 	bl	8003e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af2:	609a      	str	r2, [r3, #8]
      break;
 8003af4:	e03c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	461a      	mov	r2, r3
 8003b04:	f000 f920 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2150      	movs	r1, #80	; 0x50
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f979 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003b14:	e02c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 f93f 	bl	8003da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2160      	movs	r1, #96	; 0x60
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f969 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003b34:	e01c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 f900 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2140      	movs	r1, #64	; 0x40
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f959 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e00c      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 f950 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003b66:	e003      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <TIM_Base_SetConfig+0x12c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d00f      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <TIM_Base_SetConfig+0x130>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <TIM_Base_SetConfig+0x134>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a41      	ldr	r2, [pc, #260]	; (8003d28 <TIM_Base_SetConfig+0x138>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <TIM_Base_SetConfig+0x13c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a35      	ldr	r2, [pc, #212]	; (8003d1c <TIM_Base_SetConfig+0x12c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02b      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d027      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <TIM_Base_SetConfig+0x130>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d023      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a31      	ldr	r2, [pc, #196]	; (8003d24 <TIM_Base_SetConfig+0x134>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01f      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a30      	ldr	r2, [pc, #192]	; (8003d28 <TIM_Base_SetConfig+0x138>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01b      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2f      	ldr	r2, [pc, #188]	; (8003d2c <TIM_Base_SetConfig+0x13c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d017      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2e      	ldr	r2, [pc, #184]	; (8003d30 <TIM_Base_SetConfig+0x140>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <TIM_Base_SetConfig+0x144>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00f      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <TIM_Base_SetConfig+0x148>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00b      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <TIM_Base_SetConfig+0x14c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <TIM_Base_SetConfig+0x150>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <TIM_Base_SetConfig+0x154>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <TIM_Base_SetConfig+0x12c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0xf8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <TIM_Base_SetConfig+0x13c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	40001800 	.word	0x40001800
 8003d40:	40001c00 	.word	0x40001c00
 8003d44:	40002000 	.word	0x40002000

08003d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 030a 	bic.w	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f023 0210 	bic.w	r2, r3, #16
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 0307 	orr.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	021a      	lsls	r2, r3, #8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <std>:
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8003eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eb2:	6083      	str	r3, [r0, #8]
 8003eb4:	8181      	strh	r1, [r0, #12]
 8003eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8003eb8:	81c2      	strh	r2, [r0, #14]
 8003eba:	6183      	str	r3, [r0, #24]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	305c      	adds	r0, #92	; 0x5c
 8003ec2:	f000 f906 	bl	80040d2 <memset>
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <std+0x58>)
 8003ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <std+0x5c>)
 8003ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <std+0x60>)
 8003ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <std+0x64>)
 8003ed4:	6323      	str	r3, [r4, #48]	; 0x30
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <std+0x68>)
 8003ed8:	6224      	str	r4, [r4, #32]
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d006      	beq.n	8003eec <std+0x48>
 8003ede:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ee2:	4294      	cmp	r4, r2
 8003ee4:	d002      	beq.n	8003eec <std+0x48>
 8003ee6:	33d0      	adds	r3, #208	; 0xd0
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d105      	bne.n	8003ef8 <std+0x54>
 8003eec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef4:	f000 b966 	b.w	80041c4 <__retarget_lock_init_recursive>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop
 8003efc:	0800404d 	.word	0x0800404d
 8003f00:	0800406f 	.word	0x0800406f
 8003f04:	080040a7 	.word	0x080040a7
 8003f08:	080040cb 	.word	0x080040cb
 8003f0c:	20000170 	.word	0x20000170

08003f10 <stdio_exit_handler>:
 8003f10:	4a02      	ldr	r2, [pc, #8]	; (8003f1c <stdio_exit_handler+0xc>)
 8003f12:	4903      	ldr	r1, [pc, #12]	; (8003f20 <stdio_exit_handler+0x10>)
 8003f14:	4803      	ldr	r0, [pc, #12]	; (8003f24 <stdio_exit_handler+0x14>)
 8003f16:	f000 b869 	b.w	8003fec <_fwalk_sglue>
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	08004a71 	.word	0x08004a71
 8003f24:	20000018 	.word	0x20000018

08003f28 <cleanup_stdio>:
 8003f28:	6841      	ldr	r1, [r0, #4]
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <cleanup_stdio+0x34>)
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	4604      	mov	r4, r0
 8003f32:	d001      	beq.n	8003f38 <cleanup_stdio+0x10>
 8003f34:	f000 fd9c 	bl	8004a70 <_fflush_r>
 8003f38:	68a1      	ldr	r1, [r4, #8]
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <cleanup_stdio+0x38>)
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <cleanup_stdio+0x1e>
 8003f40:	4620      	mov	r0, r4
 8003f42:	f000 fd95 	bl	8004a70 <_fflush_r>
 8003f46:	68e1      	ldr	r1, [r4, #12]
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <cleanup_stdio+0x3c>)
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	d004      	beq.n	8003f58 <cleanup_stdio+0x30>
 8003f4e:	4620      	mov	r0, r4
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f54:	f000 bd8c 	b.w	8004a70 <_fflush_r>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000170 	.word	0x20000170
 8003f60:	200001d8 	.word	0x200001d8
 8003f64:	20000240 	.word	0x20000240

08003f68 <global_stdio_init.part.0>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <global_stdio_init.part.0+0x30>)
 8003f6c:	4c0b      	ldr	r4, [pc, #44]	; (8003f9c <global_stdio_init.part.0+0x34>)
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <global_stdio_init.part.0+0x38>)
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	4620      	mov	r0, r4
 8003f74:	2200      	movs	r2, #0
 8003f76:	2104      	movs	r1, #4
 8003f78:	f7ff ff94 	bl	8003ea4 <std>
 8003f7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f80:	2201      	movs	r2, #1
 8003f82:	2109      	movs	r1, #9
 8003f84:	f7ff ff8e 	bl	8003ea4 <std>
 8003f88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f92:	2112      	movs	r1, #18
 8003f94:	f7ff bf86 	b.w	8003ea4 <std>
 8003f98:	200002a8 	.word	0x200002a8
 8003f9c:	20000170 	.word	0x20000170
 8003fa0:	08003f11 	.word	0x08003f11

08003fa4 <__sfp_lock_acquire>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	; (8003fac <__sfp_lock_acquire+0x8>)
 8003fa6:	f000 b90e 	b.w	80041c6 <__retarget_lock_acquire_recursive>
 8003faa:	bf00      	nop
 8003fac:	200002b1 	.word	0x200002b1

08003fb0 <__sfp_lock_release>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <__sfp_lock_release+0x8>)
 8003fb2:	f000 b909 	b.w	80041c8 <__retarget_lock_release_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	200002b1 	.word	0x200002b1

08003fbc <__sinit>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	f7ff fff0 	bl	8003fa4 <__sfp_lock_acquire>
 8003fc4:	6a23      	ldr	r3, [r4, #32]
 8003fc6:	b11b      	cbz	r3, 8003fd0 <__sinit+0x14>
 8003fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fcc:	f7ff bff0 	b.w	8003fb0 <__sfp_lock_release>
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <__sinit+0x28>)
 8003fd2:	6223      	str	r3, [r4, #32]
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <__sinit+0x2c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f5      	bne.n	8003fc8 <__sinit+0xc>
 8003fdc:	f7ff ffc4 	bl	8003f68 <global_stdio_init.part.0>
 8003fe0:	e7f2      	b.n	8003fc8 <__sinit+0xc>
 8003fe2:	bf00      	nop
 8003fe4:	08003f29 	.word	0x08003f29
 8003fe8:	200002a8 	.word	0x200002a8

08003fec <_fwalk_sglue>:
 8003fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	4688      	mov	r8, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ffc:	f1b9 0901 	subs.w	r9, r9, #1
 8004000:	d505      	bpl.n	800400e <_fwalk_sglue+0x22>
 8004002:	6824      	ldr	r4, [r4, #0]
 8004004:	2c00      	cmp	r4, #0
 8004006:	d1f7      	bne.n	8003ff8 <_fwalk_sglue+0xc>
 8004008:	4630      	mov	r0, r6
 800400a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400e:	89ab      	ldrh	r3, [r5, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d907      	bls.n	8004024 <_fwalk_sglue+0x38>
 8004014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004018:	3301      	adds	r3, #1
 800401a:	d003      	beq.n	8004024 <_fwalk_sglue+0x38>
 800401c:	4629      	mov	r1, r5
 800401e:	4638      	mov	r0, r7
 8004020:	47c0      	blx	r8
 8004022:	4306      	orrs	r6, r0
 8004024:	3568      	adds	r5, #104	; 0x68
 8004026:	e7e9      	b.n	8003ffc <_fwalk_sglue+0x10>

08004028 <iprintf>:
 8004028:	b40f      	push	{r0, r1, r2, r3}
 800402a:	b507      	push	{r0, r1, r2, lr}
 800402c:	4906      	ldr	r1, [pc, #24]	; (8004048 <iprintf+0x20>)
 800402e:	ab04      	add	r3, sp, #16
 8004030:	6808      	ldr	r0, [r1, #0]
 8004032:	f853 2b04 	ldr.w	r2, [r3], #4
 8004036:	6881      	ldr	r1, [r0, #8]
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	f000 f9e9 	bl	8004410 <_vfiprintf_r>
 800403e:	b003      	add	sp, #12
 8004040:	f85d eb04 	ldr.w	lr, [sp], #4
 8004044:	b004      	add	sp, #16
 8004046:	4770      	bx	lr
 8004048:	20000064 	.word	0x20000064

0800404c <__sread>:
 800404c:	b510      	push	{r4, lr}
 800404e:	460c      	mov	r4, r1
 8004050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004054:	f000 f868 	bl	8004128 <_read_r>
 8004058:	2800      	cmp	r0, #0
 800405a:	bfab      	itete	ge
 800405c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800405e:	89a3      	ldrhlt	r3, [r4, #12]
 8004060:	181b      	addge	r3, r3, r0
 8004062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004066:	bfac      	ite	ge
 8004068:	6563      	strge	r3, [r4, #84]	; 0x54
 800406a:	81a3      	strhlt	r3, [r4, #12]
 800406c:	bd10      	pop	{r4, pc}

0800406e <__swrite>:
 800406e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004072:	461f      	mov	r7, r3
 8004074:	898b      	ldrh	r3, [r1, #12]
 8004076:	05db      	lsls	r3, r3, #23
 8004078:	4605      	mov	r5, r0
 800407a:	460c      	mov	r4, r1
 800407c:	4616      	mov	r6, r2
 800407e:	d505      	bpl.n	800408c <__swrite+0x1e>
 8004080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004084:	2302      	movs	r3, #2
 8004086:	2200      	movs	r2, #0
 8004088:	f000 f83c 	bl	8004104 <_lseek_r>
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	4632      	mov	r2, r6
 800409a:	463b      	mov	r3, r7
 800409c:	4628      	mov	r0, r5
 800409e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a2:	f000 b853 	b.w	800414c <_write_r>

080040a6 <__sseek>:
 80040a6:	b510      	push	{r4, lr}
 80040a8:	460c      	mov	r4, r1
 80040aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ae:	f000 f829 	bl	8004104 <_lseek_r>
 80040b2:	1c43      	adds	r3, r0, #1
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	bf15      	itete	ne
 80040b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80040ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040c2:	81a3      	strheq	r3, [r4, #12]
 80040c4:	bf18      	it	ne
 80040c6:	81a3      	strhne	r3, [r4, #12]
 80040c8:	bd10      	pop	{r4, pc}

080040ca <__sclose>:
 80040ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ce:	f000 b809 	b.w	80040e4 <_close_r>

080040d2 <memset>:
 80040d2:	4402      	add	r2, r0
 80040d4:	4603      	mov	r3, r0
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d100      	bne.n	80040dc <memset+0xa>
 80040da:	4770      	bx	lr
 80040dc:	f803 1b01 	strb.w	r1, [r3], #1
 80040e0:	e7f9      	b.n	80040d6 <memset+0x4>
	...

080040e4 <_close_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4d06      	ldr	r5, [pc, #24]	; (8004100 <_close_r+0x1c>)
 80040e8:	2300      	movs	r3, #0
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	602b      	str	r3, [r5, #0]
 80040f0:	f7fd fc31 	bl	8001956 <_close>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_close_r+0x1a>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_close_r+0x1a>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	200002ac 	.word	0x200002ac

08004104 <_lseek_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d07      	ldr	r5, [pc, #28]	; (8004124 <_lseek_r+0x20>)
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fd fc46 	bl	80019a4 <_lseek>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_lseek_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_lseek_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	200002ac 	.word	0x200002ac

08004128 <_read_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d07      	ldr	r5, [pc, #28]	; (8004148 <_read_r+0x20>)
 800412c:	4604      	mov	r4, r0
 800412e:	4608      	mov	r0, r1
 8004130:	4611      	mov	r1, r2
 8004132:	2200      	movs	r2, #0
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fd fbf0 	bl	800191c <_read>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_read_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_read_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	200002ac 	.word	0x200002ac

0800414c <_write_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d07      	ldr	r5, [pc, #28]	; (800416c <_write_r+0x20>)
 8004150:	4604      	mov	r4, r0
 8004152:	4608      	mov	r0, r1
 8004154:	4611      	mov	r1, r2
 8004156:	2200      	movs	r2, #0
 8004158:	602a      	str	r2, [r5, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	f7fd f89c 	bl	8001298 <_write>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_write_r+0x1e>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	b103      	cbz	r3, 800416a <_write_r+0x1e>
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	200002ac 	.word	0x200002ac

08004170 <__errno>:
 8004170:	4b01      	ldr	r3, [pc, #4]	; (8004178 <__errno+0x8>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000064 	.word	0x20000064

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	; (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	; (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	; (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 fde2 	bl	8004d58 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004de4 	.word	0x08004de4
 80041b8:	08004de4 	.word	0x08004de4
 80041bc:	08004de4 	.word	0x08004de4
 80041c0:	08004de8 	.word	0x08004de8

080041c4 <__retarget_lock_init_recursive>:
 80041c4:	4770      	bx	lr

080041c6 <__retarget_lock_acquire_recursive>:
 80041c6:	4770      	bx	lr

080041c8 <__retarget_lock_release_recursive>:
 80041c8:	4770      	bx	lr
	...

080041cc <_free_r>:
 80041cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ce:	2900      	cmp	r1, #0
 80041d0:	d044      	beq.n	800425c <_free_r+0x90>
 80041d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d6:	9001      	str	r0, [sp, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f1a1 0404 	sub.w	r4, r1, #4
 80041de:	bfb8      	it	lt
 80041e0:	18e4      	addlt	r4, r4, r3
 80041e2:	f000 f8df 	bl	80043a4 <__malloc_lock>
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <_free_r+0x94>)
 80041e8:	9801      	ldr	r0, [sp, #4]
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	b933      	cbnz	r3, 80041fc <_free_r+0x30>
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	6014      	str	r4, [r2, #0]
 80041f2:	b003      	add	sp, #12
 80041f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f8:	f000 b8da 	b.w	80043b0 <__malloc_unlock>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d908      	bls.n	8004212 <_free_r+0x46>
 8004200:	6825      	ldr	r5, [r4, #0]
 8004202:	1961      	adds	r1, r4, r5
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1949      	addeq	r1, r1, r5
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	e7ed      	b.n	80041ee <_free_r+0x22>
 8004212:	461a      	mov	r2, r3
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b10b      	cbz	r3, 800421c <_free_r+0x50>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d9fa      	bls.n	8004212 <_free_r+0x46>
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	1855      	adds	r5, r2, r1
 8004220:	42a5      	cmp	r5, r4
 8004222:	d10b      	bne.n	800423c <_free_r+0x70>
 8004224:	6824      	ldr	r4, [r4, #0]
 8004226:	4421      	add	r1, r4
 8004228:	1854      	adds	r4, r2, r1
 800422a:	42a3      	cmp	r3, r4
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	d1e0      	bne.n	80041f2 <_free_r+0x26>
 8004230:	681c      	ldr	r4, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	440c      	add	r4, r1
 8004238:	6014      	str	r4, [r2, #0]
 800423a:	e7da      	b.n	80041f2 <_free_r+0x26>
 800423c:	d902      	bls.n	8004244 <_free_r+0x78>
 800423e:	230c      	movs	r3, #12
 8004240:	6003      	str	r3, [r0, #0]
 8004242:	e7d6      	b.n	80041f2 <_free_r+0x26>
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1961      	adds	r1, r4, r5
 8004248:	428b      	cmp	r3, r1
 800424a:	bf04      	itt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	bf04      	itt	eq
 8004254:	1949      	addeq	r1, r1, r5
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	6054      	str	r4, [r2, #4]
 800425a:	e7ca      	b.n	80041f2 <_free_r+0x26>
 800425c:	b003      	add	sp, #12
 800425e:	bd30      	pop	{r4, r5, pc}
 8004260:	200002b4 	.word	0x200002b4

08004264 <sbrk_aligned>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4e0e      	ldr	r6, [pc, #56]	; (80042a0 <sbrk_aligned+0x3c>)
 8004268:	460c      	mov	r4, r1
 800426a:	6831      	ldr	r1, [r6, #0]
 800426c:	4605      	mov	r5, r0
 800426e:	b911      	cbnz	r1, 8004276 <sbrk_aligned+0x12>
 8004270:	f000 fcbc 	bl	8004bec <_sbrk_r>
 8004274:	6030      	str	r0, [r6, #0]
 8004276:	4621      	mov	r1, r4
 8004278:	4628      	mov	r0, r5
 800427a:	f000 fcb7 	bl	8004bec <_sbrk_r>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d00a      	beq.n	8004298 <sbrk_aligned+0x34>
 8004282:	1cc4      	adds	r4, r0, #3
 8004284:	f024 0403 	bic.w	r4, r4, #3
 8004288:	42a0      	cmp	r0, r4
 800428a:	d007      	beq.n	800429c <sbrk_aligned+0x38>
 800428c:	1a21      	subs	r1, r4, r0
 800428e:	4628      	mov	r0, r5
 8004290:	f000 fcac 	bl	8004bec <_sbrk_r>
 8004294:	3001      	adds	r0, #1
 8004296:	d101      	bne.n	800429c <sbrk_aligned+0x38>
 8004298:	f04f 34ff 	mov.w	r4, #4294967295
 800429c:	4620      	mov	r0, r4
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	200002b8 	.word	0x200002b8

080042a4 <_malloc_r>:
 80042a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a8:	1ccd      	adds	r5, r1, #3
 80042aa:	f025 0503 	bic.w	r5, r5, #3
 80042ae:	3508      	adds	r5, #8
 80042b0:	2d0c      	cmp	r5, #12
 80042b2:	bf38      	it	cc
 80042b4:	250c      	movcc	r5, #12
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	4607      	mov	r7, r0
 80042ba:	db01      	blt.n	80042c0 <_malloc_r+0x1c>
 80042bc:	42a9      	cmp	r1, r5
 80042be:	d905      	bls.n	80042cc <_malloc_r+0x28>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	2600      	movs	r6, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043a0 <_malloc_r+0xfc>
 80042d0:	f000 f868 	bl	80043a4 <__malloc_lock>
 80042d4:	f8d8 3000 	ldr.w	r3, [r8]
 80042d8:	461c      	mov	r4, r3
 80042da:	bb5c      	cbnz	r4, 8004334 <_malloc_r+0x90>
 80042dc:	4629      	mov	r1, r5
 80042de:	4638      	mov	r0, r7
 80042e0:	f7ff ffc0 	bl	8004264 <sbrk_aligned>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	4604      	mov	r4, r0
 80042e8:	d155      	bne.n	8004396 <_malloc_r+0xf2>
 80042ea:	f8d8 4000 	ldr.w	r4, [r8]
 80042ee:	4626      	mov	r6, r4
 80042f0:	2e00      	cmp	r6, #0
 80042f2:	d145      	bne.n	8004380 <_malloc_r+0xdc>
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	d048      	beq.n	800438a <_malloc_r+0xe6>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	4631      	mov	r1, r6
 80042fc:	4638      	mov	r0, r7
 80042fe:	eb04 0903 	add.w	r9, r4, r3
 8004302:	f000 fc73 	bl	8004bec <_sbrk_r>
 8004306:	4581      	cmp	r9, r0
 8004308:	d13f      	bne.n	800438a <_malloc_r+0xe6>
 800430a:	6821      	ldr	r1, [r4, #0]
 800430c:	1a6d      	subs	r5, r5, r1
 800430e:	4629      	mov	r1, r5
 8004310:	4638      	mov	r0, r7
 8004312:	f7ff ffa7 	bl	8004264 <sbrk_aligned>
 8004316:	3001      	adds	r0, #1
 8004318:	d037      	beq.n	800438a <_malloc_r+0xe6>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	442b      	add	r3, r5
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	f8d8 3000 	ldr.w	r3, [r8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d038      	beq.n	800439a <_malloc_r+0xf6>
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	42a2      	cmp	r2, r4
 800432c:	d12b      	bne.n	8004386 <_malloc_r+0xe2>
 800432e:	2200      	movs	r2, #0
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	e00f      	b.n	8004354 <_malloc_r+0xb0>
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	1b52      	subs	r2, r2, r5
 8004338:	d41f      	bmi.n	800437a <_malloc_r+0xd6>
 800433a:	2a0b      	cmp	r2, #11
 800433c:	d917      	bls.n	800436e <_malloc_r+0xca>
 800433e:	1961      	adds	r1, r4, r5
 8004340:	42a3      	cmp	r3, r4
 8004342:	6025      	str	r5, [r4, #0]
 8004344:	bf18      	it	ne
 8004346:	6059      	strne	r1, [r3, #4]
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	bf08      	it	eq
 800434c:	f8c8 1000 	streq.w	r1, [r8]
 8004350:	5162      	str	r2, [r4, r5]
 8004352:	604b      	str	r3, [r1, #4]
 8004354:	4638      	mov	r0, r7
 8004356:	f104 060b 	add.w	r6, r4, #11
 800435a:	f000 f829 	bl	80043b0 <__malloc_unlock>
 800435e:	f026 0607 	bic.w	r6, r6, #7
 8004362:	1d23      	adds	r3, r4, #4
 8004364:	1af2      	subs	r2, r6, r3
 8004366:	d0ae      	beq.n	80042c6 <_malloc_r+0x22>
 8004368:	1b9b      	subs	r3, r3, r6
 800436a:	50a3      	str	r3, [r4, r2]
 800436c:	e7ab      	b.n	80042c6 <_malloc_r+0x22>
 800436e:	42a3      	cmp	r3, r4
 8004370:	6862      	ldr	r2, [r4, #4]
 8004372:	d1dd      	bne.n	8004330 <_malloc_r+0x8c>
 8004374:	f8c8 2000 	str.w	r2, [r8]
 8004378:	e7ec      	b.n	8004354 <_malloc_r+0xb0>
 800437a:	4623      	mov	r3, r4
 800437c:	6864      	ldr	r4, [r4, #4]
 800437e:	e7ac      	b.n	80042da <_malloc_r+0x36>
 8004380:	4634      	mov	r4, r6
 8004382:	6876      	ldr	r6, [r6, #4]
 8004384:	e7b4      	b.n	80042f0 <_malloc_r+0x4c>
 8004386:	4613      	mov	r3, r2
 8004388:	e7cc      	b.n	8004324 <_malloc_r+0x80>
 800438a:	230c      	movs	r3, #12
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4638      	mov	r0, r7
 8004390:	f000 f80e 	bl	80043b0 <__malloc_unlock>
 8004394:	e797      	b.n	80042c6 <_malloc_r+0x22>
 8004396:	6025      	str	r5, [r4, #0]
 8004398:	e7dc      	b.n	8004354 <_malloc_r+0xb0>
 800439a:	605b      	str	r3, [r3, #4]
 800439c:	deff      	udf	#255	; 0xff
 800439e:	bf00      	nop
 80043a0:	200002b4 	.word	0x200002b4

080043a4 <__malloc_lock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__malloc_lock+0x8>)
 80043a6:	f7ff bf0e 	b.w	80041c6 <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	200002b0 	.word	0x200002b0

080043b0 <__malloc_unlock>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__malloc_unlock+0x8>)
 80043b2:	f7ff bf09 	b.w	80041c8 <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	200002b0 	.word	0x200002b0

080043bc <__sfputc_r>:
 80043bc:	6893      	ldr	r3, [r2, #8]
 80043be:	3b01      	subs	r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	b410      	push	{r4}
 80043c4:	6093      	str	r3, [r2, #8]
 80043c6:	da08      	bge.n	80043da <__sfputc_r+0x1e>
 80043c8:	6994      	ldr	r4, [r2, #24]
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	db01      	blt.n	80043d2 <__sfputc_r+0x16>
 80043ce:	290a      	cmp	r1, #10
 80043d0:	d103      	bne.n	80043da <__sfputc_r+0x1e>
 80043d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043d6:	f000 bb73 	b.w	8004ac0 <__swbuf_r>
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	1c58      	adds	r0, r3, #1
 80043de:	6010      	str	r0, [r2, #0]
 80043e0:	7019      	strb	r1, [r3, #0]
 80043e2:	4608      	mov	r0, r1
 80043e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <__sfputs_r>:
 80043ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ec:	4606      	mov	r6, r0
 80043ee:	460f      	mov	r7, r1
 80043f0:	4614      	mov	r4, r2
 80043f2:	18d5      	adds	r5, r2, r3
 80043f4:	42ac      	cmp	r4, r5
 80043f6:	d101      	bne.n	80043fc <__sfputs_r+0x12>
 80043f8:	2000      	movs	r0, #0
 80043fa:	e007      	b.n	800440c <__sfputs_r+0x22>
 80043fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004400:	463a      	mov	r2, r7
 8004402:	4630      	mov	r0, r6
 8004404:	f7ff ffda 	bl	80043bc <__sfputc_r>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d1f3      	bne.n	80043f4 <__sfputs_r+0xa>
 800440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004410 <_vfiprintf_r>:
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	460d      	mov	r5, r1
 8004416:	b09d      	sub	sp, #116	; 0x74
 8004418:	4614      	mov	r4, r2
 800441a:	4698      	mov	r8, r3
 800441c:	4606      	mov	r6, r0
 800441e:	b118      	cbz	r0, 8004428 <_vfiprintf_r+0x18>
 8004420:	6a03      	ldr	r3, [r0, #32]
 8004422:	b90b      	cbnz	r3, 8004428 <_vfiprintf_r+0x18>
 8004424:	f7ff fdca 	bl	8003fbc <__sinit>
 8004428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800442a:	07d9      	lsls	r1, r3, #31
 800442c:	d405      	bmi.n	800443a <_vfiprintf_r+0x2a>
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	059a      	lsls	r2, r3, #22
 8004432:	d402      	bmi.n	800443a <_vfiprintf_r+0x2a>
 8004434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004436:	f7ff fec6 	bl	80041c6 <__retarget_lock_acquire_recursive>
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	d501      	bpl.n	8004444 <_vfiprintf_r+0x34>
 8004440:	692b      	ldr	r3, [r5, #16]
 8004442:	b99b      	cbnz	r3, 800446c <_vfiprintf_r+0x5c>
 8004444:	4629      	mov	r1, r5
 8004446:	4630      	mov	r0, r6
 8004448:	f000 fb78 	bl	8004b3c <__swsetup_r>
 800444c:	b170      	cbz	r0, 800446c <_vfiprintf_r+0x5c>
 800444e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004450:	07dc      	lsls	r4, r3, #31
 8004452:	d504      	bpl.n	800445e <_vfiprintf_r+0x4e>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	b01d      	add	sp, #116	; 0x74
 800445a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445e:	89ab      	ldrh	r3, [r5, #12]
 8004460:	0598      	lsls	r0, r3, #22
 8004462:	d4f7      	bmi.n	8004454 <_vfiprintf_r+0x44>
 8004464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004466:	f7ff feaf 	bl	80041c8 <__retarget_lock_release_recursive>
 800446a:	e7f3      	b.n	8004454 <_vfiprintf_r+0x44>
 800446c:	2300      	movs	r3, #0
 800446e:	9309      	str	r3, [sp, #36]	; 0x24
 8004470:	2320      	movs	r3, #32
 8004472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004476:	f8cd 800c 	str.w	r8, [sp, #12]
 800447a:	2330      	movs	r3, #48	; 0x30
 800447c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004630 <_vfiprintf_r+0x220>
 8004480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004484:	f04f 0901 	mov.w	r9, #1
 8004488:	4623      	mov	r3, r4
 800448a:	469a      	mov	sl, r3
 800448c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004490:	b10a      	cbz	r2, 8004496 <_vfiprintf_r+0x86>
 8004492:	2a25      	cmp	r2, #37	; 0x25
 8004494:	d1f9      	bne.n	800448a <_vfiprintf_r+0x7a>
 8004496:	ebba 0b04 	subs.w	fp, sl, r4
 800449a:	d00b      	beq.n	80044b4 <_vfiprintf_r+0xa4>
 800449c:	465b      	mov	r3, fp
 800449e:	4622      	mov	r2, r4
 80044a0:	4629      	mov	r1, r5
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7ff ffa1 	bl	80043ea <__sfputs_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	f000 80a9 	beq.w	8004600 <_vfiprintf_r+0x1f0>
 80044ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b0:	445a      	add	r2, fp
 80044b2:	9209      	str	r2, [sp, #36]	; 0x24
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a1 	beq.w	8004600 <_vfiprintf_r+0x1f0>
 80044be:	2300      	movs	r3, #0
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c8:	f10a 0a01 	add.w	sl, sl, #1
 80044cc:	9304      	str	r3, [sp, #16]
 80044ce:	9307      	str	r3, [sp, #28]
 80044d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044d4:	931a      	str	r3, [sp, #104]	; 0x68
 80044d6:	4654      	mov	r4, sl
 80044d8:	2205      	movs	r2, #5
 80044da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044de:	4854      	ldr	r0, [pc, #336]	; (8004630 <_vfiprintf_r+0x220>)
 80044e0:	f7fb fe76 	bl	80001d0 <memchr>
 80044e4:	9a04      	ldr	r2, [sp, #16]
 80044e6:	b9d8      	cbnz	r0, 8004520 <_vfiprintf_r+0x110>
 80044e8:	06d1      	lsls	r1, r2, #27
 80044ea:	bf44      	itt	mi
 80044ec:	2320      	movmi	r3, #32
 80044ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f2:	0713      	lsls	r3, r2, #28
 80044f4:	bf44      	itt	mi
 80044f6:	232b      	movmi	r3, #43	; 0x2b
 80044f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004500:	2b2a      	cmp	r3, #42	; 0x2a
 8004502:	d015      	beq.n	8004530 <_vfiprintf_r+0x120>
 8004504:	9a07      	ldr	r2, [sp, #28]
 8004506:	4654      	mov	r4, sl
 8004508:	2000      	movs	r0, #0
 800450a:	f04f 0c0a 	mov.w	ip, #10
 800450e:	4621      	mov	r1, r4
 8004510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004514:	3b30      	subs	r3, #48	; 0x30
 8004516:	2b09      	cmp	r3, #9
 8004518:	d94d      	bls.n	80045b6 <_vfiprintf_r+0x1a6>
 800451a:	b1b0      	cbz	r0, 800454a <_vfiprintf_r+0x13a>
 800451c:	9207      	str	r2, [sp, #28]
 800451e:	e014      	b.n	800454a <_vfiprintf_r+0x13a>
 8004520:	eba0 0308 	sub.w	r3, r0, r8
 8004524:	fa09 f303 	lsl.w	r3, r9, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	9304      	str	r3, [sp, #16]
 800452c:	46a2      	mov	sl, r4
 800452e:	e7d2      	b.n	80044d6 <_vfiprintf_r+0xc6>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	1d19      	adds	r1, r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	9103      	str	r1, [sp, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	bfbb      	ittet	lt
 800453c:	425b      	neglt	r3, r3
 800453e:	f042 0202 	orrlt.w	r2, r2, #2
 8004542:	9307      	strge	r3, [sp, #28]
 8004544:	9307      	strlt	r3, [sp, #28]
 8004546:	bfb8      	it	lt
 8004548:	9204      	strlt	r2, [sp, #16]
 800454a:	7823      	ldrb	r3, [r4, #0]
 800454c:	2b2e      	cmp	r3, #46	; 0x2e
 800454e:	d10c      	bne.n	800456a <_vfiprintf_r+0x15a>
 8004550:	7863      	ldrb	r3, [r4, #1]
 8004552:	2b2a      	cmp	r3, #42	; 0x2a
 8004554:	d134      	bne.n	80045c0 <_vfiprintf_r+0x1b0>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	1d1a      	adds	r2, r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	9203      	str	r2, [sp, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfb8      	it	lt
 8004562:	f04f 33ff 	movlt.w	r3, #4294967295
 8004566:	3402      	adds	r4, #2
 8004568:	9305      	str	r3, [sp, #20]
 800456a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004640 <_vfiprintf_r+0x230>
 800456e:	7821      	ldrb	r1, [r4, #0]
 8004570:	2203      	movs	r2, #3
 8004572:	4650      	mov	r0, sl
 8004574:	f7fb fe2c 	bl	80001d0 <memchr>
 8004578:	b138      	cbz	r0, 800458a <_vfiprintf_r+0x17a>
 800457a:	9b04      	ldr	r3, [sp, #16]
 800457c:	eba0 000a 	sub.w	r0, r0, sl
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	4082      	lsls	r2, r0
 8004584:	4313      	orrs	r3, r2
 8004586:	3401      	adds	r4, #1
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458e:	4829      	ldr	r0, [pc, #164]	; (8004634 <_vfiprintf_r+0x224>)
 8004590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004594:	2206      	movs	r2, #6
 8004596:	f7fb fe1b 	bl	80001d0 <memchr>
 800459a:	2800      	cmp	r0, #0
 800459c:	d03f      	beq.n	800461e <_vfiprintf_r+0x20e>
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <_vfiprintf_r+0x228>)
 80045a0:	bb1b      	cbnz	r3, 80045ea <_vfiprintf_r+0x1da>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	3307      	adds	r3, #7
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	3308      	adds	r3, #8
 80045ac:	9303      	str	r3, [sp, #12]
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	443b      	add	r3, r7
 80045b2:	9309      	str	r3, [sp, #36]	; 0x24
 80045b4:	e768      	b.n	8004488 <_vfiprintf_r+0x78>
 80045b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ba:	460c      	mov	r4, r1
 80045bc:	2001      	movs	r0, #1
 80045be:	e7a6      	b.n	800450e <_vfiprintf_r+0xfe>
 80045c0:	2300      	movs	r3, #0
 80045c2:	3401      	adds	r4, #1
 80045c4:	9305      	str	r3, [sp, #20]
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0c0a 	mov.w	ip, #10
 80045cc:	4620      	mov	r0, r4
 80045ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d2:	3a30      	subs	r2, #48	; 0x30
 80045d4:	2a09      	cmp	r2, #9
 80045d6:	d903      	bls.n	80045e0 <_vfiprintf_r+0x1d0>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c6      	beq.n	800456a <_vfiprintf_r+0x15a>
 80045dc:	9105      	str	r1, [sp, #20]
 80045de:	e7c4      	b.n	800456a <_vfiprintf_r+0x15a>
 80045e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e4:	4604      	mov	r4, r0
 80045e6:	2301      	movs	r3, #1
 80045e8:	e7f0      	b.n	80045cc <_vfiprintf_r+0x1bc>
 80045ea:	ab03      	add	r3, sp, #12
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	462a      	mov	r2, r5
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <_vfiprintf_r+0x22c>)
 80045f2:	a904      	add	r1, sp, #16
 80045f4:	4630      	mov	r0, r6
 80045f6:	f3af 8000 	nop.w
 80045fa:	4607      	mov	r7, r0
 80045fc:	1c78      	adds	r0, r7, #1
 80045fe:	d1d6      	bne.n	80045ae <_vfiprintf_r+0x19e>
 8004600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004602:	07d9      	lsls	r1, r3, #31
 8004604:	d405      	bmi.n	8004612 <_vfiprintf_r+0x202>
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	059a      	lsls	r2, r3, #22
 800460a:	d402      	bmi.n	8004612 <_vfiprintf_r+0x202>
 800460c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800460e:	f7ff fddb 	bl	80041c8 <__retarget_lock_release_recursive>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	065b      	lsls	r3, r3, #25
 8004616:	f53f af1d 	bmi.w	8004454 <_vfiprintf_r+0x44>
 800461a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800461c:	e71c      	b.n	8004458 <_vfiprintf_r+0x48>
 800461e:	ab03      	add	r3, sp, #12
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	462a      	mov	r2, r5
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <_vfiprintf_r+0x22c>)
 8004626:	a904      	add	r1, sp, #16
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f879 	bl	8004720 <_printf_i>
 800462e:	e7e4      	b.n	80045fa <_vfiprintf_r+0x1ea>
 8004630:	08004da8 	.word	0x08004da8
 8004634:	08004db2 	.word	0x08004db2
 8004638:	00000000 	.word	0x00000000
 800463c:	080043eb 	.word	0x080043eb
 8004640:	08004dae 	.word	0x08004dae

08004644 <_printf_common>:
 8004644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	4616      	mov	r6, r2
 800464a:	4699      	mov	r9, r3
 800464c:	688a      	ldr	r2, [r1, #8]
 800464e:	690b      	ldr	r3, [r1, #16]
 8004650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004654:	4293      	cmp	r3, r2
 8004656:	bfb8      	it	lt
 8004658:	4613      	movlt	r3, r2
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004660:	4607      	mov	r7, r0
 8004662:	460c      	mov	r4, r1
 8004664:	b10a      	cbz	r2, 800466a <_printf_common+0x26>
 8004666:	3301      	adds	r3, #1
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	0699      	lsls	r1, r3, #26
 800466e:	bf42      	ittt	mi
 8004670:	6833      	ldrmi	r3, [r6, #0]
 8004672:	3302      	addmi	r3, #2
 8004674:	6033      	strmi	r3, [r6, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	f015 0506 	ands.w	r5, r5, #6
 800467c:	d106      	bne.n	800468c <_printf_common+0x48>
 800467e:	f104 0a19 	add.w	sl, r4, #25
 8004682:	68e3      	ldr	r3, [r4, #12]
 8004684:	6832      	ldr	r2, [r6, #0]
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	42ab      	cmp	r3, r5
 800468a:	dc26      	bgt.n	80046da <_printf_common+0x96>
 800468c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004690:	1e13      	subs	r3, r2, #0
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	bf18      	it	ne
 8004696:	2301      	movne	r3, #1
 8004698:	0692      	lsls	r2, r2, #26
 800469a:	d42b      	bmi.n	80046f4 <_printf_common+0xb0>
 800469c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a0:	4649      	mov	r1, r9
 80046a2:	4638      	mov	r0, r7
 80046a4:	47c0      	blx	r8
 80046a6:	3001      	adds	r0, #1
 80046a8:	d01e      	beq.n	80046e8 <_printf_common+0xa4>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	6922      	ldr	r2, [r4, #16]
 80046ae:	f003 0306 	and.w	r3, r3, #6
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf02      	ittt	eq
 80046b6:	68e5      	ldreq	r5, [r4, #12]
 80046b8:	6833      	ldreq	r3, [r6, #0]
 80046ba:	1aed      	subeq	r5, r5, r3
 80046bc:	68a3      	ldr	r3, [r4, #8]
 80046be:	bf0c      	ite	eq
 80046c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c4:	2500      	movne	r5, #0
 80046c6:	4293      	cmp	r3, r2
 80046c8:	bfc4      	itt	gt
 80046ca:	1a9b      	subgt	r3, r3, r2
 80046cc:	18ed      	addgt	r5, r5, r3
 80046ce:	2600      	movs	r6, #0
 80046d0:	341a      	adds	r4, #26
 80046d2:	42b5      	cmp	r5, r6
 80046d4:	d11a      	bne.n	800470c <_printf_common+0xc8>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e008      	b.n	80046ec <_printf_common+0xa8>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4649      	mov	r1, r9
 80046e0:	4638      	mov	r0, r7
 80046e2:	47c0      	blx	r8
 80046e4:	3001      	adds	r0, #1
 80046e6:	d103      	bne.n	80046f0 <_printf_common+0xac>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f0:	3501      	adds	r5, #1
 80046f2:	e7c6      	b.n	8004682 <_printf_common+0x3e>
 80046f4:	18e1      	adds	r1, r4, r3
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	2030      	movs	r0, #48	; 0x30
 80046fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046fe:	4422      	add	r2, r4
 8004700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004708:	3302      	adds	r3, #2
 800470a:	e7c7      	b.n	800469c <_printf_common+0x58>
 800470c:	2301      	movs	r3, #1
 800470e:	4622      	mov	r2, r4
 8004710:	4649      	mov	r1, r9
 8004712:	4638      	mov	r0, r7
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d0e6      	beq.n	80046e8 <_printf_common+0xa4>
 800471a:	3601      	adds	r6, #1
 800471c:	e7d9      	b.n	80046d2 <_printf_common+0x8e>
	...

08004720 <_printf_i>:
 8004720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	7e0f      	ldrb	r7, [r1, #24]
 8004726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004728:	2f78      	cmp	r7, #120	; 0x78
 800472a:	4691      	mov	r9, r2
 800472c:	4680      	mov	r8, r0
 800472e:	460c      	mov	r4, r1
 8004730:	469a      	mov	sl, r3
 8004732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004736:	d807      	bhi.n	8004748 <_printf_i+0x28>
 8004738:	2f62      	cmp	r7, #98	; 0x62
 800473a:	d80a      	bhi.n	8004752 <_printf_i+0x32>
 800473c:	2f00      	cmp	r7, #0
 800473e:	f000 80d4 	beq.w	80048ea <_printf_i+0x1ca>
 8004742:	2f58      	cmp	r7, #88	; 0x58
 8004744:	f000 80c0 	beq.w	80048c8 <_printf_i+0x1a8>
 8004748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800474c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004750:	e03a      	b.n	80047c8 <_printf_i+0xa8>
 8004752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004756:	2b15      	cmp	r3, #21
 8004758:	d8f6      	bhi.n	8004748 <_printf_i+0x28>
 800475a:	a101      	add	r1, pc, #4	; (adr r1, 8004760 <_printf_i+0x40>)
 800475c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047cd 	.word	0x080047cd
 8004768:	08004749 	.word	0x08004749
 800476c:	08004749 	.word	0x08004749
 8004770:	08004749 	.word	0x08004749
 8004774:	08004749 	.word	0x08004749
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004749 	.word	0x08004749
 8004780:	08004749 	.word	0x08004749
 8004784:	08004749 	.word	0x08004749
 8004788:	08004749 	.word	0x08004749
 800478c:	080048d1 	.word	0x080048d1
 8004790:	080047f9 	.word	0x080047f9
 8004794:	0800488b 	.word	0x0800488b
 8004798:	08004749 	.word	0x08004749
 800479c:	08004749 	.word	0x08004749
 80047a0:	080048f3 	.word	0x080048f3
 80047a4:	08004749 	.word	0x08004749
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	08004749 	.word	0x08004749
 80047b0:	08004749 	.word	0x08004749
 80047b4:	08004893 	.word	0x08004893
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	602a      	str	r2, [r5, #0]
 80047c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047c8:	2301      	movs	r3, #1
 80047ca:	e09f      	b.n	800490c <_printf_i+0x1ec>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	0607      	lsls	r7, r0, #24
 80047d2:	f103 0104 	add.w	r1, r3, #4
 80047d6:	6029      	str	r1, [r5, #0]
 80047d8:	d501      	bpl.n	80047de <_printf_i+0xbe>
 80047da:	681e      	ldr	r6, [r3, #0]
 80047dc:	e003      	b.n	80047e6 <_printf_i+0xc6>
 80047de:	0646      	lsls	r6, r0, #25
 80047e0:	d5fb      	bpl.n	80047da <_printf_i+0xba>
 80047e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	da03      	bge.n	80047f2 <_printf_i+0xd2>
 80047ea:	232d      	movs	r3, #45	; 0x2d
 80047ec:	4276      	negs	r6, r6
 80047ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f2:	485a      	ldr	r0, [pc, #360]	; (800495c <_printf_i+0x23c>)
 80047f4:	230a      	movs	r3, #10
 80047f6:	e012      	b.n	800481e <_printf_i+0xfe>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	6820      	ldr	r0, [r4, #0]
 80047fc:	1d19      	adds	r1, r3, #4
 80047fe:	6029      	str	r1, [r5, #0]
 8004800:	0605      	lsls	r5, r0, #24
 8004802:	d501      	bpl.n	8004808 <_printf_i+0xe8>
 8004804:	681e      	ldr	r6, [r3, #0]
 8004806:	e002      	b.n	800480e <_printf_i+0xee>
 8004808:	0641      	lsls	r1, r0, #25
 800480a:	d5fb      	bpl.n	8004804 <_printf_i+0xe4>
 800480c:	881e      	ldrh	r6, [r3, #0]
 800480e:	4853      	ldr	r0, [pc, #332]	; (800495c <_printf_i+0x23c>)
 8004810:	2f6f      	cmp	r7, #111	; 0x6f
 8004812:	bf0c      	ite	eq
 8004814:	2308      	moveq	r3, #8
 8004816:	230a      	movne	r3, #10
 8004818:	2100      	movs	r1, #0
 800481a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800481e:	6865      	ldr	r5, [r4, #4]
 8004820:	60a5      	str	r5, [r4, #8]
 8004822:	2d00      	cmp	r5, #0
 8004824:	bfa2      	ittt	ge
 8004826:	6821      	ldrge	r1, [r4, #0]
 8004828:	f021 0104 	bicge.w	r1, r1, #4
 800482c:	6021      	strge	r1, [r4, #0]
 800482e:	b90e      	cbnz	r6, 8004834 <_printf_i+0x114>
 8004830:	2d00      	cmp	r5, #0
 8004832:	d04b      	beq.n	80048cc <_printf_i+0x1ac>
 8004834:	4615      	mov	r5, r2
 8004836:	fbb6 f1f3 	udiv	r1, r6, r3
 800483a:	fb03 6711 	mls	r7, r3, r1, r6
 800483e:	5dc7      	ldrb	r7, [r0, r7]
 8004840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004844:	4637      	mov	r7, r6
 8004846:	42bb      	cmp	r3, r7
 8004848:	460e      	mov	r6, r1
 800484a:	d9f4      	bls.n	8004836 <_printf_i+0x116>
 800484c:	2b08      	cmp	r3, #8
 800484e:	d10b      	bne.n	8004868 <_printf_i+0x148>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	07de      	lsls	r6, r3, #31
 8004854:	d508      	bpl.n	8004868 <_printf_i+0x148>
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	6861      	ldr	r1, [r4, #4]
 800485a:	4299      	cmp	r1, r3
 800485c:	bfde      	ittt	le
 800485e:	2330      	movle	r3, #48	; 0x30
 8004860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004868:	1b52      	subs	r2, r2, r5
 800486a:	6122      	str	r2, [r4, #16]
 800486c:	f8cd a000 	str.w	sl, [sp]
 8004870:	464b      	mov	r3, r9
 8004872:	aa03      	add	r2, sp, #12
 8004874:	4621      	mov	r1, r4
 8004876:	4640      	mov	r0, r8
 8004878:	f7ff fee4 	bl	8004644 <_printf_common>
 800487c:	3001      	adds	r0, #1
 800487e:	d14a      	bne.n	8004916 <_printf_i+0x1f6>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	b004      	add	sp, #16
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f043 0320 	orr.w	r3, r3, #32
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	4833      	ldr	r0, [pc, #204]	; (8004960 <_printf_i+0x240>)
 8004894:	2778      	movs	r7, #120	; 0x78
 8004896:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	6829      	ldr	r1, [r5, #0]
 800489e:	061f      	lsls	r7, r3, #24
 80048a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048a4:	d402      	bmi.n	80048ac <_printf_i+0x18c>
 80048a6:	065f      	lsls	r7, r3, #25
 80048a8:	bf48      	it	mi
 80048aa:	b2b6      	uxthmi	r6, r6
 80048ac:	07df      	lsls	r7, r3, #31
 80048ae:	bf48      	it	mi
 80048b0:	f043 0320 	orrmi.w	r3, r3, #32
 80048b4:	6029      	str	r1, [r5, #0]
 80048b6:	bf48      	it	mi
 80048b8:	6023      	strmi	r3, [r4, #0]
 80048ba:	b91e      	cbnz	r6, 80048c4 <_printf_i+0x1a4>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	f023 0320 	bic.w	r3, r3, #32
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	2310      	movs	r3, #16
 80048c6:	e7a7      	b.n	8004818 <_printf_i+0xf8>
 80048c8:	4824      	ldr	r0, [pc, #144]	; (800495c <_printf_i+0x23c>)
 80048ca:	e7e4      	b.n	8004896 <_printf_i+0x176>
 80048cc:	4615      	mov	r5, r2
 80048ce:	e7bd      	b.n	800484c <_printf_i+0x12c>
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	6826      	ldr	r6, [r4, #0]
 80048d4:	6961      	ldr	r1, [r4, #20]
 80048d6:	1d18      	adds	r0, r3, #4
 80048d8:	6028      	str	r0, [r5, #0]
 80048da:	0635      	lsls	r5, r6, #24
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0x1c4>
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	e002      	b.n	80048ea <_printf_i+0x1ca>
 80048e4:	0670      	lsls	r0, r6, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0x1c0>
 80048e8:	8019      	strh	r1, [r3, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	4615      	mov	r5, r2
 80048f0:	e7bc      	b.n	800486c <_printf_i+0x14c>
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	1d1a      	adds	r2, r3, #4
 80048f6:	602a      	str	r2, [r5, #0]
 80048f8:	681d      	ldr	r5, [r3, #0]
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	2100      	movs	r1, #0
 80048fe:	4628      	mov	r0, r5
 8004900:	f7fb fc66 	bl	80001d0 <memchr>
 8004904:	b108      	cbz	r0, 800490a <_printf_i+0x1ea>
 8004906:	1b40      	subs	r0, r0, r5
 8004908:	6060      	str	r0, [r4, #4]
 800490a:	6863      	ldr	r3, [r4, #4]
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	2300      	movs	r3, #0
 8004910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004914:	e7aa      	b.n	800486c <_printf_i+0x14c>
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	462a      	mov	r2, r5
 800491a:	4649      	mov	r1, r9
 800491c:	4640      	mov	r0, r8
 800491e:	47d0      	blx	sl
 8004920:	3001      	adds	r0, #1
 8004922:	d0ad      	beq.n	8004880 <_printf_i+0x160>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	079b      	lsls	r3, r3, #30
 8004928:	d413      	bmi.n	8004952 <_printf_i+0x232>
 800492a:	68e0      	ldr	r0, [r4, #12]
 800492c:	9b03      	ldr	r3, [sp, #12]
 800492e:	4298      	cmp	r0, r3
 8004930:	bfb8      	it	lt
 8004932:	4618      	movlt	r0, r3
 8004934:	e7a6      	b.n	8004884 <_printf_i+0x164>
 8004936:	2301      	movs	r3, #1
 8004938:	4632      	mov	r2, r6
 800493a:	4649      	mov	r1, r9
 800493c:	4640      	mov	r0, r8
 800493e:	47d0      	blx	sl
 8004940:	3001      	adds	r0, #1
 8004942:	d09d      	beq.n	8004880 <_printf_i+0x160>
 8004944:	3501      	adds	r5, #1
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	9903      	ldr	r1, [sp, #12]
 800494a:	1a5b      	subs	r3, r3, r1
 800494c:	42ab      	cmp	r3, r5
 800494e:	dcf2      	bgt.n	8004936 <_printf_i+0x216>
 8004950:	e7eb      	b.n	800492a <_printf_i+0x20a>
 8004952:	2500      	movs	r5, #0
 8004954:	f104 0619 	add.w	r6, r4, #25
 8004958:	e7f5      	b.n	8004946 <_printf_i+0x226>
 800495a:	bf00      	nop
 800495c:	08004db9 	.word	0x08004db9
 8004960:	08004dca 	.word	0x08004dca

08004964 <__sflush_r>:
 8004964:	898a      	ldrh	r2, [r1, #12]
 8004966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496a:	4605      	mov	r5, r0
 800496c:	0710      	lsls	r0, r2, #28
 800496e:	460c      	mov	r4, r1
 8004970:	d458      	bmi.n	8004a24 <__sflush_r+0xc0>
 8004972:	684b      	ldr	r3, [r1, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	dc05      	bgt.n	8004984 <__sflush_r+0x20>
 8004978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	dc02      	bgt.n	8004984 <__sflush_r+0x20>
 800497e:	2000      	movs	r0, #0
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004986:	2e00      	cmp	r6, #0
 8004988:	d0f9      	beq.n	800497e <__sflush_r+0x1a>
 800498a:	2300      	movs	r3, #0
 800498c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004990:	682f      	ldr	r7, [r5, #0]
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	d032      	beq.n	80049fe <__sflush_r+0x9a>
 8004998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	075a      	lsls	r2, r3, #29
 800499e:	d505      	bpl.n	80049ac <__sflush_r+0x48>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	1ac0      	subs	r0, r0, r3
 80049a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a6:	b10b      	cbz	r3, 80049ac <__sflush_r+0x48>
 80049a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049aa:	1ac0      	subs	r0, r0, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	4602      	mov	r2, r0
 80049b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b2:	6a21      	ldr	r1, [r4, #32]
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b0      	blx	r6
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	d106      	bne.n	80049cc <__sflush_r+0x68>
 80049be:	6829      	ldr	r1, [r5, #0]
 80049c0:	291d      	cmp	r1, #29
 80049c2:	d82b      	bhi.n	8004a1c <__sflush_r+0xb8>
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <__sflush_r+0x108>)
 80049c6:	410a      	asrs	r2, r1
 80049c8:	07d6      	lsls	r6, r2, #31
 80049ca:	d427      	bmi.n	8004a1c <__sflush_r+0xb8>
 80049cc:	2200      	movs	r2, #0
 80049ce:	6062      	str	r2, [r4, #4]
 80049d0:	04d9      	lsls	r1, r3, #19
 80049d2:	6922      	ldr	r2, [r4, #16]
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	d504      	bpl.n	80049e2 <__sflush_r+0x7e>
 80049d8:	1c42      	adds	r2, r0, #1
 80049da:	d101      	bne.n	80049e0 <__sflush_r+0x7c>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b903      	cbnz	r3, 80049e2 <__sflush_r+0x7e>
 80049e0:	6560      	str	r0, [r4, #84]	; 0x54
 80049e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e4:	602f      	str	r7, [r5, #0]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d0c9      	beq.n	800497e <__sflush_r+0x1a>
 80049ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ee:	4299      	cmp	r1, r3
 80049f0:	d002      	beq.n	80049f8 <__sflush_r+0x94>
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7ff fbea 	bl	80041cc <_free_r>
 80049f8:	2000      	movs	r0, #0
 80049fa:	6360      	str	r0, [r4, #52]	; 0x34
 80049fc:	e7c0      	b.n	8004980 <__sflush_r+0x1c>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b0      	blx	r6
 8004a04:	1c41      	adds	r1, r0, #1
 8004a06:	d1c8      	bne.n	800499a <__sflush_r+0x36>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c5      	beq.n	800499a <__sflush_r+0x36>
 8004a0e:	2b1d      	cmp	r3, #29
 8004a10:	d001      	beq.n	8004a16 <__sflush_r+0xb2>
 8004a12:	2b16      	cmp	r3, #22
 8004a14:	d101      	bne.n	8004a1a <__sflush_r+0xb6>
 8004a16:	602f      	str	r7, [r5, #0]
 8004a18:	e7b1      	b.n	800497e <__sflush_r+0x1a>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	e7ad      	b.n	8004980 <__sflush_r+0x1c>
 8004a24:	690f      	ldr	r7, [r1, #16]
 8004a26:	2f00      	cmp	r7, #0
 8004a28:	d0a9      	beq.n	800497e <__sflush_r+0x1a>
 8004a2a:	0793      	lsls	r3, r2, #30
 8004a2c:	680e      	ldr	r6, [r1, #0]
 8004a2e:	bf08      	it	eq
 8004a30:	694b      	ldreq	r3, [r1, #20]
 8004a32:	600f      	str	r7, [r1, #0]
 8004a34:	bf18      	it	ne
 8004a36:	2300      	movne	r3, #0
 8004a38:	eba6 0807 	sub.w	r8, r6, r7
 8004a3c:	608b      	str	r3, [r1, #8]
 8004a3e:	f1b8 0f00 	cmp.w	r8, #0
 8004a42:	dd9c      	ble.n	800497e <__sflush_r+0x1a>
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a48:	4643      	mov	r3, r8
 8004a4a:	463a      	mov	r2, r7
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b0      	blx	r6
 8004a50:	2800      	cmp	r0, #0
 8004a52:	dc06      	bgt.n	8004a62 <__sflush_r+0xfe>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e78e      	b.n	8004980 <__sflush_r+0x1c>
 8004a62:	4407      	add	r7, r0
 8004a64:	eba8 0800 	sub.w	r8, r8, r0
 8004a68:	e7e9      	b.n	8004a3e <__sflush_r+0xda>
 8004a6a:	bf00      	nop
 8004a6c:	dfbffffe 	.word	0xdfbffffe

08004a70 <_fflush_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	b913      	cbnz	r3, 8004a80 <_fflush_r+0x10>
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	b118      	cbz	r0, 8004a8a <_fflush_r+0x1a>
 8004a82:	6a03      	ldr	r3, [r0, #32]
 8004a84:	b90b      	cbnz	r3, 8004a8a <_fflush_r+0x1a>
 8004a86:	f7ff fa99 	bl	8003fbc <__sinit>
 8004a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f3      	beq.n	8004a7a <_fflush_r+0xa>
 8004a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a94:	07d0      	lsls	r0, r2, #31
 8004a96:	d404      	bmi.n	8004aa2 <_fflush_r+0x32>
 8004a98:	0599      	lsls	r1, r3, #22
 8004a9a:	d402      	bmi.n	8004aa2 <_fflush_r+0x32>
 8004a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a9e:	f7ff fb92 	bl	80041c6 <__retarget_lock_acquire_recursive>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f7ff ff5d 	bl	8004964 <__sflush_r>
 8004aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aac:	07da      	lsls	r2, r3, #31
 8004aae:	4605      	mov	r5, r0
 8004ab0:	d4e4      	bmi.n	8004a7c <_fflush_r+0xc>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	059b      	lsls	r3, r3, #22
 8004ab6:	d4e1      	bmi.n	8004a7c <_fflush_r+0xc>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aba:	f7ff fb85 	bl	80041c8 <__retarget_lock_release_recursive>
 8004abe:	e7dd      	b.n	8004a7c <_fflush_r+0xc>

08004ac0 <__swbuf_r>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	460e      	mov	r6, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	b118      	cbz	r0, 8004ad2 <__swbuf_r+0x12>
 8004aca:	6a03      	ldr	r3, [r0, #32]
 8004acc:	b90b      	cbnz	r3, 8004ad2 <__swbuf_r+0x12>
 8004ace:	f7ff fa75 	bl	8003fbc <__sinit>
 8004ad2:	69a3      	ldr	r3, [r4, #24]
 8004ad4:	60a3      	str	r3, [r4, #8]
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	071a      	lsls	r2, r3, #28
 8004ada:	d525      	bpl.n	8004b28 <__swbuf_r+0x68>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	b31b      	cbz	r3, 8004b28 <__swbuf_r+0x68>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	6922      	ldr	r2, [r4, #16]
 8004ae4:	1a98      	subs	r0, r3, r2
 8004ae6:	6963      	ldr	r3, [r4, #20]
 8004ae8:	b2f6      	uxtb	r6, r6
 8004aea:	4283      	cmp	r3, r0
 8004aec:	4637      	mov	r7, r6
 8004aee:	dc04      	bgt.n	8004afa <__swbuf_r+0x3a>
 8004af0:	4621      	mov	r1, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	f7ff ffbc 	bl	8004a70 <_fflush_r>
 8004af8:	b9e0      	cbnz	r0, 8004b34 <__swbuf_r+0x74>
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	60a3      	str	r3, [r4, #8]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	701e      	strb	r6, [r3, #0]
 8004b08:	6962      	ldr	r2, [r4, #20]
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d004      	beq.n	8004b1a <__swbuf_r+0x5a>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	07db      	lsls	r3, r3, #31
 8004b14:	d506      	bpl.n	8004b24 <__swbuf_r+0x64>
 8004b16:	2e0a      	cmp	r6, #10
 8004b18:	d104      	bne.n	8004b24 <__swbuf_r+0x64>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff ffa7 	bl	8004a70 <_fflush_r>
 8004b22:	b938      	cbnz	r0, 8004b34 <__swbuf_r+0x74>
 8004b24:	4638      	mov	r0, r7
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 f806 	bl	8004b3c <__swsetup_r>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0d5      	beq.n	8004ae0 <__swbuf_r+0x20>
 8004b34:	f04f 37ff 	mov.w	r7, #4294967295
 8004b38:	e7f4      	b.n	8004b24 <__swbuf_r+0x64>
	...

08004b3c <__swsetup_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <__swsetup_r+0xac>)
 8004b40:	4605      	mov	r5, r0
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	460c      	mov	r4, r1
 8004b46:	b118      	cbz	r0, 8004b50 <__swsetup_r+0x14>
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <__swsetup_r+0x14>
 8004b4c:	f7ff fa36 	bl	8003fbc <__sinit>
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b56:	0718      	lsls	r0, r3, #28
 8004b58:	d422      	bmi.n	8004ba0 <__swsetup_r+0x64>
 8004b5a:	06d9      	lsls	r1, r3, #27
 8004b5c:	d407      	bmi.n	8004b6e <__swsetup_r+0x32>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e034      	b.n	8004bd8 <__swsetup_r+0x9c>
 8004b6e:	0758      	lsls	r0, r3, #29
 8004b70:	d512      	bpl.n	8004b98 <__swsetup_r+0x5c>
 8004b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b74:	b141      	cbz	r1, 8004b88 <__swsetup_r+0x4c>
 8004b76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d002      	beq.n	8004b84 <__swsetup_r+0x48>
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7ff fb24 	bl	80041cc <_free_r>
 8004b84:	2300      	movs	r3, #0
 8004b86:	6363      	str	r3, [r4, #52]	; 0x34
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	2300      	movs	r3, #0
 8004b92:	6063      	str	r3, [r4, #4]
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f043 0308 	orr.w	r3, r3, #8
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	b94b      	cbnz	r3, 8004bb8 <__swsetup_r+0x7c>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bae:	d003      	beq.n	8004bb8 <__swsetup_r+0x7c>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f850 	bl	8004c58 <__smakebuf_r>
 8004bb8:	89a0      	ldrh	r0, [r4, #12]
 8004bba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bbe:	f010 0301 	ands.w	r3, r0, #1
 8004bc2:	d00a      	beq.n	8004bda <__swsetup_r+0x9e>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60a3      	str	r3, [r4, #8]
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	425b      	negs	r3, r3
 8004bcc:	61a3      	str	r3, [r4, #24]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	b943      	cbnz	r3, 8004be4 <__swsetup_r+0xa8>
 8004bd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bd6:	d1c4      	bne.n	8004b62 <__swsetup_r+0x26>
 8004bd8:	bd38      	pop	{r3, r4, r5, pc}
 8004bda:	0781      	lsls	r1, r0, #30
 8004bdc:	bf58      	it	pl
 8004bde:	6963      	ldrpl	r3, [r4, #20]
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	e7f4      	b.n	8004bce <__swsetup_r+0x92>
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7f7      	b.n	8004bd8 <__swsetup_r+0x9c>
 8004be8:	20000064 	.word	0x20000064

08004bec <_sbrk_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d06      	ldr	r5, [pc, #24]	; (8004c08 <_sbrk_r+0x1c>)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	f7fc fee2 	bl	80019c0 <_sbrk>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_sbrk_r+0x1a>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_sbrk_r+0x1a>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200002ac 	.word	0x200002ac

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460c      	mov	r4, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4615      	mov	r5, r2
 8004c1a:	461e      	mov	r6, r3
 8004c1c:	da0d      	bge.n	8004c3a <__swhatbuf_r+0x2e>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	bf0c      	ite	eq
 8004c2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c2e:	2340      	movne	r3, #64	; 0x40
 8004c30:	2000      	movs	r0, #0
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	b016      	add	sp, #88	; 0x58
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	466a      	mov	r2, sp
 8004c3c:	f000 f848 	bl	8004cd0 <_fstat_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	dbec      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c44:	9901      	ldr	r1, [sp, #4]
 8004c46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004c4e:	4259      	negs	r1, r3
 8004c50:	4159      	adcs	r1, r3
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c56:	e7eb      	b.n	8004c30 <__swhatbuf_r+0x24>

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff fb0f 	bl	80042a4 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	6020      	str	r0, [r4, #0]
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	9b00      	ldr	r3, [sp, #0]
 8004ca8:	6163      	str	r3, [r4, #20]
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	6120      	str	r0, [r4, #16]
 8004cae:	b15b      	cbz	r3, 8004cc8 <__smakebuf_r+0x70>
 8004cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f81d 	bl	8004cf4 <_isatty_r>
 8004cba:	b128      	cbz	r0, 8004cc8 <__smakebuf_r+0x70>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	431d      	orrs	r5, r3
 8004ccc:	81a5      	strh	r5, [r4, #12]
 8004cce:	e7cf      	b.n	8004c70 <__smakebuf_r+0x18>

08004cd0 <_fstat_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4d07      	ldr	r5, [pc, #28]	; (8004cf0 <_fstat_r+0x20>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	f7fc fe46 	bl	800196e <_fstat>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d102      	bne.n	8004cec <_fstat_r+0x1c>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	b103      	cbz	r3, 8004cec <_fstat_r+0x1c>
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	200002ac 	.word	0x200002ac

08004cf4 <_isatty_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d06      	ldr	r5, [pc, #24]	; (8004d10 <_isatty_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fc fe45 	bl	800198e <_isatty>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_isatty_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_isatty_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200002ac 	.word	0x200002ac

08004d14 <sqrtf>:
 8004d14:	b508      	push	{r3, lr}
 8004d16:	ed2d 8b02 	vpush	{d8}
 8004d1a:	eeb0 8a40 	vmov.f32	s16, s0
 8004d1e:	f000 f817 	bl	8004d50 <__ieee754_sqrtf>
 8004d22:	eeb4 8a48 	vcmp.f32	s16, s16
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	d60c      	bvs.n	8004d46 <sqrtf+0x32>
 8004d2c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004d4c <sqrtf+0x38>
 8004d30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d505      	bpl.n	8004d46 <sqrtf+0x32>
 8004d3a:	f7ff fa19 	bl	8004170 <__errno>
 8004d3e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004d42:	2321      	movs	r3, #33	; 0x21
 8004d44:	6003      	str	r3, [r0, #0]
 8004d46:	ecbd 8b02 	vpop	{d8}
 8004d4a:	bd08      	pop	{r3, pc}
 8004d4c:	00000000 	.word	0x00000000

08004d50 <__ieee754_sqrtf>:
 8004d50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004d54:	4770      	bx	lr
	...

08004d58 <_init>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr

08004d64 <_fini>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr
