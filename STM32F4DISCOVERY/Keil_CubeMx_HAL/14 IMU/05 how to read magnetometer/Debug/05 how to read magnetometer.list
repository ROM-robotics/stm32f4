
05 how to read magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800384c  0800384c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003854  08003854  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800385c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001e0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006c3f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001952  00000000  00000000  00026d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000740  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000054b  00000000  00000000  00028db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000213f9  00000000  00000000  000292fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009449  00000000  00000000  0004a6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3e14  00000000  00000000  00053b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022b4  00000000  00000000  00117954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00119c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037a0 	.word	0x080037a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080037a0 	.word	0x080037a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a25      	ldr	r2, [pc, #148]	; (8000620 <MX_GPIO_Init+0xb4>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005f8:	f000 ff46 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000614:	f000 fd9c 	bl	8001150 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d013      	beq.n	8000668 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000648:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	e000      	b.n	8000654 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000652:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fbec 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f810 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff72 	bl	800056c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000688:	f000 fa32 	bl	8000af0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  mpu_init();
 800068c:	f000 f8f2 	bl	8000874 <mpu_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 mpu_read_sensor(&imu_data);
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <main+0x28>)
 8000692:	f000 f97b 	bl	800098c <mpu_read_sensor>
	 HAL_Delay(3000);
 8000696:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800069a:	f000 fc4f 	bl	8000f3c <HAL_Delay>
	 mpu_read_sensor(&imu_data);
 800069e:	e7f7      	b.n	8000690 <main+0x18>
 80006a0:	20000084 	.word	0x20000084

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fa53 	bl	8002b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fec7 	bl	80014bc <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f83c 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f928 	bl	80019ac <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f825 	bl	80007b0 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e009      	b.n	800079e <_write+0x26>
		ITM_SendChar(*ptr++);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	60ba      	str	r2, [r7, #8]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff48 	bl	8000628 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dbf1      	blt.n	800078a <_write+0x12>
	return len;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <activate_spi2_mpu>:
 */
extern SPI_HandleTypeDef hspi2;
static uint8_t mag_adjust[3];

static void activate_spi2_mpu(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <activate_spi2_mpu+0x14>)
 80007c6:	f000 fe5f 	bl	8001488 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020800 	.word	0x40020800

080007d4 <deactivate_spi2_mpu>:

static void deactivate_spi2_mpu(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <deactivate_spi2_mpu+0x14>)
 80007de:	f000 fe53 	bl	8001488 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020800 	.word	0x40020800

080007ec <ak8963_write_reg>:


void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 80007fc:	210c      	movs	r1, #12
 80007fe:	2025      	movs	r0, #37	; 0x25
 8000800:	f000 f880 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4619      	mov	r1, r3
 8000808:	2026      	movs	r0, #38	; 0x26
 800080a:	f000 f87b 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_DATA_REG, data);
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	4619      	mov	r1, r3
 8000812:	2063      	movs	r0, #99	; 0x63
 8000814:	f000 f876 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01) );
 8000818:	2181      	movs	r1, #129	; 0x81
 800081a:	2027      	movs	r0, #39	; 0x27
 800081c:	f000 f872 	bl	8000904 <mpu_write_reg>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ak8963_read_reg>:

void ak8963_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	mpu_write_reg(I2C_SLV0_ADDR_REG, (0x80 | AK8963_ADDRESS) );
 8000838:	218c      	movs	r1, #140	; 0x8c
 800083a:	2025      	movs	r0, #37	; 0x25
 800083c:	f000 f862 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_REG_REG, reg);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4619      	mov	r1, r3
 8000844:	2026      	movs	r0, #38	; 0x26
 8000846:	f000 f85d 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	2027      	movs	r0, #39	; 0x27
 8000856:	f000 f855 	bl	8000904 <mpu_write_reg>
	HAL_Delay(10);
 800085a:	200a      	movs	r0, #10
 800085c:	f000 fb6e 	bl	8000f3c <HAL_Delay>
	mpu_read_reg(EXT_SENS_DATA_00_REG, data, len);
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	6839      	ldr	r1, [r7, #0]
 8000866:	2017      	movs	r0, #23
 8000868:	f000 f86a 	bl	8000940 <mpu_read_reg>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <mpu_init>:
void mpu_init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];
	// GYRO configuration
	mpu_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 800087a:	2108      	movs	r1, #8
 800087c:	201b      	movs	r0, #27
 800087e:	f000 f841 	bl	8000904 <mpu_write_reg>

	// ACCELERO configuration
	mpu_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 8000882:	2108      	movs	r1, #8
 8000884:	201c      	movs	r0, #28
 8000886:	f000 f83d 	bl	8000904 <mpu_write_reg>

	// EXTING from sleep mode
	mpu_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 800088a:	2101      	movs	r1, #1
 800088c:	206b      	movs	r0, #107	; 0x6b
 800088e:	f000 f839 	bl	8000904 <mpu_write_reg>

	// Enable I2C Master setting 400Khz
	mpu_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 8000892:	2120      	movs	r1, #32
 8000894:	206a      	movs	r0, #106	; 0x6a
 8000896:	f000 f835 	bl	8000904 <mpu_write_reg>
	mpu_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_400);
 800089a:	210d      	movs	r1, #13
 800089c:	2024      	movs	r0, #36	; 0x24
 800089e:	f000 f831 	bl	8000904 <mpu_write_reg>

	// POWER down Magnetometer
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80008a2:	2100      	movs	r1, #0
 80008a4:	200a      	movs	r0, #10
 80008a6:	f7ff ffa1 	bl	80007ec <ak8963_write_reg>
	HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 fb46 	bl	8000f3c <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 80008b0:	210f      	movs	r1, #15
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff ff9a 	bl	80007ec <ak8963_write_reg>
	HAL_Delay(10);
 80008b8:	200a      	movs	r0, #10
 80008ba:	f000 fb3f 	bl	8000f3c <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 80008be:	2203      	movs	r2, #3
 80008c0:	490f      	ldr	r1, [pc, #60]	; (8000900 <mpu_init+0x8c>)
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff ffb0 	bl	8000828 <ak8963_read_reg>

	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80008c8:	2100      	movs	r1, #0
 80008ca:	200a      	movs	r0, #10
 80008cc:	f7ff ff8e 	bl	80007ec <ak8963_write_reg>
	HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f000 fb33 	bl	8000f3c <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 80008d6:	2116      	movs	r1, #22
 80008d8:	200a      	movs	r0, #10
 80008da:	f7ff ff87 	bl	80007ec <ak8963_write_reg>
	HAL_Delay(10);
 80008de:	200a      	movs	r0, #10
 80008e0:	f000 fb2c 	bl	8000f3c <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 80008e4:	463b      	mov	r3, r7
 80008e6:	2207      	movs	r2, #7
 80008e8:	4619      	mov	r1, r3
 80008ea:	2003      	movs	r0, #3
 80008ec:	f7ff ff9c 	bl	8000828 <ak8963_read_reg>
	HAL_Delay(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f000 fb23 	bl	8000f3c <HAL_Delay>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098

08000904 <mpu_write_reg>:

void mpu_write_reg(uint8_t reg, uint8_t data)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	71bb      	strb	r3, [r7, #6]
	activate_spi2_mpu();
 8000914:	f7ff ff52 	bl	80007bc <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000918:	1df9      	adds	r1, r7, #7
 800091a:	2364      	movs	r3, #100	; 0x64
 800091c:	2201      	movs	r2, #1
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <mpu_write_reg+0x38>)
 8000920:	f001 fab9 	bl	8001e96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data,1, 100);
 8000924:	1db9      	adds	r1, r7, #6
 8000926:	2364      	movs	r3, #100	; 0x64
 8000928:	2201      	movs	r2, #1
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <mpu_write_reg+0x38>)
 800092c:	f001 fab3 	bl	8001e96 <HAL_SPI_Transmit>
	deactivate_spi2_mpu();
 8000930:	f7ff ff50 	bl	80007d4 <deactivate_spi2_mpu>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000009c 	.word	0x2000009c

08000940 <mpu_read_reg>:

void mpu_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80 | reg;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000956:	b2db      	uxtb	r3, r3
 8000958:	73fb      	strb	r3, [r7, #15]
	activate_spi2_mpu();
 800095a:	f7ff ff2f 	bl	80007bc <activate_spi2_mpu>
	HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 800095e:	f107 010f 	add.w	r1, r7, #15
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	2201      	movs	r2, #1
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <mpu_read_reg+0x48>)
 8000968:	f001 fa95 	bl	8001e96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, len, 100);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	b29a      	uxth	r2, r3
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <mpu_read_reg+0x48>)
 8000976:	f001 fbd1 	bl	800211c <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 800097a:	f7ff ff2b 	bl	80007d4 <deactivate_spi2_mpu>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000009c 	.word	0x2000009c

0800098c <mpu_read_sensor>:

void mpu_read_sensor(mpu_data *imu_data)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	uint8_t data[20];
	activate_spi2_mpu();
 8000994:	f7ff ff12 	bl	80007bc <activate_spi2_mpu>
	uint8_t temp_reg = 0x80 | ACCEL_XOUT_H;
 8000998:	23bb      	movs	r3, #187	; 0xbb
 800099a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi2, &temp_reg, 1, 100);
 800099c:	f107 010b 	add.w	r1, r7, #11
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	2201      	movs	r2, #1
 80009a4:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <mpu_read_sensor+0x154>)
 80009a6:	f001 fa76 	bl	8001e96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 20, 100);
 80009aa:	f107 010c 	add.w	r1, r7, #12
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	2214      	movs	r2, #20
 80009b2:	484b      	ldr	r0, [pc, #300]	; (8000ae0 <mpu_read_sensor+0x154>)
 80009b4:	f001 fbb2 	bl	800211c <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 80009b8:	f7ff ff0c 	bl	80007d4 <deactivate_spi2_mpu>

	imu_data->x_accel = ((int16_t)data[0]<<8) + data[1];
 80009bc:	7b3b      	ldrb	r3, [r7, #12]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	7b7b      	ldrb	r3, [r7, #13]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	801a      	strh	r2, [r3, #0]
	imu_data->y_accel = ((int16_t)data[2]<<8) + data[3];
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b29a      	uxth	r2, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4413      	add	r3, r2
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	805a      	strh	r2, [r3, #2]
	imu_data->z_accel = ((int16_t)data[4]<<8) + data[5];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	7c7b      	ldrb	r3, [r7, #17]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	809a      	strh	r2, [r3, #4]

	imu_data->x_gyro = ((int16_t)data[8]<<8) + data[9];
 80009fe:	7d3b      	ldrb	r3, [r7, #20]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	7d7b      	ldrb	r3, [r7, #21]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	80da      	strh	r2, [r3, #6]
	imu_data->y_gyro = ((int16_t)data[10]<<8) + data[11];
 8000a14:	7dbb      	ldrb	r3, [r7, #22]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	811a      	strh	r2, [r3, #8]
	imu_data->z_gyro = ((int16_t)data[12]<<8) + data[13];
 8000a2a:	7e3b      	ldrb	r3, [r7, #24]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	7e7b      	ldrb	r3, [r7, #25]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	815a      	strh	r2, [r3, #10]

	imu_data->x_mag = ((int16_t)data[15]<<8) + data[14];
 8000a40:	7efb      	ldrb	r3, [r7, #27]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	021b      	lsls	r3, r3, #8
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	7ebb      	ldrb	r3, [r7, #26]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	819a      	strh	r2, [r3, #12]
	imu_data->y_mag = ((int16_t)data[17]<<8) + data[16];
 8000a56:	7f7b      	ldrb	r3, [r7, #29]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	7f3b      	ldrb	r3, [r7, #28]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	81da      	strh	r2, [r3, #14]
	imu_data->z_mag = ((int16_t)data[19]<<8) + data[18];
 8000a6c:	7ffb      	ldrb	r3, [r7, #31]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	7fbb      	ldrb	r3, [r7, #30]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	821a      	strh	r2, [r3, #16]

	printf("Accelero : %d, %d, and %d \n", imu_data->x_accel, imu_data->y_accel, imu_data->z_accel);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <mpu_read_sensor+0x158>)
 8000a9a:	f002 f80b 	bl	8002ab4 <iprintf>
	printf("Gyro : %d, %d, and %d \n", imu_data->x_gyro, imu_data->y_gyro, imu_data->z_gyro);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <mpu_read_sensor+0x15c>)
 8000ab6:	f001 fffd 	bl	8002ab4 <iprintf>
	printf("Magneto : %d, %d, and %d \n", imu_data->x_mag, imu_data->y_mag, imu_data->z_mag);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <mpu_read_sensor+0x160>)
 8000ad2:	f001 ffef 	bl	8002ab4 <iprintf>

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	080037b8 	.word	0x080037b8
 8000ae8:	080037d4 	.word	0x080037d4
 8000aec:	080037ec 	.word	0x080037ec

08000af0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI2_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b24:	2228      	movs	r2, #40	; 0x28
 8000b26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b42:	f001 f91f 	bl	8001d84 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f7ff fe30 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	40003800 	.word	0x40003800

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <HAL_SPI_MspInit+0xc0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d14a      	bne.n	8000c14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <HAL_SPI_MspInit+0xc8>)
 8000bee:	f000 faaf 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_SPI_MspInit+0xcc>)
 8000c10:	f000 fa9e 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40003800 	.word	0x40003800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6a:	2007      	movs	r0, #7
 8000c6c:	f000 fa3c 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f918 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
  }

  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d32:	605a      	str	r2, [r3, #4]
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_isatty>:

int _isatty(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f001 ff2a 	bl	8002bfc <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200000f4 	.word	0x200000f4
 8000ddc:	20000248 	.word	0x20000248

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f001 fee9 	bl	8002c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fc1f 	bl	8000678 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e48:	0800385c 	.word	0x0800385c
  ldr r2, =_sbss
 8000e4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e50:	20000248 	.word	0x20000248

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f931 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fece 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f93b 	bl	8001136 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f911 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200000f8 	.word	0x200000f8

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000f8 	.word	0x200000f8

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <__NVIC_SetPriorityGrouping>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff47 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff5c 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb0 	bl	80010a4 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e16b      	b.n	8001444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 815a 	bne.w	800143e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80b4 	beq.w	800143e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a5f      	ldr	r2, [pc, #380]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_GPIO_Init+0x30c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_GPIO_Init+0x310>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x314>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x226>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x318>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x222>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_Init+0x31c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x21e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <HAL_GPIO_Init+0x324>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	; (800147c <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20a>
 8001356:	2307      	movs	r3, #7
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135a:	2308      	movs	r3, #8
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x310>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a32      	ldr	r2, [pc, #200]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_GPIO_Init+0x334>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_GPIO_Init+0x334>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_GPIO_Init+0x334>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae90 	bls.w	800116c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e267      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d075      	beq.n	80015c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014da:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d00c      	beq.n	8001500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d112      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b82      	ldr	r3, [pc, #520]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x108>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d157      	bne.n	80015c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e242      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x74>
 8001522:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a75      	ldr	r2, [pc, #468]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6c      	ldr	r2, [pc, #432]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001554:	4b69      	ldr	r3, [pc, #420]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a68      	ldr	r2, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a65      	ldr	r2, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcd6 	bl	8000f24 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcd2 	bl	8000f24 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e207      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xc0>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fcc2 	bl	8000f24 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fcbe 	bl	8000f24 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1f3      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0xe8>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4937      	ldr	r1, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	e03a      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x244>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fc77 	bl	8000f24 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fc73 	bl	8000f24 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1a8      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4925      	ldr	r1, [pc, #148]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x244>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fc56 	bl	8000f24 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fc52 	bl	8000f24 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e187      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d036      	beq.n	8001714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d016      	beq.n	80016dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x248>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fc36 	bl	8000f24 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc32 	bl	8000f24 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e167      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80016d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x200>
 80016da:	e01b      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x248>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fc1f 	bl	8000f24 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	e00e      	b.n	8001708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc1b 	bl	8000f24 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d907      	bls.n	8001708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e150      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000
 8001704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ea      	bne.n	80016ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8097 	beq.w	8001850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b7d      	ldr	r3, [pc, #500]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b7a      	ldr	r3, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b77      	ldr	r3, [pc, #476]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a73      	ldr	r2, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fbdb 	bl	8000f24 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fbd7 	bl	8000f24 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e10c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2ea>
 8001798:	4b64      	ldr	r3, [pc, #400]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e01c      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x30c>
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5b      	ldr	r2, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017c8:	4b58      	ldr	r3, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb9c 	bl	8000f24 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fb98 	bl	8000f24 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0cb      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ee      	beq.n	80017f0 <HAL_RCC_OscConfig+0x334>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fb86 	bl	8000f24 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff fb82 	bl	8000f24 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b5      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ee      	bne.n	800181c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a38      	ldr	r2, [pc, #224]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a1 	beq.w	800199c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d05c      	beq.n	8001920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d141      	bne.n	80018f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb56 	bl	8000f24 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb52 	bl	8000f24 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e087      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	019b      	lsls	r3, r3, #6
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb2b 	bl	8000f24 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb27 	bl	8000f24 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e05c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x416>
 80018f0:	e054      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb14 	bl	8000f24 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fb10 	bl	8000f24 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x444>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e038      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x4ec>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d028      	beq.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d121      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001970:	4293      	cmp	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cc      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d90c      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d044      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e067      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa42 	bl	8000f24 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fa3e 	bl	8000f24 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9a2 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08003808 	.word	0x08003808
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b094      	sub	sp, #80	; 0x50
 8001b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
 8001b84:	2300      	movs	r3, #0
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	f200 80e1 	bhi.w	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x34>
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001baa:	e0db      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bb0:	e0db      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb6:	e0d8      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
 8001be6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0159      	lsls	r1, r3, #5
 8001bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfc:	0150      	lsls	r0, r2, #5
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4621      	mov	r1, r4
 8001c04:	1a51      	subs	r1, r2, r1
 8001c06:	6139      	str	r1, [r7, #16]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	4651      	mov	r1, sl
 8001c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c26:	4651      	mov	r1, sl
 8001c28:	018a      	lsls	r2, r1, #6
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c30:	4659      	mov	r1, fp
 8001c32:	eb63 0901 	sbc.w	r9, r3, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	eb18 0303 	adds.w	r3, r8, r3
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	462b      	mov	r3, r5
 8001c58:	eb49 0303 	adc.w	r3, r9, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	024b      	lsls	r3, r1, #9
 8001c6e:	4621      	mov	r1, r4
 8001c70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c74:	4621      	mov	r1, r4
 8001c76:	024a      	lsls	r2, r1, #9
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c88:	f7fe faf2 	bl	8000270 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	0159      	lsls	r1, r3, #5
 8001cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc2:	0150      	lsls	r0, r2, #5
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4641      	mov	r1, r8
 8001cca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cce:	4649      	mov	r1, r9
 8001cd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cec:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	00eb      	lsls	r3, r5, #3
 8001cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	18e3      	adds	r3, r4, r3
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	eb45 0303 	adc.w	r3, r5, r3
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	028b      	lsls	r3, r1, #10
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d28:	4621      	mov	r1, r4
 8001d2a:	028a      	lsls	r2, r1, #10
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	61fa      	str	r2, [r7, #28]
 8001d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3c:	f7fe fa98 	bl	8000270 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3750      	adds	r7, #80	; 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07b      	b.n	8001e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d108      	bne.n	8001db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da6:	d009      	beq.n	8001dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
 8001dae:	e005      	b.n	8001dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fec0 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	ea42 0103 	orr.w	r1, r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f003 0104 	and.w	r1, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f003 0210 	and.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b088      	sub	sp, #32
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_SPI_Transmit+0x22>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e12d      	b.n	8002114 <HAL_SPI_Transmit+0x27e>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec0:	f7ff f830 	bl	8000f24 <HAL_GetTick>
 8001ec4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d002      	beq.n	8001edc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eda:	e116      	b.n	800210a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_Transmit+0x52>
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eec:	e10d      	b.n	800210a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	d10f      	bne.n	8001f56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b40      	cmp	r3, #64	; 0x40
 8001f62:	d007      	beq.n	8001f74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7c:	d14f      	bne.n	800201e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_SPI_Transmit+0xf6>
 8001f86:	8afb      	ldrh	r3, [r7, #22]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d142      	bne.n	8002012 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	1c9a      	adds	r2, r3, #2
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fb0:	e02f      	b.n	8002012 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d112      	bne.n	8001fe6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	1c9a      	adds	r2, r3, #2
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fe4:	e015      	b.n	8002012 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe6:	f7fe ff9d 	bl	8000f24 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d803      	bhi.n	8001ffe <HAL_SPI_Transmit+0x168>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d102      	bne.n	8002004 <HAL_SPI_Transmit+0x16e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002010:	e07b      	b.n	800210a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ca      	bne.n	8001fb2 <HAL_SPI_Transmit+0x11c>
 800201c:	e050      	b.n	80020c0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_SPI_Transmit+0x196>
 8002026:	8afb      	ldrh	r3, [r7, #22]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d144      	bne.n	80020b6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002052:	e030      	b.n	80020b6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d113      	bne.n	800208a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	86da      	strh	r2, [r3, #54]	; 0x36
 8002088:	e015      	b.n	80020b6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800208a:	f7fe ff4b 	bl	8000f24 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d803      	bhi.n	80020a2 <HAL_SPI_Transmit+0x20c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d102      	bne.n	80020a8 <HAL_SPI_Transmit+0x212>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80020b4:	e029      	b.n	800210a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1c9      	bne.n	8002054 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fbdf 	bl	8002888 <SPI_EndRxTxTransaction>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	e003      	b.n	800210a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002112:	7ffb      	ldrb	r3, [r7, #31]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002140:	e0fb      	b.n	800233a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800214a:	d112      	bne.n	8002172 <HAL_SPI_Receive+0x56>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2204      	movs	r2, #4
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f8ef 	bl	800234c <HAL_SPI_TransmitReceive>
 800216e:	4603      	mov	r3, r0
 8002170:	e0e8      	b.n	8002344 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_SPI_Receive+0x64>
 800217c:	2302      	movs	r3, #2
 800217e:	e0e1      	b.n	8002344 <HAL_SPI_Receive+0x228>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002188:	f7fe fecc 	bl	8000f24 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_SPI_Receive+0x7e>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800219e:	e0cc      	b.n	800233a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2204      	movs	r2, #4
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	d10f      	bne.n	8002208 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d007      	beq.n	8002226 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d16a      	bne.n	8002304 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800222e:	e032      	b.n	8002296 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d115      	bne.n	800226a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f103 020c 	add.w	r2, r3, #12
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002268:	e015      	b.n	8002296 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226a:	f7fe fe5b 	bl	8000f24 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d803      	bhi.n	8002282 <HAL_SPI_Receive+0x166>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d102      	bne.n	8002288 <HAL_SPI_Receive+0x16c>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002294:	e051      	b.n	800233a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1c7      	bne.n	8002230 <HAL_SPI_Receive+0x114>
 80022a0:	e035      	b.n	800230e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d113      	bne.n	80022d8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	1c9a      	adds	r2, r3, #2
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022d6:	e015      	b.n	8002304 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d8:	f7fe fe24 	bl	8000f24 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <HAL_SPI_Receive+0x1d4>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Receive+0x1da>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002302:	e01a      	b.n	800233a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1c9      	bne.n	80022a2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fa52 	bl	80027bc <SPI_EndRxTransaction>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
 8002330:	e003      	b.n	800233a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800235a:	2301      	movs	r3, #1
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x26>
 800236e:	2302      	movs	r3, #2
 8002370:	e198      	b.n	80026a4 <HAL_SPI_TransmitReceive+0x358>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800237a:	f7fe fdd3 	bl	8000f24 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002398:	2b01      	cmp	r3, #1
 800239a:	d00f      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x70>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a2:	d107      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x68>
 80023ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d003      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023ba:	e16d      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_SPI_TransmitReceive+0x82>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_SPI_TransmitReceive+0x82>
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023d4:	e160      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d003      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2205      	movs	r2, #5
 80023e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	887a      	ldrh	r2, [r7, #2]
 8002412:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d007      	beq.n	800243e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002446:	d17c      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x10a>
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d16a      	bne.n	800252c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1c9a      	adds	r2, r3, #2
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800247a:	e057      	b.n	800252c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d11b      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x176>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x176>
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d113      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d119      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x1b8>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d014      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	b292      	uxth	r2, r2
 80024e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	1c9a      	adds	r2, r3, #2
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002504:	f7fe fd0e 	bl	8000f24 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002510:	429a      	cmp	r2, r3
 8002512:	d80b      	bhi.n	800252c <HAL_SPI_TransmitReceive+0x1e0>
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d007      	beq.n	800252c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800252a:	e0b5      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1a2      	bne.n	800247c <HAL_SPI_TransmitReceive+0x130>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d19d      	bne.n	800247c <HAL_SPI_TransmitReceive+0x130>
 8002540:	e080      	b.n	8002644 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x204>
 800254a:	8b7b      	ldrh	r3, [r7, #26]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d16f      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002576:	e05b      	b.n	8002630 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d11c      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x274>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x274>
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d114      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d119      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x2b6>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d014      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025fe:	2301      	movs	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002602:	f7fe fc8f 	bl	8000f24 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260e:	429a      	cmp	r2, r3
 8002610:	d803      	bhi.n	800261a <HAL_SPI_TransmitReceive+0x2ce>
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d102      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x2d4>
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800262e:	e033      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d19e      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x22c>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d199      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f91d 	bl	8002888 <SPI_EndRxTxTransaction>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002660:	e01a      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800268e:	e003      	b.n	8002698 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026bc:	f7fe fc32 	bl	8000f24 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026cc:	f7fe fc2a 	bl	8000f24 <HAL_GetTick>
 80026d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	015b      	lsls	r3, r3, #5
 80026d8:	0d1b      	lsrs	r3, r3, #20
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e2:	e054      	b.n	800278e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ea:	d050      	beq.n	800278e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026ec:	f7fe fc1a 	bl	8000f24 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d902      	bls.n	8002702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d13d      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271a:	d111      	bne.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002724:	d004      	beq.n	8002730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272e:	d107      	bne.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002748:	d10f      	bne.n	800276a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e017      	b.n	80027ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3b01      	subs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d19b      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000

080027bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d0:	d111      	bne.n	80027f6 <SPI_EndRxTransaction+0x3a>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027da:	d004      	beq.n	80027e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d107      	bne.n	80027f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fe:	d12a      	bne.n	8002856 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d012      	beq.n	8002830 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ff49 	bl	80026ac <SPI_WaitFlagStateUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02d      	beq.n	800287c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e026      	b.n	800287e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff36 	bl	80026ac <SPI_WaitFlagStateUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01a      	beq.n	800287c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e013      	b.n	800287e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	2101      	movs	r1, #1
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff ff23 	bl	80026ac <SPI_WaitFlagStateUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e000      	b.n	800287e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2201      	movs	r2, #1
 800289c:	2102      	movs	r1, #2
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff ff04 	bl	80026ac <SPI_WaitFlagStateUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e032      	b.n	8002920 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <SPI_EndRxTxTransaction+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <SPI_EndRxTxTransaction+0xa4>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0d5b      	lsrs	r3, r3, #21
 80028c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d8:	d112      	bne.n	8002900 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fee1 	bl	80026ac <SPI_WaitFlagStateUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e00f      	b.n	8002920 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3b01      	subs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d0f2      	beq.n	8002900 <SPI_EndRxTxTransaction+0x78>
 800291a:	e000      	b.n	800291e <SPI_EndRxTxTransaction+0x96>
        break;
 800291c:	bf00      	nop
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000000 	.word	0x20000000
 800292c:	165e9f81 	.word	0x165e9f81

08002930 <std>:
 8002930:	2300      	movs	r3, #0
 8002932:	b510      	push	{r4, lr}
 8002934:	4604      	mov	r4, r0
 8002936:	e9c0 3300 	strd	r3, r3, [r0]
 800293a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800293e:	6083      	str	r3, [r0, #8]
 8002940:	8181      	strh	r1, [r0, #12]
 8002942:	6643      	str	r3, [r0, #100]	; 0x64
 8002944:	81c2      	strh	r2, [r0, #14]
 8002946:	6183      	str	r3, [r0, #24]
 8002948:	4619      	mov	r1, r3
 800294a:	2208      	movs	r2, #8
 800294c:	305c      	adds	r0, #92	; 0x5c
 800294e:	f000 f906 	bl	8002b5e <memset>
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <std+0x58>)
 8002954:	6263      	str	r3, [r4, #36]	; 0x24
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <std+0x5c>)
 8002958:	62a3      	str	r3, [r4, #40]	; 0x28
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <std+0x60>)
 800295c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <std+0x64>)
 8002960:	6323      	str	r3, [r4, #48]	; 0x30
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <std+0x68>)
 8002964:	6224      	str	r4, [r4, #32]
 8002966:	429c      	cmp	r4, r3
 8002968:	d006      	beq.n	8002978 <std+0x48>
 800296a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800296e:	4294      	cmp	r4, r2
 8002970:	d002      	beq.n	8002978 <std+0x48>
 8002972:	33d0      	adds	r3, #208	; 0xd0
 8002974:	429c      	cmp	r4, r3
 8002976:	d105      	bne.n	8002984 <std+0x54>
 8002978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002980:	f000 b966 	b.w	8002c50 <__retarget_lock_init_recursive>
 8002984:	bd10      	pop	{r4, pc}
 8002986:	bf00      	nop
 8002988:	08002ad9 	.word	0x08002ad9
 800298c:	08002afb 	.word	0x08002afb
 8002990:	08002b33 	.word	0x08002b33
 8002994:	08002b57 	.word	0x08002b57
 8002998:	200000fc 	.word	0x200000fc

0800299c <stdio_exit_handler>:
 800299c:	4a02      	ldr	r2, [pc, #8]	; (80029a8 <stdio_exit_handler+0xc>)
 800299e:	4903      	ldr	r1, [pc, #12]	; (80029ac <stdio_exit_handler+0x10>)
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <stdio_exit_handler+0x14>)
 80029a2:	f000 b869 	b.w	8002a78 <_fwalk_sglue>
 80029a6:	bf00      	nop
 80029a8:	2000000c 	.word	0x2000000c
 80029ac:	080034fd 	.word	0x080034fd
 80029b0:	20000018 	.word	0x20000018

080029b4 <cleanup_stdio>:
 80029b4:	6841      	ldr	r1, [r0, #4]
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <cleanup_stdio+0x34>)
 80029b8:	4299      	cmp	r1, r3
 80029ba:	b510      	push	{r4, lr}
 80029bc:	4604      	mov	r4, r0
 80029be:	d001      	beq.n	80029c4 <cleanup_stdio+0x10>
 80029c0:	f000 fd9c 	bl	80034fc <_fflush_r>
 80029c4:	68a1      	ldr	r1, [r4, #8]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <cleanup_stdio+0x38>)
 80029c8:	4299      	cmp	r1, r3
 80029ca:	d002      	beq.n	80029d2 <cleanup_stdio+0x1e>
 80029cc:	4620      	mov	r0, r4
 80029ce:	f000 fd95 	bl	80034fc <_fflush_r>
 80029d2:	68e1      	ldr	r1, [r4, #12]
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <cleanup_stdio+0x3c>)
 80029d6:	4299      	cmp	r1, r3
 80029d8:	d004      	beq.n	80029e4 <cleanup_stdio+0x30>
 80029da:	4620      	mov	r0, r4
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e0:	f000 bd8c 	b.w	80034fc <_fflush_r>
 80029e4:	bd10      	pop	{r4, pc}
 80029e6:	bf00      	nop
 80029e8:	200000fc 	.word	0x200000fc
 80029ec:	20000164 	.word	0x20000164
 80029f0:	200001cc 	.word	0x200001cc

080029f4 <global_stdio_init.part.0>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <global_stdio_init.part.0+0x30>)
 80029f8:	4c0b      	ldr	r4, [pc, #44]	; (8002a28 <global_stdio_init.part.0+0x34>)
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <global_stdio_init.part.0+0x38>)
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	4620      	mov	r0, r4
 8002a00:	2200      	movs	r2, #0
 8002a02:	2104      	movs	r1, #4
 8002a04:	f7ff ff94 	bl	8002930 <std>
 8002a08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2109      	movs	r1, #9
 8002a10:	f7ff ff8e 	bl	8002930 <std>
 8002a14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002a18:	2202      	movs	r2, #2
 8002a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a1e:	2112      	movs	r1, #18
 8002a20:	f7ff bf86 	b.w	8002930 <std>
 8002a24:	20000234 	.word	0x20000234
 8002a28:	200000fc 	.word	0x200000fc
 8002a2c:	0800299d 	.word	0x0800299d

08002a30 <__sfp_lock_acquire>:
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <__sfp_lock_acquire+0x8>)
 8002a32:	f000 b90e 	b.w	8002c52 <__retarget_lock_acquire_recursive>
 8002a36:	bf00      	nop
 8002a38:	2000023d 	.word	0x2000023d

08002a3c <__sfp_lock_release>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <__sfp_lock_release+0x8>)
 8002a3e:	f000 b909 	b.w	8002c54 <__retarget_lock_release_recursive>
 8002a42:	bf00      	nop
 8002a44:	2000023d 	.word	0x2000023d

08002a48 <__sinit>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	f7ff fff0 	bl	8002a30 <__sfp_lock_acquire>
 8002a50:	6a23      	ldr	r3, [r4, #32]
 8002a52:	b11b      	cbz	r3, 8002a5c <__sinit+0x14>
 8002a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a58:	f7ff bff0 	b.w	8002a3c <__sfp_lock_release>
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <__sinit+0x28>)
 8002a5e:	6223      	str	r3, [r4, #32]
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <__sinit+0x2c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f5      	bne.n	8002a54 <__sinit+0xc>
 8002a68:	f7ff ffc4 	bl	80029f4 <global_stdio_init.part.0>
 8002a6c:	e7f2      	b.n	8002a54 <__sinit+0xc>
 8002a6e:	bf00      	nop
 8002a70:	080029b5 	.word	0x080029b5
 8002a74:	20000234 	.word	0x20000234

08002a78 <_fwalk_sglue>:
 8002a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	4688      	mov	r8, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	2600      	movs	r6, #0
 8002a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a88:	f1b9 0901 	subs.w	r9, r9, #1
 8002a8c:	d505      	bpl.n	8002a9a <_fwalk_sglue+0x22>
 8002a8e:	6824      	ldr	r4, [r4, #0]
 8002a90:	2c00      	cmp	r4, #0
 8002a92:	d1f7      	bne.n	8002a84 <_fwalk_sglue+0xc>
 8002a94:	4630      	mov	r0, r6
 8002a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a9a:	89ab      	ldrh	r3, [r5, #12]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d907      	bls.n	8002ab0 <_fwalk_sglue+0x38>
 8002aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	d003      	beq.n	8002ab0 <_fwalk_sglue+0x38>
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4638      	mov	r0, r7
 8002aac:	47c0      	blx	r8
 8002aae:	4306      	orrs	r6, r0
 8002ab0:	3568      	adds	r5, #104	; 0x68
 8002ab2:	e7e9      	b.n	8002a88 <_fwalk_sglue+0x10>

08002ab4 <iprintf>:
 8002ab4:	b40f      	push	{r0, r1, r2, r3}
 8002ab6:	b507      	push	{r0, r1, r2, lr}
 8002ab8:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <iprintf+0x20>)
 8002aba:	ab04      	add	r3, sp, #16
 8002abc:	6808      	ldr	r0, [r1, #0]
 8002abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac2:	6881      	ldr	r1, [r0, #8]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f000 f9e9 	bl	8002e9c <_vfiprintf_r>
 8002aca:	b003      	add	sp, #12
 8002acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad0:	b004      	add	sp, #16
 8002ad2:	4770      	bx	lr
 8002ad4:	20000064 	.word	0x20000064

08002ad8 <__sread>:
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	460c      	mov	r4, r1
 8002adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae0:	f000 f868 	bl	8002bb4 <_read_r>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	bfab      	itete	ge
 8002ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002aea:	89a3      	ldrhlt	r3, [r4, #12]
 8002aec:	181b      	addge	r3, r3, r0
 8002aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002af2:	bfac      	ite	ge
 8002af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002af6:	81a3      	strhlt	r3, [r4, #12]
 8002af8:	bd10      	pop	{r4, pc}

08002afa <__swrite>:
 8002afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afe:	461f      	mov	r7, r3
 8002b00:	898b      	ldrh	r3, [r1, #12]
 8002b02:	05db      	lsls	r3, r3, #23
 8002b04:	4605      	mov	r5, r0
 8002b06:	460c      	mov	r4, r1
 8002b08:	4616      	mov	r6, r2
 8002b0a:	d505      	bpl.n	8002b18 <__swrite+0x1e>
 8002b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b10:	2302      	movs	r3, #2
 8002b12:	2200      	movs	r2, #0
 8002b14:	f000 f83c 	bl	8002b90 <_lseek_r>
 8002b18:	89a3      	ldrh	r3, [r4, #12]
 8002b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b22:	81a3      	strh	r3, [r4, #12]
 8002b24:	4632      	mov	r2, r6
 8002b26:	463b      	mov	r3, r7
 8002b28:	4628      	mov	r0, r5
 8002b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2e:	f000 b853 	b.w	8002bd8 <_write_r>

08002b32 <__sseek>:
 8002b32:	b510      	push	{r4, lr}
 8002b34:	460c      	mov	r4, r1
 8002b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b3a:	f000 f829 	bl	8002b90 <_lseek_r>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	bf15      	itete	ne
 8002b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b4e:	81a3      	strheq	r3, [r4, #12]
 8002b50:	bf18      	it	ne
 8002b52:	81a3      	strhne	r3, [r4, #12]
 8002b54:	bd10      	pop	{r4, pc}

08002b56 <__sclose>:
 8002b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b5a:	f000 b809 	b.w	8002b70 <_close_r>

08002b5e <memset>:
 8002b5e:	4402      	add	r2, r0
 8002b60:	4603      	mov	r3, r0
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d100      	bne.n	8002b68 <memset+0xa>
 8002b66:	4770      	bx	lr
 8002b68:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6c:	e7f9      	b.n	8002b62 <memset+0x4>
	...

08002b70 <_close_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_close_r+0x1c>)
 8002b74:	2300      	movs	r3, #0
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	f7fe f8c5 	bl	8000d0a <_close>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_close_r+0x1a>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_close_r+0x1a>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	20000238 	.word	0x20000238

08002b90 <_lseek_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d07      	ldr	r5, [pc, #28]	; (8002bb0 <_lseek_r+0x20>)
 8002b94:	4604      	mov	r4, r0
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	602a      	str	r2, [r5, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7fe f8da 	bl	8000d58 <_lseek>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d102      	bne.n	8002bae <_lseek_r+0x1e>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	b103      	cbz	r3, 8002bae <_lseek_r+0x1e>
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
 8002bb0:	20000238 	.word	0x20000238

08002bb4 <_read_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4d07      	ldr	r5, [pc, #28]	; (8002bd4 <_read_r+0x20>)
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4608      	mov	r0, r1
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	602a      	str	r2, [r5, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7fe f884 	bl	8000cd0 <_read>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_read_r+0x1e>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_read_r+0x1e>
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	20000238 	.word	0x20000238

08002bd8 <_write_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d07      	ldr	r5, [pc, #28]	; (8002bf8 <_write_r+0x20>)
 8002bdc:	4604      	mov	r4, r0
 8002bde:	4608      	mov	r0, r1
 8002be0:	4611      	mov	r1, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	602a      	str	r2, [r5, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fd fdc6 	bl	8000778 <_write>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d102      	bne.n	8002bf6 <_write_r+0x1e>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	b103      	cbz	r3, 8002bf6 <_write_r+0x1e>
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
 8002bf8:	20000238 	.word	0x20000238

08002bfc <__errno>:
 8002bfc:	4b01      	ldr	r3, [pc, #4]	; (8002c04 <__errno+0x8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000064 	.word	0x20000064

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	4d0d      	ldr	r5, [pc, #52]	; (8002c40 <__libc_init_array+0x38>)
 8002c0c:	4c0d      	ldr	r4, [pc, #52]	; (8002c44 <__libc_init_array+0x3c>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	2600      	movs	r6, #0
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	4d0b      	ldr	r5, [pc, #44]	; (8002c48 <__libc_init_array+0x40>)
 8002c1a:	4c0c      	ldr	r4, [pc, #48]	; (8002c4c <__libc_init_array+0x44>)
 8002c1c:	f000 fdc0 	bl	80037a0 <_init>
 8002c20:	1b64      	subs	r4, r4, r5
 8002c22:	10a4      	asrs	r4, r4, #2
 8002c24:	2600      	movs	r6, #0
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	08003854 	.word	0x08003854
 8002c44:	08003854 	.word	0x08003854
 8002c48:	08003854 	.word	0x08003854
 8002c4c:	08003858 	.word	0x08003858

08002c50 <__retarget_lock_init_recursive>:
 8002c50:	4770      	bx	lr

08002c52 <__retarget_lock_acquire_recursive>:
 8002c52:	4770      	bx	lr

08002c54 <__retarget_lock_release_recursive>:
 8002c54:	4770      	bx	lr
	...

08002c58 <_free_r>:
 8002c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	d044      	beq.n	8002ce8 <_free_r+0x90>
 8002c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c62:	9001      	str	r0, [sp, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f1a1 0404 	sub.w	r4, r1, #4
 8002c6a:	bfb8      	it	lt
 8002c6c:	18e4      	addlt	r4, r4, r3
 8002c6e:	f000 f8df 	bl	8002e30 <__malloc_lock>
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <_free_r+0x94>)
 8002c74:	9801      	ldr	r0, [sp, #4]
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	b933      	cbnz	r3, 8002c88 <_free_r+0x30>
 8002c7a:	6063      	str	r3, [r4, #4]
 8002c7c:	6014      	str	r4, [r2, #0]
 8002c7e:	b003      	add	sp, #12
 8002c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c84:	f000 b8da 	b.w	8002e3c <__malloc_unlock>
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	d908      	bls.n	8002c9e <_free_r+0x46>
 8002c8c:	6825      	ldr	r5, [r4, #0]
 8002c8e:	1961      	adds	r1, r4, r5
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf01      	itttt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	1949      	addeq	r1, r1, r5
 8002c9a:	6021      	streq	r1, [r4, #0]
 8002c9c:	e7ed      	b.n	8002c7a <_free_r+0x22>
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	b10b      	cbz	r3, 8002ca8 <_free_r+0x50>
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d9fa      	bls.n	8002c9e <_free_r+0x46>
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	1855      	adds	r5, r2, r1
 8002cac:	42a5      	cmp	r5, r4
 8002cae:	d10b      	bne.n	8002cc8 <_free_r+0x70>
 8002cb0:	6824      	ldr	r4, [r4, #0]
 8002cb2:	4421      	add	r1, r4
 8002cb4:	1854      	adds	r4, r2, r1
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	6011      	str	r1, [r2, #0]
 8002cba:	d1e0      	bne.n	8002c7e <_free_r+0x26>
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	6053      	str	r3, [r2, #4]
 8002cc2:	440c      	add	r4, r1
 8002cc4:	6014      	str	r4, [r2, #0]
 8002cc6:	e7da      	b.n	8002c7e <_free_r+0x26>
 8002cc8:	d902      	bls.n	8002cd0 <_free_r+0x78>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	6003      	str	r3, [r0, #0]
 8002cce:	e7d6      	b.n	8002c7e <_free_r+0x26>
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	1961      	adds	r1, r4, r5
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	bf04      	itt	eq
 8002cd8:	6819      	ldreq	r1, [r3, #0]
 8002cda:	685b      	ldreq	r3, [r3, #4]
 8002cdc:	6063      	str	r3, [r4, #4]
 8002cde:	bf04      	itt	eq
 8002ce0:	1949      	addeq	r1, r1, r5
 8002ce2:	6021      	streq	r1, [r4, #0]
 8002ce4:	6054      	str	r4, [r2, #4]
 8002ce6:	e7ca      	b.n	8002c7e <_free_r+0x26>
 8002ce8:	b003      	add	sp, #12
 8002cea:	bd30      	pop	{r4, r5, pc}
 8002cec:	20000240 	.word	0x20000240

08002cf0 <sbrk_aligned>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	4e0e      	ldr	r6, [pc, #56]	; (8002d2c <sbrk_aligned+0x3c>)
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	6831      	ldr	r1, [r6, #0]
 8002cf8:	4605      	mov	r5, r0
 8002cfa:	b911      	cbnz	r1, 8002d02 <sbrk_aligned+0x12>
 8002cfc:	f000 fcbc 	bl	8003678 <_sbrk_r>
 8002d00:	6030      	str	r0, [r6, #0]
 8002d02:	4621      	mov	r1, r4
 8002d04:	4628      	mov	r0, r5
 8002d06:	f000 fcb7 	bl	8003678 <_sbrk_r>
 8002d0a:	1c43      	adds	r3, r0, #1
 8002d0c:	d00a      	beq.n	8002d24 <sbrk_aligned+0x34>
 8002d0e:	1cc4      	adds	r4, r0, #3
 8002d10:	f024 0403 	bic.w	r4, r4, #3
 8002d14:	42a0      	cmp	r0, r4
 8002d16:	d007      	beq.n	8002d28 <sbrk_aligned+0x38>
 8002d18:	1a21      	subs	r1, r4, r0
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 fcac 	bl	8003678 <_sbrk_r>
 8002d20:	3001      	adds	r0, #1
 8002d22:	d101      	bne.n	8002d28 <sbrk_aligned+0x38>
 8002d24:	f04f 34ff 	mov.w	r4, #4294967295
 8002d28:	4620      	mov	r0, r4
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	20000244 	.word	0x20000244

08002d30 <_malloc_r>:
 8002d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d34:	1ccd      	adds	r5, r1, #3
 8002d36:	f025 0503 	bic.w	r5, r5, #3
 8002d3a:	3508      	adds	r5, #8
 8002d3c:	2d0c      	cmp	r5, #12
 8002d3e:	bf38      	it	cc
 8002d40:	250c      	movcc	r5, #12
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	4607      	mov	r7, r0
 8002d46:	db01      	blt.n	8002d4c <_malloc_r+0x1c>
 8002d48:	42a9      	cmp	r1, r5
 8002d4a:	d905      	bls.n	8002d58 <_malloc_r+0x28>
 8002d4c:	230c      	movs	r3, #12
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	2600      	movs	r6, #0
 8002d52:	4630      	mov	r0, r6
 8002d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e2c <_malloc_r+0xfc>
 8002d5c:	f000 f868 	bl	8002e30 <__malloc_lock>
 8002d60:	f8d8 3000 	ldr.w	r3, [r8]
 8002d64:	461c      	mov	r4, r3
 8002d66:	bb5c      	cbnz	r4, 8002dc0 <_malloc_r+0x90>
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	f7ff ffc0 	bl	8002cf0 <sbrk_aligned>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	4604      	mov	r4, r0
 8002d74:	d155      	bne.n	8002e22 <_malloc_r+0xf2>
 8002d76:	f8d8 4000 	ldr.w	r4, [r8]
 8002d7a:	4626      	mov	r6, r4
 8002d7c:	2e00      	cmp	r6, #0
 8002d7e:	d145      	bne.n	8002e0c <_malloc_r+0xdc>
 8002d80:	2c00      	cmp	r4, #0
 8002d82:	d048      	beq.n	8002e16 <_malloc_r+0xe6>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	4631      	mov	r1, r6
 8002d88:	4638      	mov	r0, r7
 8002d8a:	eb04 0903 	add.w	r9, r4, r3
 8002d8e:	f000 fc73 	bl	8003678 <_sbrk_r>
 8002d92:	4581      	cmp	r9, r0
 8002d94:	d13f      	bne.n	8002e16 <_malloc_r+0xe6>
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	1a6d      	subs	r5, r5, r1
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	f7ff ffa7 	bl	8002cf0 <sbrk_aligned>
 8002da2:	3001      	adds	r0, #1
 8002da4:	d037      	beq.n	8002e16 <_malloc_r+0xe6>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	442b      	add	r3, r5
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	f8d8 3000 	ldr.w	r3, [r8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d038      	beq.n	8002e26 <_malloc_r+0xf6>
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	42a2      	cmp	r2, r4
 8002db8:	d12b      	bne.n	8002e12 <_malloc_r+0xe2>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e00f      	b.n	8002de0 <_malloc_r+0xb0>
 8002dc0:	6822      	ldr	r2, [r4, #0]
 8002dc2:	1b52      	subs	r2, r2, r5
 8002dc4:	d41f      	bmi.n	8002e06 <_malloc_r+0xd6>
 8002dc6:	2a0b      	cmp	r2, #11
 8002dc8:	d917      	bls.n	8002dfa <_malloc_r+0xca>
 8002dca:	1961      	adds	r1, r4, r5
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	6025      	str	r5, [r4, #0]
 8002dd0:	bf18      	it	ne
 8002dd2:	6059      	strne	r1, [r3, #4]
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	bf08      	it	eq
 8002dd8:	f8c8 1000 	streq.w	r1, [r8]
 8002ddc:	5162      	str	r2, [r4, r5]
 8002dde:	604b      	str	r3, [r1, #4]
 8002de0:	4638      	mov	r0, r7
 8002de2:	f104 060b 	add.w	r6, r4, #11
 8002de6:	f000 f829 	bl	8002e3c <__malloc_unlock>
 8002dea:	f026 0607 	bic.w	r6, r6, #7
 8002dee:	1d23      	adds	r3, r4, #4
 8002df0:	1af2      	subs	r2, r6, r3
 8002df2:	d0ae      	beq.n	8002d52 <_malloc_r+0x22>
 8002df4:	1b9b      	subs	r3, r3, r6
 8002df6:	50a3      	str	r3, [r4, r2]
 8002df8:	e7ab      	b.n	8002d52 <_malloc_r+0x22>
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	d1dd      	bne.n	8002dbc <_malloc_r+0x8c>
 8002e00:	f8c8 2000 	str.w	r2, [r8]
 8002e04:	e7ec      	b.n	8002de0 <_malloc_r+0xb0>
 8002e06:	4623      	mov	r3, r4
 8002e08:	6864      	ldr	r4, [r4, #4]
 8002e0a:	e7ac      	b.n	8002d66 <_malloc_r+0x36>
 8002e0c:	4634      	mov	r4, r6
 8002e0e:	6876      	ldr	r6, [r6, #4]
 8002e10:	e7b4      	b.n	8002d7c <_malloc_r+0x4c>
 8002e12:	4613      	mov	r3, r2
 8002e14:	e7cc      	b.n	8002db0 <_malloc_r+0x80>
 8002e16:	230c      	movs	r3, #12
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	f000 f80e 	bl	8002e3c <__malloc_unlock>
 8002e20:	e797      	b.n	8002d52 <_malloc_r+0x22>
 8002e22:	6025      	str	r5, [r4, #0]
 8002e24:	e7dc      	b.n	8002de0 <_malloc_r+0xb0>
 8002e26:	605b      	str	r3, [r3, #4]
 8002e28:	deff      	udf	#255	; 0xff
 8002e2a:	bf00      	nop
 8002e2c:	20000240 	.word	0x20000240

08002e30 <__malloc_lock>:
 8002e30:	4801      	ldr	r0, [pc, #4]	; (8002e38 <__malloc_lock+0x8>)
 8002e32:	f7ff bf0e 	b.w	8002c52 <__retarget_lock_acquire_recursive>
 8002e36:	bf00      	nop
 8002e38:	2000023c 	.word	0x2000023c

08002e3c <__malloc_unlock>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <__malloc_unlock+0x8>)
 8002e3e:	f7ff bf09 	b.w	8002c54 <__retarget_lock_release_recursive>
 8002e42:	bf00      	nop
 8002e44:	2000023c 	.word	0x2000023c

08002e48 <__sfputc_r>:
 8002e48:	6893      	ldr	r3, [r2, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	b410      	push	{r4}
 8002e50:	6093      	str	r3, [r2, #8]
 8002e52:	da08      	bge.n	8002e66 <__sfputc_r+0x1e>
 8002e54:	6994      	ldr	r4, [r2, #24]
 8002e56:	42a3      	cmp	r3, r4
 8002e58:	db01      	blt.n	8002e5e <__sfputc_r+0x16>
 8002e5a:	290a      	cmp	r1, #10
 8002e5c:	d103      	bne.n	8002e66 <__sfputc_r+0x1e>
 8002e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e62:	f000 bb73 	b.w	800354c <__swbuf_r>
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	1c58      	adds	r0, r3, #1
 8002e6a:	6010      	str	r0, [r2, #0]
 8002e6c:	7019      	strb	r1, [r3, #0]
 8002e6e:	4608      	mov	r0, r1
 8002e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <__sfputs_r>:
 8002e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e78:	4606      	mov	r6, r0
 8002e7a:	460f      	mov	r7, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	18d5      	adds	r5, r2, r3
 8002e80:	42ac      	cmp	r4, r5
 8002e82:	d101      	bne.n	8002e88 <__sfputs_r+0x12>
 8002e84:	2000      	movs	r0, #0
 8002e86:	e007      	b.n	8002e98 <__sfputs_r+0x22>
 8002e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e8c:	463a      	mov	r2, r7
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f7ff ffda 	bl	8002e48 <__sfputc_r>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d1f3      	bne.n	8002e80 <__sfputs_r+0xa>
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e9c <_vfiprintf_r>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	b09d      	sub	sp, #116	; 0x74
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	4698      	mov	r8, r3
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	b118      	cbz	r0, 8002eb4 <_vfiprintf_r+0x18>
 8002eac:	6a03      	ldr	r3, [r0, #32]
 8002eae:	b90b      	cbnz	r3, 8002eb4 <_vfiprintf_r+0x18>
 8002eb0:	f7ff fdca 	bl	8002a48 <__sinit>
 8002eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002eb6:	07d9      	lsls	r1, r3, #31
 8002eb8:	d405      	bmi.n	8002ec6 <_vfiprintf_r+0x2a>
 8002eba:	89ab      	ldrh	r3, [r5, #12]
 8002ebc:	059a      	lsls	r2, r3, #22
 8002ebe:	d402      	bmi.n	8002ec6 <_vfiprintf_r+0x2a>
 8002ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ec2:	f7ff fec6 	bl	8002c52 <__retarget_lock_acquire_recursive>
 8002ec6:	89ab      	ldrh	r3, [r5, #12]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	d501      	bpl.n	8002ed0 <_vfiprintf_r+0x34>
 8002ecc:	692b      	ldr	r3, [r5, #16]
 8002ece:	b99b      	cbnz	r3, 8002ef8 <_vfiprintf_r+0x5c>
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f000 fb78 	bl	80035c8 <__swsetup_r>
 8002ed8:	b170      	cbz	r0, 8002ef8 <_vfiprintf_r+0x5c>
 8002eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002edc:	07dc      	lsls	r4, r3, #31
 8002ede:	d504      	bpl.n	8002eea <_vfiprintf_r+0x4e>
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	b01d      	add	sp, #116	; 0x74
 8002ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eea:	89ab      	ldrh	r3, [r5, #12]
 8002eec:	0598      	lsls	r0, r3, #22
 8002eee:	d4f7      	bmi.n	8002ee0 <_vfiprintf_r+0x44>
 8002ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ef2:	f7ff feaf 	bl	8002c54 <__retarget_lock_release_recursive>
 8002ef6:	e7f3      	b.n	8002ee0 <_vfiprintf_r+0x44>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	2320      	movs	r3, #32
 8002efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f06:	2330      	movs	r3, #48	; 0x30
 8002f08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80030bc <_vfiprintf_r+0x220>
 8002f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f10:	f04f 0901 	mov.w	r9, #1
 8002f14:	4623      	mov	r3, r4
 8002f16:	469a      	mov	sl, r3
 8002f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f1c:	b10a      	cbz	r2, 8002f22 <_vfiprintf_r+0x86>
 8002f1e:	2a25      	cmp	r2, #37	; 0x25
 8002f20:	d1f9      	bne.n	8002f16 <_vfiprintf_r+0x7a>
 8002f22:	ebba 0b04 	subs.w	fp, sl, r4
 8002f26:	d00b      	beq.n	8002f40 <_vfiprintf_r+0xa4>
 8002f28:	465b      	mov	r3, fp
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f7ff ffa1 	bl	8002e76 <__sfputs_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	f000 80a9 	beq.w	800308c <_vfiprintf_r+0x1f0>
 8002f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f3c:	445a      	add	r2, fp
 8002f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f40:	f89a 3000 	ldrb.w	r3, [sl]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a1 	beq.w	800308c <_vfiprintf_r+0x1f0>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f54:	f10a 0a01 	add.w	sl, sl, #1
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	9307      	str	r3, [sp, #28]
 8002f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f60:	931a      	str	r3, [sp, #104]	; 0x68
 8002f62:	4654      	mov	r4, sl
 8002f64:	2205      	movs	r2, #5
 8002f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f6a:	4854      	ldr	r0, [pc, #336]	; (80030bc <_vfiprintf_r+0x220>)
 8002f6c:	f7fd f930 	bl	80001d0 <memchr>
 8002f70:	9a04      	ldr	r2, [sp, #16]
 8002f72:	b9d8      	cbnz	r0, 8002fac <_vfiprintf_r+0x110>
 8002f74:	06d1      	lsls	r1, r2, #27
 8002f76:	bf44      	itt	mi
 8002f78:	2320      	movmi	r3, #32
 8002f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f7e:	0713      	lsls	r3, r2, #28
 8002f80:	bf44      	itt	mi
 8002f82:	232b      	movmi	r3, #43	; 0x2b
 8002f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f88:	f89a 3000 	ldrb.w	r3, [sl]
 8002f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f8e:	d015      	beq.n	8002fbc <_vfiprintf_r+0x120>
 8002f90:	9a07      	ldr	r2, [sp, #28]
 8002f92:	4654      	mov	r4, sl
 8002f94:	2000      	movs	r0, #0
 8002f96:	f04f 0c0a 	mov.w	ip, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa0:	3b30      	subs	r3, #48	; 0x30
 8002fa2:	2b09      	cmp	r3, #9
 8002fa4:	d94d      	bls.n	8003042 <_vfiprintf_r+0x1a6>
 8002fa6:	b1b0      	cbz	r0, 8002fd6 <_vfiprintf_r+0x13a>
 8002fa8:	9207      	str	r2, [sp, #28]
 8002faa:	e014      	b.n	8002fd6 <_vfiprintf_r+0x13a>
 8002fac:	eba0 0308 	sub.w	r3, r0, r8
 8002fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	9304      	str	r3, [sp, #16]
 8002fb8:	46a2      	mov	sl, r4
 8002fba:	e7d2      	b.n	8002f62 <_vfiprintf_r+0xc6>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	1d19      	adds	r1, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9103      	str	r1, [sp, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bfbb      	ittet	lt
 8002fc8:	425b      	neglt	r3, r3
 8002fca:	f042 0202 	orrlt.w	r2, r2, #2
 8002fce:	9307      	strge	r3, [sp, #28]
 8002fd0:	9307      	strlt	r3, [sp, #28]
 8002fd2:	bfb8      	it	lt
 8002fd4:	9204      	strlt	r2, [sp, #16]
 8002fd6:	7823      	ldrb	r3, [r4, #0]
 8002fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fda:	d10c      	bne.n	8002ff6 <_vfiprintf_r+0x15a>
 8002fdc:	7863      	ldrb	r3, [r4, #1]
 8002fde:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe0:	d134      	bne.n	800304c <_vfiprintf_r+0x1b0>
 8002fe2:	9b03      	ldr	r3, [sp, #12]
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	9203      	str	r2, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bfb8      	it	lt
 8002fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ff2:	3402      	adds	r4, #2
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80030cc <_vfiprintf_r+0x230>
 8002ffa:	7821      	ldrb	r1, [r4, #0]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4650      	mov	r0, sl
 8003000:	f7fd f8e6 	bl	80001d0 <memchr>
 8003004:	b138      	cbz	r0, 8003016 <_vfiprintf_r+0x17a>
 8003006:	9b04      	ldr	r3, [sp, #16]
 8003008:	eba0 000a 	sub.w	r0, r0, sl
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	4082      	lsls	r2, r0
 8003010:	4313      	orrs	r3, r2
 8003012:	3401      	adds	r4, #1
 8003014:	9304      	str	r3, [sp, #16]
 8003016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301a:	4829      	ldr	r0, [pc, #164]	; (80030c0 <_vfiprintf_r+0x224>)
 800301c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003020:	2206      	movs	r2, #6
 8003022:	f7fd f8d5 	bl	80001d0 <memchr>
 8003026:	2800      	cmp	r0, #0
 8003028:	d03f      	beq.n	80030aa <_vfiprintf_r+0x20e>
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <_vfiprintf_r+0x228>)
 800302c:	bb1b      	cbnz	r3, 8003076 <_vfiprintf_r+0x1da>
 800302e:	9b03      	ldr	r3, [sp, #12]
 8003030:	3307      	adds	r3, #7
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	3308      	adds	r3, #8
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303c:	443b      	add	r3, r7
 800303e:	9309      	str	r3, [sp, #36]	; 0x24
 8003040:	e768      	b.n	8002f14 <_vfiprintf_r+0x78>
 8003042:	fb0c 3202 	mla	r2, ip, r2, r3
 8003046:	460c      	mov	r4, r1
 8003048:	2001      	movs	r0, #1
 800304a:	e7a6      	b.n	8002f9a <_vfiprintf_r+0xfe>
 800304c:	2300      	movs	r3, #0
 800304e:	3401      	adds	r4, #1
 8003050:	9305      	str	r3, [sp, #20]
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 0c0a 	mov.w	ip, #10
 8003058:	4620      	mov	r0, r4
 800305a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305e:	3a30      	subs	r2, #48	; 0x30
 8003060:	2a09      	cmp	r2, #9
 8003062:	d903      	bls.n	800306c <_vfiprintf_r+0x1d0>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0c6      	beq.n	8002ff6 <_vfiprintf_r+0x15a>
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	e7c4      	b.n	8002ff6 <_vfiprintf_r+0x15a>
 800306c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003070:	4604      	mov	r4, r0
 8003072:	2301      	movs	r3, #1
 8003074:	e7f0      	b.n	8003058 <_vfiprintf_r+0x1bc>
 8003076:	ab03      	add	r3, sp, #12
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462a      	mov	r2, r5
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <_vfiprintf_r+0x22c>)
 800307e:	a904      	add	r1, sp, #16
 8003080:	4630      	mov	r0, r6
 8003082:	f3af 8000 	nop.w
 8003086:	4607      	mov	r7, r0
 8003088:	1c78      	adds	r0, r7, #1
 800308a:	d1d6      	bne.n	800303a <_vfiprintf_r+0x19e>
 800308c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800308e:	07d9      	lsls	r1, r3, #31
 8003090:	d405      	bmi.n	800309e <_vfiprintf_r+0x202>
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	059a      	lsls	r2, r3, #22
 8003096:	d402      	bmi.n	800309e <_vfiprintf_r+0x202>
 8003098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800309a:	f7ff fddb 	bl	8002c54 <__retarget_lock_release_recursive>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	065b      	lsls	r3, r3, #25
 80030a2:	f53f af1d 	bmi.w	8002ee0 <_vfiprintf_r+0x44>
 80030a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030a8:	e71c      	b.n	8002ee4 <_vfiprintf_r+0x48>
 80030aa:	ab03      	add	r3, sp, #12
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	462a      	mov	r2, r5
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <_vfiprintf_r+0x22c>)
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 f879 	bl	80031ac <_printf_i>
 80030ba:	e7e4      	b.n	8003086 <_vfiprintf_r+0x1ea>
 80030bc:	08003818 	.word	0x08003818
 80030c0:	08003822 	.word	0x08003822
 80030c4:	00000000 	.word	0x00000000
 80030c8:	08002e77 	.word	0x08002e77
 80030cc:	0800381e 	.word	0x0800381e

080030d0 <_printf_common>:
 80030d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d4:	4616      	mov	r6, r2
 80030d6:	4699      	mov	r9, r3
 80030d8:	688a      	ldr	r2, [r1, #8]
 80030da:	690b      	ldr	r3, [r1, #16]
 80030dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bfb8      	it	lt
 80030e4:	4613      	movlt	r3, r2
 80030e6:	6033      	str	r3, [r6, #0]
 80030e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030ec:	4607      	mov	r7, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	b10a      	cbz	r2, 80030f6 <_printf_common+0x26>
 80030f2:	3301      	adds	r3, #1
 80030f4:	6033      	str	r3, [r6, #0]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	0699      	lsls	r1, r3, #26
 80030fa:	bf42      	ittt	mi
 80030fc:	6833      	ldrmi	r3, [r6, #0]
 80030fe:	3302      	addmi	r3, #2
 8003100:	6033      	strmi	r3, [r6, #0]
 8003102:	6825      	ldr	r5, [r4, #0]
 8003104:	f015 0506 	ands.w	r5, r5, #6
 8003108:	d106      	bne.n	8003118 <_printf_common+0x48>
 800310a:	f104 0a19 	add.w	sl, r4, #25
 800310e:	68e3      	ldr	r3, [r4, #12]
 8003110:	6832      	ldr	r2, [r6, #0]
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	42ab      	cmp	r3, r5
 8003116:	dc26      	bgt.n	8003166 <_printf_common+0x96>
 8003118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800311c:	1e13      	subs	r3, r2, #0
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	bf18      	it	ne
 8003122:	2301      	movne	r3, #1
 8003124:	0692      	lsls	r2, r2, #26
 8003126:	d42b      	bmi.n	8003180 <_printf_common+0xb0>
 8003128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800312c:	4649      	mov	r1, r9
 800312e:	4638      	mov	r0, r7
 8003130:	47c0      	blx	r8
 8003132:	3001      	adds	r0, #1
 8003134:	d01e      	beq.n	8003174 <_printf_common+0xa4>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	2b04      	cmp	r3, #4
 8003140:	bf02      	ittt	eq
 8003142:	68e5      	ldreq	r5, [r4, #12]
 8003144:	6833      	ldreq	r3, [r6, #0]
 8003146:	1aed      	subeq	r5, r5, r3
 8003148:	68a3      	ldr	r3, [r4, #8]
 800314a:	bf0c      	ite	eq
 800314c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003150:	2500      	movne	r5, #0
 8003152:	4293      	cmp	r3, r2
 8003154:	bfc4      	itt	gt
 8003156:	1a9b      	subgt	r3, r3, r2
 8003158:	18ed      	addgt	r5, r5, r3
 800315a:	2600      	movs	r6, #0
 800315c:	341a      	adds	r4, #26
 800315e:	42b5      	cmp	r5, r6
 8003160:	d11a      	bne.n	8003198 <_printf_common+0xc8>
 8003162:	2000      	movs	r0, #0
 8003164:	e008      	b.n	8003178 <_printf_common+0xa8>
 8003166:	2301      	movs	r3, #1
 8003168:	4652      	mov	r2, sl
 800316a:	4649      	mov	r1, r9
 800316c:	4638      	mov	r0, r7
 800316e:	47c0      	blx	r8
 8003170:	3001      	adds	r0, #1
 8003172:	d103      	bne.n	800317c <_printf_common+0xac>
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800317c:	3501      	adds	r5, #1
 800317e:	e7c6      	b.n	800310e <_printf_common+0x3e>
 8003180:	18e1      	adds	r1, r4, r3
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	2030      	movs	r0, #48	; 0x30
 8003186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800318a:	4422      	add	r2, r4
 800318c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003194:	3302      	adds	r3, #2
 8003196:	e7c7      	b.n	8003128 <_printf_common+0x58>
 8003198:	2301      	movs	r3, #1
 800319a:	4622      	mov	r2, r4
 800319c:	4649      	mov	r1, r9
 800319e:	4638      	mov	r0, r7
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d0e6      	beq.n	8003174 <_printf_common+0xa4>
 80031a6:	3601      	adds	r6, #1
 80031a8:	e7d9      	b.n	800315e <_printf_common+0x8e>
	...

080031ac <_printf_i>:
 80031ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031b0:	7e0f      	ldrb	r7, [r1, #24]
 80031b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031b4:	2f78      	cmp	r7, #120	; 0x78
 80031b6:	4691      	mov	r9, r2
 80031b8:	4680      	mov	r8, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	469a      	mov	sl, r3
 80031be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031c2:	d807      	bhi.n	80031d4 <_printf_i+0x28>
 80031c4:	2f62      	cmp	r7, #98	; 0x62
 80031c6:	d80a      	bhi.n	80031de <_printf_i+0x32>
 80031c8:	2f00      	cmp	r7, #0
 80031ca:	f000 80d4 	beq.w	8003376 <_printf_i+0x1ca>
 80031ce:	2f58      	cmp	r7, #88	; 0x58
 80031d0:	f000 80c0 	beq.w	8003354 <_printf_i+0x1a8>
 80031d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031dc:	e03a      	b.n	8003254 <_printf_i+0xa8>
 80031de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031e2:	2b15      	cmp	r3, #21
 80031e4:	d8f6      	bhi.n	80031d4 <_printf_i+0x28>
 80031e6:	a101      	add	r1, pc, #4	; (adr r1, 80031ec <_printf_i+0x40>)
 80031e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003259 	.word	0x08003259
 80031f4:	080031d5 	.word	0x080031d5
 80031f8:	080031d5 	.word	0x080031d5
 80031fc:	080031d5 	.word	0x080031d5
 8003200:	080031d5 	.word	0x080031d5
 8003204:	08003259 	.word	0x08003259
 8003208:	080031d5 	.word	0x080031d5
 800320c:	080031d5 	.word	0x080031d5
 8003210:	080031d5 	.word	0x080031d5
 8003214:	080031d5 	.word	0x080031d5
 8003218:	0800335d 	.word	0x0800335d
 800321c:	08003285 	.word	0x08003285
 8003220:	08003317 	.word	0x08003317
 8003224:	080031d5 	.word	0x080031d5
 8003228:	080031d5 	.word	0x080031d5
 800322c:	0800337f 	.word	0x0800337f
 8003230:	080031d5 	.word	0x080031d5
 8003234:	08003285 	.word	0x08003285
 8003238:	080031d5 	.word	0x080031d5
 800323c:	080031d5 	.word	0x080031d5
 8003240:	0800331f 	.word	0x0800331f
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	602a      	str	r2, [r5, #0]
 800324c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003254:	2301      	movs	r3, #1
 8003256:	e09f      	b.n	8003398 <_printf_i+0x1ec>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	0607      	lsls	r7, r0, #24
 800325e:	f103 0104 	add.w	r1, r3, #4
 8003262:	6029      	str	r1, [r5, #0]
 8003264:	d501      	bpl.n	800326a <_printf_i+0xbe>
 8003266:	681e      	ldr	r6, [r3, #0]
 8003268:	e003      	b.n	8003272 <_printf_i+0xc6>
 800326a:	0646      	lsls	r6, r0, #25
 800326c:	d5fb      	bpl.n	8003266 <_printf_i+0xba>
 800326e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003272:	2e00      	cmp	r6, #0
 8003274:	da03      	bge.n	800327e <_printf_i+0xd2>
 8003276:	232d      	movs	r3, #45	; 0x2d
 8003278:	4276      	negs	r6, r6
 800327a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800327e:	485a      	ldr	r0, [pc, #360]	; (80033e8 <_printf_i+0x23c>)
 8003280:	230a      	movs	r3, #10
 8003282:	e012      	b.n	80032aa <_printf_i+0xfe>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	6820      	ldr	r0, [r4, #0]
 8003288:	1d19      	adds	r1, r3, #4
 800328a:	6029      	str	r1, [r5, #0]
 800328c:	0605      	lsls	r5, r0, #24
 800328e:	d501      	bpl.n	8003294 <_printf_i+0xe8>
 8003290:	681e      	ldr	r6, [r3, #0]
 8003292:	e002      	b.n	800329a <_printf_i+0xee>
 8003294:	0641      	lsls	r1, r0, #25
 8003296:	d5fb      	bpl.n	8003290 <_printf_i+0xe4>
 8003298:	881e      	ldrh	r6, [r3, #0]
 800329a:	4853      	ldr	r0, [pc, #332]	; (80033e8 <_printf_i+0x23c>)
 800329c:	2f6f      	cmp	r7, #111	; 0x6f
 800329e:	bf0c      	ite	eq
 80032a0:	2308      	moveq	r3, #8
 80032a2:	230a      	movne	r3, #10
 80032a4:	2100      	movs	r1, #0
 80032a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032aa:	6865      	ldr	r5, [r4, #4]
 80032ac:	60a5      	str	r5, [r4, #8]
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	bfa2      	ittt	ge
 80032b2:	6821      	ldrge	r1, [r4, #0]
 80032b4:	f021 0104 	bicge.w	r1, r1, #4
 80032b8:	6021      	strge	r1, [r4, #0]
 80032ba:	b90e      	cbnz	r6, 80032c0 <_printf_i+0x114>
 80032bc:	2d00      	cmp	r5, #0
 80032be:	d04b      	beq.n	8003358 <_printf_i+0x1ac>
 80032c0:	4615      	mov	r5, r2
 80032c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80032c6:	fb03 6711 	mls	r7, r3, r1, r6
 80032ca:	5dc7      	ldrb	r7, [r0, r7]
 80032cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032d0:	4637      	mov	r7, r6
 80032d2:	42bb      	cmp	r3, r7
 80032d4:	460e      	mov	r6, r1
 80032d6:	d9f4      	bls.n	80032c2 <_printf_i+0x116>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d10b      	bne.n	80032f4 <_printf_i+0x148>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	07de      	lsls	r6, r3, #31
 80032e0:	d508      	bpl.n	80032f4 <_printf_i+0x148>
 80032e2:	6923      	ldr	r3, [r4, #16]
 80032e4:	6861      	ldr	r1, [r4, #4]
 80032e6:	4299      	cmp	r1, r3
 80032e8:	bfde      	ittt	le
 80032ea:	2330      	movle	r3, #48	; 0x30
 80032ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032f4:	1b52      	subs	r2, r2, r5
 80032f6:	6122      	str	r2, [r4, #16]
 80032f8:	f8cd a000 	str.w	sl, [sp]
 80032fc:	464b      	mov	r3, r9
 80032fe:	aa03      	add	r2, sp, #12
 8003300:	4621      	mov	r1, r4
 8003302:	4640      	mov	r0, r8
 8003304:	f7ff fee4 	bl	80030d0 <_printf_common>
 8003308:	3001      	adds	r0, #1
 800330a:	d14a      	bne.n	80033a2 <_printf_i+0x1f6>
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	b004      	add	sp, #16
 8003312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	f043 0320 	orr.w	r3, r3, #32
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	4833      	ldr	r0, [pc, #204]	; (80033ec <_printf_i+0x240>)
 8003320:	2778      	movs	r7, #120	; 0x78
 8003322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	6829      	ldr	r1, [r5, #0]
 800332a:	061f      	lsls	r7, r3, #24
 800332c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003330:	d402      	bmi.n	8003338 <_printf_i+0x18c>
 8003332:	065f      	lsls	r7, r3, #25
 8003334:	bf48      	it	mi
 8003336:	b2b6      	uxthmi	r6, r6
 8003338:	07df      	lsls	r7, r3, #31
 800333a:	bf48      	it	mi
 800333c:	f043 0320 	orrmi.w	r3, r3, #32
 8003340:	6029      	str	r1, [r5, #0]
 8003342:	bf48      	it	mi
 8003344:	6023      	strmi	r3, [r4, #0]
 8003346:	b91e      	cbnz	r6, 8003350 <_printf_i+0x1a4>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	2310      	movs	r3, #16
 8003352:	e7a7      	b.n	80032a4 <_printf_i+0xf8>
 8003354:	4824      	ldr	r0, [pc, #144]	; (80033e8 <_printf_i+0x23c>)
 8003356:	e7e4      	b.n	8003322 <_printf_i+0x176>
 8003358:	4615      	mov	r5, r2
 800335a:	e7bd      	b.n	80032d8 <_printf_i+0x12c>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	6826      	ldr	r6, [r4, #0]
 8003360:	6961      	ldr	r1, [r4, #20]
 8003362:	1d18      	adds	r0, r3, #4
 8003364:	6028      	str	r0, [r5, #0]
 8003366:	0635      	lsls	r5, r6, #24
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	d501      	bpl.n	8003370 <_printf_i+0x1c4>
 800336c:	6019      	str	r1, [r3, #0]
 800336e:	e002      	b.n	8003376 <_printf_i+0x1ca>
 8003370:	0670      	lsls	r0, r6, #25
 8003372:	d5fb      	bpl.n	800336c <_printf_i+0x1c0>
 8003374:	8019      	strh	r1, [r3, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	6123      	str	r3, [r4, #16]
 800337a:	4615      	mov	r5, r2
 800337c:	e7bc      	b.n	80032f8 <_printf_i+0x14c>
 800337e:	682b      	ldr	r3, [r5, #0]
 8003380:	1d1a      	adds	r2, r3, #4
 8003382:	602a      	str	r2, [r5, #0]
 8003384:	681d      	ldr	r5, [r3, #0]
 8003386:	6862      	ldr	r2, [r4, #4]
 8003388:	2100      	movs	r1, #0
 800338a:	4628      	mov	r0, r5
 800338c:	f7fc ff20 	bl	80001d0 <memchr>
 8003390:	b108      	cbz	r0, 8003396 <_printf_i+0x1ea>
 8003392:	1b40      	subs	r0, r0, r5
 8003394:	6060      	str	r0, [r4, #4]
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	2300      	movs	r3, #0
 800339c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033a0:	e7aa      	b.n	80032f8 <_printf_i+0x14c>
 80033a2:	6923      	ldr	r3, [r4, #16]
 80033a4:	462a      	mov	r2, r5
 80033a6:	4649      	mov	r1, r9
 80033a8:	4640      	mov	r0, r8
 80033aa:	47d0      	blx	sl
 80033ac:	3001      	adds	r0, #1
 80033ae:	d0ad      	beq.n	800330c <_printf_i+0x160>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	079b      	lsls	r3, r3, #30
 80033b4:	d413      	bmi.n	80033de <_printf_i+0x232>
 80033b6:	68e0      	ldr	r0, [r4, #12]
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	4298      	cmp	r0, r3
 80033bc:	bfb8      	it	lt
 80033be:	4618      	movlt	r0, r3
 80033c0:	e7a6      	b.n	8003310 <_printf_i+0x164>
 80033c2:	2301      	movs	r3, #1
 80033c4:	4632      	mov	r2, r6
 80033c6:	4649      	mov	r1, r9
 80033c8:	4640      	mov	r0, r8
 80033ca:	47d0      	blx	sl
 80033cc:	3001      	adds	r0, #1
 80033ce:	d09d      	beq.n	800330c <_printf_i+0x160>
 80033d0:	3501      	adds	r5, #1
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	9903      	ldr	r1, [sp, #12]
 80033d6:	1a5b      	subs	r3, r3, r1
 80033d8:	42ab      	cmp	r3, r5
 80033da:	dcf2      	bgt.n	80033c2 <_printf_i+0x216>
 80033dc:	e7eb      	b.n	80033b6 <_printf_i+0x20a>
 80033de:	2500      	movs	r5, #0
 80033e0:	f104 0619 	add.w	r6, r4, #25
 80033e4:	e7f5      	b.n	80033d2 <_printf_i+0x226>
 80033e6:	bf00      	nop
 80033e8:	08003829 	.word	0x08003829
 80033ec:	0800383a 	.word	0x0800383a

080033f0 <__sflush_r>:
 80033f0:	898a      	ldrh	r2, [r1, #12]
 80033f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f6:	4605      	mov	r5, r0
 80033f8:	0710      	lsls	r0, r2, #28
 80033fa:	460c      	mov	r4, r1
 80033fc:	d458      	bmi.n	80034b0 <__sflush_r+0xc0>
 80033fe:	684b      	ldr	r3, [r1, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	dc05      	bgt.n	8003410 <__sflush_r+0x20>
 8003404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	dc02      	bgt.n	8003410 <__sflush_r+0x20>
 800340a:	2000      	movs	r0, #0
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003412:	2e00      	cmp	r6, #0
 8003414:	d0f9      	beq.n	800340a <__sflush_r+0x1a>
 8003416:	2300      	movs	r3, #0
 8003418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800341c:	682f      	ldr	r7, [r5, #0]
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	602b      	str	r3, [r5, #0]
 8003422:	d032      	beq.n	800348a <__sflush_r+0x9a>
 8003424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	075a      	lsls	r2, r3, #29
 800342a:	d505      	bpl.n	8003438 <__sflush_r+0x48>
 800342c:	6863      	ldr	r3, [r4, #4]
 800342e:	1ac0      	subs	r0, r0, r3
 8003430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003432:	b10b      	cbz	r3, 8003438 <__sflush_r+0x48>
 8003434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003436:	1ac0      	subs	r0, r0, r3
 8003438:	2300      	movs	r3, #0
 800343a:	4602      	mov	r2, r0
 800343c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	4628      	mov	r0, r5
 8003442:	47b0      	blx	r6
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	d106      	bne.n	8003458 <__sflush_r+0x68>
 800344a:	6829      	ldr	r1, [r5, #0]
 800344c:	291d      	cmp	r1, #29
 800344e:	d82b      	bhi.n	80034a8 <__sflush_r+0xb8>
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <__sflush_r+0x108>)
 8003452:	410a      	asrs	r2, r1
 8003454:	07d6      	lsls	r6, r2, #31
 8003456:	d427      	bmi.n	80034a8 <__sflush_r+0xb8>
 8003458:	2200      	movs	r2, #0
 800345a:	6062      	str	r2, [r4, #4]
 800345c:	04d9      	lsls	r1, r3, #19
 800345e:	6922      	ldr	r2, [r4, #16]
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	d504      	bpl.n	800346e <__sflush_r+0x7e>
 8003464:	1c42      	adds	r2, r0, #1
 8003466:	d101      	bne.n	800346c <__sflush_r+0x7c>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b903      	cbnz	r3, 800346e <__sflush_r+0x7e>
 800346c:	6560      	str	r0, [r4, #84]	; 0x54
 800346e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003470:	602f      	str	r7, [r5, #0]
 8003472:	2900      	cmp	r1, #0
 8003474:	d0c9      	beq.n	800340a <__sflush_r+0x1a>
 8003476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800347a:	4299      	cmp	r1, r3
 800347c:	d002      	beq.n	8003484 <__sflush_r+0x94>
 800347e:	4628      	mov	r0, r5
 8003480:	f7ff fbea 	bl	8002c58 <_free_r>
 8003484:	2000      	movs	r0, #0
 8003486:	6360      	str	r0, [r4, #52]	; 0x34
 8003488:	e7c0      	b.n	800340c <__sflush_r+0x1c>
 800348a:	2301      	movs	r3, #1
 800348c:	4628      	mov	r0, r5
 800348e:	47b0      	blx	r6
 8003490:	1c41      	adds	r1, r0, #1
 8003492:	d1c8      	bne.n	8003426 <__sflush_r+0x36>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0c5      	beq.n	8003426 <__sflush_r+0x36>
 800349a:	2b1d      	cmp	r3, #29
 800349c:	d001      	beq.n	80034a2 <__sflush_r+0xb2>
 800349e:	2b16      	cmp	r3, #22
 80034a0:	d101      	bne.n	80034a6 <__sflush_r+0xb6>
 80034a2:	602f      	str	r7, [r5, #0]
 80034a4:	e7b1      	b.n	800340a <__sflush_r+0x1a>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	e7ad      	b.n	800340c <__sflush_r+0x1c>
 80034b0:	690f      	ldr	r7, [r1, #16]
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	d0a9      	beq.n	800340a <__sflush_r+0x1a>
 80034b6:	0793      	lsls	r3, r2, #30
 80034b8:	680e      	ldr	r6, [r1, #0]
 80034ba:	bf08      	it	eq
 80034bc:	694b      	ldreq	r3, [r1, #20]
 80034be:	600f      	str	r7, [r1, #0]
 80034c0:	bf18      	it	ne
 80034c2:	2300      	movne	r3, #0
 80034c4:	eba6 0807 	sub.w	r8, r6, r7
 80034c8:	608b      	str	r3, [r1, #8]
 80034ca:	f1b8 0f00 	cmp.w	r8, #0
 80034ce:	dd9c      	ble.n	800340a <__sflush_r+0x1a>
 80034d0:	6a21      	ldr	r1, [r4, #32]
 80034d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034d4:	4643      	mov	r3, r8
 80034d6:	463a      	mov	r2, r7
 80034d8:	4628      	mov	r0, r5
 80034da:	47b0      	blx	r6
 80034dc:	2800      	cmp	r0, #0
 80034de:	dc06      	bgt.n	80034ee <__sflush_r+0xfe>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	e78e      	b.n	800340c <__sflush_r+0x1c>
 80034ee:	4407      	add	r7, r0
 80034f0:	eba8 0800 	sub.w	r8, r8, r0
 80034f4:	e7e9      	b.n	80034ca <__sflush_r+0xda>
 80034f6:	bf00      	nop
 80034f8:	dfbffffe 	.word	0xdfbffffe

080034fc <_fflush_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4605      	mov	r5, r0
 8003502:	460c      	mov	r4, r1
 8003504:	b913      	cbnz	r3, 800350c <_fflush_r+0x10>
 8003506:	2500      	movs	r5, #0
 8003508:	4628      	mov	r0, r5
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	b118      	cbz	r0, 8003516 <_fflush_r+0x1a>
 800350e:	6a03      	ldr	r3, [r0, #32]
 8003510:	b90b      	cbnz	r3, 8003516 <_fflush_r+0x1a>
 8003512:	f7ff fa99 	bl	8002a48 <__sinit>
 8003516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f3      	beq.n	8003506 <_fflush_r+0xa>
 800351e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003520:	07d0      	lsls	r0, r2, #31
 8003522:	d404      	bmi.n	800352e <_fflush_r+0x32>
 8003524:	0599      	lsls	r1, r3, #22
 8003526:	d402      	bmi.n	800352e <_fflush_r+0x32>
 8003528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352a:	f7ff fb92 	bl	8002c52 <__retarget_lock_acquire_recursive>
 800352e:	4628      	mov	r0, r5
 8003530:	4621      	mov	r1, r4
 8003532:	f7ff ff5d 	bl	80033f0 <__sflush_r>
 8003536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003538:	07da      	lsls	r2, r3, #31
 800353a:	4605      	mov	r5, r0
 800353c:	d4e4      	bmi.n	8003508 <_fflush_r+0xc>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	059b      	lsls	r3, r3, #22
 8003542:	d4e1      	bmi.n	8003508 <_fflush_r+0xc>
 8003544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003546:	f7ff fb85 	bl	8002c54 <__retarget_lock_release_recursive>
 800354a:	e7dd      	b.n	8003508 <_fflush_r+0xc>

0800354c <__swbuf_r>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	460e      	mov	r6, r1
 8003550:	4614      	mov	r4, r2
 8003552:	4605      	mov	r5, r0
 8003554:	b118      	cbz	r0, 800355e <__swbuf_r+0x12>
 8003556:	6a03      	ldr	r3, [r0, #32]
 8003558:	b90b      	cbnz	r3, 800355e <__swbuf_r+0x12>
 800355a:	f7ff fa75 	bl	8002a48 <__sinit>
 800355e:	69a3      	ldr	r3, [r4, #24]
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	071a      	lsls	r2, r3, #28
 8003566:	d525      	bpl.n	80035b4 <__swbuf_r+0x68>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	b31b      	cbz	r3, 80035b4 <__swbuf_r+0x68>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	6922      	ldr	r2, [r4, #16]
 8003570:	1a98      	subs	r0, r3, r2
 8003572:	6963      	ldr	r3, [r4, #20]
 8003574:	b2f6      	uxtb	r6, r6
 8003576:	4283      	cmp	r3, r0
 8003578:	4637      	mov	r7, r6
 800357a:	dc04      	bgt.n	8003586 <__swbuf_r+0x3a>
 800357c:	4621      	mov	r1, r4
 800357e:	4628      	mov	r0, r5
 8003580:	f7ff ffbc 	bl	80034fc <_fflush_r>
 8003584:	b9e0      	cbnz	r0, 80035c0 <__swbuf_r+0x74>
 8003586:	68a3      	ldr	r3, [r4, #8]
 8003588:	3b01      	subs	r3, #1
 800358a:	60a3      	str	r3, [r4, #8]
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	701e      	strb	r6, [r3, #0]
 8003594:	6962      	ldr	r2, [r4, #20]
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	429a      	cmp	r2, r3
 800359a:	d004      	beq.n	80035a6 <__swbuf_r+0x5a>
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d506      	bpl.n	80035b0 <__swbuf_r+0x64>
 80035a2:	2e0a      	cmp	r6, #10
 80035a4:	d104      	bne.n	80035b0 <__swbuf_r+0x64>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7ff ffa7 	bl	80034fc <_fflush_r>
 80035ae:	b938      	cbnz	r0, 80035c0 <__swbuf_r+0x74>
 80035b0:	4638      	mov	r0, r7
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	4621      	mov	r1, r4
 80035b6:	4628      	mov	r0, r5
 80035b8:	f000 f806 	bl	80035c8 <__swsetup_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d0d5      	beq.n	800356c <__swbuf_r+0x20>
 80035c0:	f04f 37ff 	mov.w	r7, #4294967295
 80035c4:	e7f4      	b.n	80035b0 <__swbuf_r+0x64>
	...

080035c8 <__swsetup_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <__swsetup_r+0xac>)
 80035cc:	4605      	mov	r5, r0
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	460c      	mov	r4, r1
 80035d2:	b118      	cbz	r0, 80035dc <__swsetup_r+0x14>
 80035d4:	6a03      	ldr	r3, [r0, #32]
 80035d6:	b90b      	cbnz	r3, 80035dc <__swsetup_r+0x14>
 80035d8:	f7ff fa36 	bl	8002a48 <__sinit>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035e2:	0718      	lsls	r0, r3, #28
 80035e4:	d422      	bmi.n	800362c <__swsetup_r+0x64>
 80035e6:	06d9      	lsls	r1, r3, #27
 80035e8:	d407      	bmi.n	80035fa <__swsetup_r+0x32>
 80035ea:	2309      	movs	r3, #9
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e034      	b.n	8003664 <__swsetup_r+0x9c>
 80035fa:	0758      	lsls	r0, r3, #29
 80035fc:	d512      	bpl.n	8003624 <__swsetup_r+0x5c>
 80035fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003600:	b141      	cbz	r1, 8003614 <__swsetup_r+0x4c>
 8003602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003606:	4299      	cmp	r1, r3
 8003608:	d002      	beq.n	8003610 <__swsetup_r+0x48>
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff fb24 	bl	8002c58 <_free_r>
 8003610:	2300      	movs	r3, #0
 8003612:	6363      	str	r3, [r4, #52]	; 0x34
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	2300      	movs	r3, #0
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b94b      	cbnz	r3, 8003644 <__swsetup_r+0x7c>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363a:	d003      	beq.n	8003644 <__swsetup_r+0x7c>
 800363c:	4621      	mov	r1, r4
 800363e:	4628      	mov	r0, r5
 8003640:	f000 f850 	bl	80036e4 <__smakebuf_r>
 8003644:	89a0      	ldrh	r0, [r4, #12]
 8003646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800364a:	f010 0301 	ands.w	r3, r0, #1
 800364e:	d00a      	beq.n	8003666 <__swsetup_r+0x9e>
 8003650:	2300      	movs	r3, #0
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	6963      	ldr	r3, [r4, #20]
 8003656:	425b      	negs	r3, r3
 8003658:	61a3      	str	r3, [r4, #24]
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	b943      	cbnz	r3, 8003670 <__swsetup_r+0xa8>
 800365e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003662:	d1c4      	bne.n	80035ee <__swsetup_r+0x26>
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	0781      	lsls	r1, r0, #30
 8003668:	bf58      	it	pl
 800366a:	6963      	ldrpl	r3, [r4, #20]
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	e7f4      	b.n	800365a <__swsetup_r+0x92>
 8003670:	2000      	movs	r0, #0
 8003672:	e7f7      	b.n	8003664 <__swsetup_r+0x9c>
 8003674:	20000064 	.word	0x20000064

08003678 <_sbrk_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d06      	ldr	r5, [pc, #24]	; (8003694 <_sbrk_r+0x1c>)
 800367c:	2300      	movs	r3, #0
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	f7fd fb76 	bl	8000d74 <_sbrk>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_sbrk_r+0x1a>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_sbrk_r+0x1a>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20000238 	.word	0x20000238

08003698 <__swhatbuf_r>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	b096      	sub	sp, #88	; 0x58
 80036a4:	4615      	mov	r5, r2
 80036a6:	461e      	mov	r6, r3
 80036a8:	da0d      	bge.n	80036c6 <__swhatbuf_r+0x2e>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036ba:	2340      	movne	r3, #64	; 0x40
 80036bc:	2000      	movs	r0, #0
 80036be:	6031      	str	r1, [r6, #0]
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	b016      	add	sp, #88	; 0x58
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	466a      	mov	r2, sp
 80036c8:	f000 f848 	bl	800375c <_fstat_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	dbec      	blt.n	80036aa <__swhatbuf_r+0x12>
 80036d0:	9901      	ldr	r1, [sp, #4]
 80036d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036da:	4259      	negs	r1, r3
 80036dc:	4159      	adcs	r1, r3
 80036de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e2:	e7eb      	b.n	80036bc <__swhatbuf_r+0x24>

080036e4 <__smakebuf_r>:
 80036e4:	898b      	ldrh	r3, [r1, #12]
 80036e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e8:	079d      	lsls	r5, r3, #30
 80036ea:	4606      	mov	r6, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	d507      	bpl.n	8003700 <__smakebuf_r+0x1c>
 80036f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2301      	movs	r3, #1
 80036fa:	6163      	str	r3, [r4, #20]
 80036fc:	b002      	add	sp, #8
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	ab01      	add	r3, sp, #4
 8003702:	466a      	mov	r2, sp
 8003704:	f7ff ffc8 	bl	8003698 <__swhatbuf_r>
 8003708:	9900      	ldr	r1, [sp, #0]
 800370a:	4605      	mov	r5, r0
 800370c:	4630      	mov	r0, r6
 800370e:	f7ff fb0f 	bl	8002d30 <_malloc_r>
 8003712:	b948      	cbnz	r0, 8003728 <__smakebuf_r+0x44>
 8003714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d4ef      	bmi.n	80036fc <__smakebuf_r+0x18>
 800371c:	f023 0303 	bic.w	r3, r3, #3
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	e7e3      	b.n	80036f0 <__smakebuf_r+0xc>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	6020      	str	r0, [r4, #0]
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	9b00      	ldr	r3, [sp, #0]
 8003734:	6163      	str	r3, [r4, #20]
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	6120      	str	r0, [r4, #16]
 800373a:	b15b      	cbz	r3, 8003754 <__smakebuf_r+0x70>
 800373c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f81d 	bl	8003780 <_isatty_r>
 8003746:	b128      	cbz	r0, 8003754 <__smakebuf_r+0x70>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	431d      	orrs	r5, r3
 8003758:	81a5      	strh	r5, [r4, #12]
 800375a:	e7cf      	b.n	80036fc <__smakebuf_r+0x18>

0800375c <_fstat_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	; (800377c <_fstat_r+0x20>)
 8003760:	2300      	movs	r3, #0
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	f7fd fada 	bl	8000d22 <_fstat>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d102      	bne.n	8003778 <_fstat_r+0x1c>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b103      	cbz	r3, 8003778 <_fstat_r+0x1c>
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	20000238 	.word	0x20000238

08003780 <_isatty_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	; (800379c <_isatty_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd fad9 	bl	8000d42 <_isatty>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_isatty_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_isatty_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000238 	.word	0x20000238

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
