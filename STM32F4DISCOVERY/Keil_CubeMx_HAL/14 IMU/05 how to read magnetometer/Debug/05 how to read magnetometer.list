
05 how to read magnetometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800362c  0800362c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003634  08003634  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800363c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001c8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006c1e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000193e  00000000  00000000  00026cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000740  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000054a  00000000  00000000  00028d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000213e1  00000000  00000000  000292c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009408  00000000  00000000  0004a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3ddf  00000000  00000000  00053aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022b0  00000000  00000000  0011788c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00119b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800359c 	.word	0x0800359c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800359c 	.word	0x0800359c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a25      	ldr	r2, [pc, #148]	; (8000620 <MX_GPIO_Init+0xb4>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_GPIO_Init+0xb4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xb8>)
 80005f8:	f000 fe44 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xb8>)
 8000614:	f000 fc9a 	bl	8000f4c <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d013      	beq.n	8000668 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000648:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00b      	beq.n	8000668 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000650:	e000      	b.n	8000654 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000652:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800065e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 faea 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f80e 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff72 	bl	800056c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000688:	f000 f930 	bl	80008ec <MX_SPI2_Init>
  mpu_data imu_data;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 mpu_read_sensor(&imu_data);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f8aa 	bl	80007e8 <mpu_read_sensor>
	 HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fb4e 	bl	8000d38 <HAL_Delay>
	 mpu_read_sensor(&imu_data);
 800069c:	e7f6      	b.n	800068c <main+0x16>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f953 	bl	800295a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000714:	23a8      	movs	r3, #168	; 0xa8
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fdc7 	bl	80012b8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f83c 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f828 	bl	80017a8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 f825 	bl	80007ac <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e009      	b.n	800079a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	60ba      	str	r2, [r7, #8]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff4a 	bl	8000628 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbf1      	blt.n	8000786 <_write+0x12>
	return len;
 80007a2:	687b      	ldr	r3, [r7, #4]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <activate_spi2_mpu>:
 */
extern SPI_HandleTypeDef hspi2;
static uint8_t mag_adjust[3];

static void activate_spi2_mpu(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <activate_spi2_mpu+0x14>)
 80007c2:	f000 fd5f 	bl	8001284 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020800 	.word	0x40020800

080007d0 <deactivate_spi2_mpu>:

static void deactivate_spi2_mpu(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2101      	movs	r1, #1
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <deactivate_spi2_mpu+0x14>)
 80007da:	f000 fd53 	bl	8001284 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020800 	.word	0x40020800

080007e8 <mpu_read_sensor>:
	HAL_SPI_Receive(&hspi2, data, len, 100);
	deactivate_spi2_mpu();
}

void mpu_read_sensor(mpu_data *imu_data)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	activate_spi2_mpu();
 80007f0:	f7ff ffe2 	bl	80007b8 <activate_spi2_mpu>
	uint8_t temp_reg = 0x80 | ACCEL_XOUT_H;
 80007f4:	23bb      	movs	r3, #187	; 0xbb
 80007f6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &temp_reg, 1, 100);
 80007f8:	f107 010f 	add.w	r1, r7, #15
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	2201      	movs	r2, #1
 8000800:	4837      	ldr	r0, [pc, #220]	; (80008e0 <mpu_read_sensor+0xf8>)
 8000802:	f001 fa46 	bl	8001c92 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data, 14, 100);
 8000806:	f107 0110 	add.w	r1, r7, #16
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	220e      	movs	r2, #14
 800080e:	4834      	ldr	r0, [pc, #208]	; (80008e0 <mpu_read_sensor+0xf8>)
 8000810:	f001 fb82 	bl	8001f18 <HAL_SPI_Receive>
	deactivate_spi2_mpu();
 8000814:	f7ff ffdc 	bl	80007d0 <deactivate_spi2_mpu>

	imu_data->x_accel = ((int16_t)data[0]<<8) + data[1];
 8000818:	7c3b      	ldrb	r3, [r7, #16]
 800081a:	b29b      	uxth	r3, r3
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b29a      	uxth	r2, r3
 8000820:	7c7b      	ldrb	r3, [r7, #17]
 8000822:	b29b      	uxth	r3, r3
 8000824:	4413      	add	r3, r2
 8000826:	b29b      	uxth	r3, r3
 8000828:	b21a      	sxth	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	801a      	strh	r2, [r3, #0]
	imu_data->y_accel = ((int16_t)data[2]<<8) + data[3];
 800082e:	7cbb      	ldrb	r3, [r7, #18]
 8000830:	b29b      	uxth	r3, r3
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	b29a      	uxth	r2, r3
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b29b      	uxth	r3, r3
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	b21a      	sxth	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	805a      	strh	r2, [r3, #2]
	imu_data->z_accel = ((int16_t)data[4]<<8) + data[55];
 8000844:	7d3b      	ldrb	r3, [r7, #20]
 8000846:	b29b      	uxth	r3, r3
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29a      	uxth	r2, r3
 800084c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000850:	b29b      	uxth	r3, r3
 8000852:	4413      	add	r3, r2
 8000854:	b29b      	uxth	r3, r3
 8000856:	b21a      	sxth	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	809a      	strh	r2, [r3, #4]

	imu_data->x_gyro = ((int16_t)data[8]<<8) + data[9];
 800085c:	7e3b      	ldrb	r3, [r7, #24]
 800085e:	b29b      	uxth	r3, r3
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b29a      	uxth	r2, r3
 8000864:	7e7b      	ldrb	r3, [r7, #25]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4413      	add	r3, r2
 800086a:	b29b      	uxth	r3, r3
 800086c:	b21a      	sxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	80da      	strh	r2, [r3, #6]
	imu_data->y_gyro = ((int16_t)data[10]<<8) + data[11];
 8000872:	7ebb      	ldrb	r3, [r7, #26]
 8000874:	b29b      	uxth	r3, r3
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b29a      	uxth	r2, r3
 800087a:	7efb      	ldrb	r3, [r7, #27]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4413      	add	r3, r2
 8000880:	b29b      	uxth	r3, r3
 8000882:	b21a      	sxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	811a      	strh	r2, [r3, #8]
	imu_data->z_gyro = ((int16_t)data[12]<<8) + data[13];
 8000888:	7f3b      	ldrb	r3, [r7, #28]
 800088a:	b29b      	uxth	r3, r3
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b29a      	uxth	r2, r3
 8000890:	7f7b      	ldrb	r3, [r7, #29]
 8000892:	b29b      	uxth	r3, r3
 8000894:	4413      	add	r3, r2
 8000896:	b29b      	uxth	r3, r3
 8000898:	b21a      	sxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	815a      	strh	r2, [r3, #10]

	printf("Accelero : %d, %d, and %d \n", imu_data->x_accel, imu_data->y_accel, imu_data->z_accel);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ac:	461a      	mov	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <mpu_read_sensor+0xfc>)
 80008b6:	f001 fffb 	bl	80028b0 <iprintf>
	printf("Gyro : %d, %d, and %d \n", imu_data->x_gyro, imu_data->y_gyro, imu_data->z_gyro);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008c0:	4619      	mov	r1, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <mpu_read_sensor+0x100>)
 80008d2:	f001 ffed 	bl	80028b0 <iprintf>

}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000084 	.word	0x20000084
 80008e4:	080035b4 	.word	0x080035b4
 80008e8:	080035d0 	.word	0x080035d0

080008ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI2_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI2_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI2_Init+0x64>)
 800090c:	2202      	movs	r2, #2
 800090e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI2_Init+0x64>)
 8000912:	2201      	movs	r2, #1
 8000914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI2_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI2_Init+0x64>)
 8000920:	2228      	movs	r2, #40	; 0x28
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI2_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI2_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI2_Init+0x64>)
 800093e:	f001 f91f 	bl	8001b80 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000948:	f7ff ff30 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000084 	.word	0x20000084
 8000954:	40003800 	.word	0x40003800

08000958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <HAL_SPI_MspInit+0xc0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14a      	bne.n	8000a10 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_SPI_MspInit+0xc4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <HAL_SPI_MspInit+0xc8>)
 80009ea:	f000 faaf 	bl	8000f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a00:	2305      	movs	r3, #5
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_SPI_MspInit+0xcc>)
 8000a0c:	f000 fa9e 	bl	8000f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40003800 	.word	0x40003800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fa3c 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f918 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
  }

  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f001 ff2a 	bl	80029f8 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	20000230 	.word	0x20000230

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f001 fee9 	bl	8002a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fd20 	bl	8000676 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c44:	0800363c 	.word	0x0800363c
  ldr r2, =_sbss
 8000c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c4c:	20000230 	.word	0x20000230

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f931 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fece 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f93b 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f911 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000e0 	.word	0x200000e0

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200000e0 	.word	0x200000e0

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e16b      	b.n	8001240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 815a 	bne.w	800123a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b4 	beq.w	800123a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_GPIO_Init+0x310>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a50      	ldr	r2, [pc, #320]	; (8001268 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	; (800126c <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	; (800127c <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x20a>
 8001152:	2307      	movs	r3, #7
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001156:	2308      	movs	r3, #8
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x310>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae90 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e267      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b85      	ldr	r3, [pc, #532]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b82      	ldr	r3, [pc, #520]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e242      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a75      	ldr	r2, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6c      	ldr	r2, [pc, #432]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcd6 	bl	8000d20 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcd2 	bl	8000d20 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e207      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcc2 	bl	8000d20 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcbe 	bl	8000d20 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1f3      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c7      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4937      	ldr	r1, [pc, #220]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_RCC_OscConfig+0x244>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc77 	bl	8000d20 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc73 	bl	8000d20 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1a8      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4925      	ldr	r1, [pc, #148]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x244>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc56 	bl	8000d20 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc52 	bl	8000d20 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e187      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d036      	beq.n	8001510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x248>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc36 	bl	8000d20 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc32 	bl	8000d20 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e167      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e01b      	b.n	8001510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_OscConfig+0x248>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc1f 	bl	8000d20 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e00e      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc1b 	bl	8000d20 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d907      	bls.n	8001504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e150      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470000 	.word	0x42470000
 8001500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ea      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8097 	beq.w	800164c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b81      	ldr	r3, [pc, #516]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b77      	ldr	r3, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b74      	ldr	r3, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a73      	ldr	r2, [pc, #460]	; (800172c <HAL_RCC_OscConfig+0x474>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbdb 	bl	8000d20 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fbd7 	bl	8000d20 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e10c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b6a      	ldr	r3, [pc, #424]	; (800172c <HAL_RCC_OscConfig+0x474>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2ea>
 8001594:	4b64      	ldr	r3, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	4a63      	ldr	r2, [pc, #396]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	; 0x70
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x30c>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5b      	ldr	r2, [pc, #364]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015c4:	4b58      	ldr	r3, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a57      	ldr	r2, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a54      	ldr	r2, [pc, #336]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fb9c 	bl	8000d20 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb98 	bl	8000d20 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0cb      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0ee      	beq.n	80015ec <HAL_RCC_OscConfig+0x334>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb86 	bl	8000d20 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb82 	bl	8000d20 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0b5      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a38      	ldr	r2, [pc, #224]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a1 	beq.w	8001798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d05c      	beq.n	800171c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d141      	bne.n	80016ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb56 	bl	8000d20 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb52 	bl	8000d20 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e087      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	491b      	ldr	r1, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x478>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb2b 	bl	8000d20 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fb27 	bl	8000d20 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e05c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x416>
 80016ec:	e054      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb14 	bl	8000d20 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb10 	bl	8000d20 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e045      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x444>
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e038      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d028      	beq.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d121      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0cc      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90c      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e067      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4934      	ldr	r1, [pc, #208]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fa42 	bl	8000d20 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa3e 	bl	8000d20 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e04f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f9a2 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00
 8001964:	40023800 	.word	0x40023800
 8001968:	080035e8 	.word	0x080035e8
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001978:	b094      	sub	sp, #80	; 0x50
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001998:	2b08      	cmp	r3, #8
 800199a:	f200 80e1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 80019a6:	e0db      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019ac:	e0db      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b2:	e0d8      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
 80019e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019e6:	4622      	mov	r2, r4
 80019e8:	462b      	mov	r3, r5
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0159      	lsls	r1, r3, #5
 80019f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f8:	0150      	lsls	r0, r2, #5
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4621      	mov	r1, r4
 8001a00:	1a51      	subs	r1, r2, r1
 8001a02:	6139      	str	r1, [r7, #16]
 8001a04:	4629      	mov	r1, r5
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a18:	4659      	mov	r1, fp
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a22:	4651      	mov	r1, sl
 8001a24:	018a      	lsls	r2, r1, #6
 8001a26:	4651      	mov	r1, sl
 8001a28:	ebb2 0801 	subs.w	r8, r2, r1
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	eb18 0303 	adds.w	r3, r8, r3
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	462b      	mov	r3, r5
 8001a54:	eb49 0303 	adc.w	r3, r9, r3
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a66:	4629      	mov	r1, r5
 8001a68:	024b      	lsls	r3, r1, #9
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a70:	4621      	mov	r1, r4
 8001a72:	024a      	lsls	r2, r1, #9
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a84:	f7fe fbf4 	bl	8000270 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a90:	e058      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aac:	4642      	mov	r2, r8
 8001aae:	464b      	mov	r3, r9
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0159      	lsls	r1, r3, #5
 8001aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001abe:	0150      	lsls	r0, r2, #5
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aca:	4649      	mov	r1, r9
 8001acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	00eb      	lsls	r3, r5, #3
 8001af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afa:	00e2      	lsls	r2, r4, #3
 8001afc:	4614      	mov	r4, r2
 8001afe:	461d      	mov	r5, r3
 8001b00:	4643      	mov	r3, r8
 8001b02:	18e3      	adds	r3, r4, r3
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	464b      	mov	r3, r9
 8001b08:	eb45 0303 	adc.w	r3, r5, r3
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	61fa      	str	r2, [r7, #28]
 8001b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b38:	f7fe fb9a 	bl	8000270 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3750      	adds	r7, #80	; 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07b      	b.n	8001c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d108      	bne.n	8001bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba2:	d009      	beq.n	8001bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
 8001baa:	e005      	b.n	8001bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fec0 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0104 	and.w	r1, r3, #4
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f003 0210 	and.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b088      	sub	sp, #32
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_SPI_Transmit+0x22>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e12d      	b.n	8001f10 <HAL_SPI_Transmit+0x27e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cbc:	f7ff f830 	bl	8000d20 <HAL_GetTick>
 8001cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cd6:	e116      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SPI_Transmit+0x52>
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ce8:	e10d      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	88fa      	ldrh	r2, [r7, #6]
 8001d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d30:	d10f      	bne.n	8001d52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b40      	cmp	r3, #64	; 0x40
 8001d5e:	d007      	beq.n	8001d70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d78:	d14f      	bne.n	8001e1a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_SPI_Transmit+0xf6>
 8001d82:	8afb      	ldrh	r3, [r7, #22]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d142      	bne.n	8001e0e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	881a      	ldrh	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	1c9a      	adds	r2, r3, #2
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dac:	e02f      	b.n	8001e0e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d112      	bne.n	8001de2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	1c9a      	adds	r2, r3, #2
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8001de0:	e015      	b.n	8001e0e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001de2:	f7fe ff9d 	bl	8000d20 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d803      	bhi.n	8001dfa <HAL_SPI_Transmit+0x168>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d102      	bne.n	8001e00 <HAL_SPI_Transmit+0x16e>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e0c:	e07b      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ca      	bne.n	8001dae <HAL_SPI_Transmit+0x11c>
 8001e18:	e050      	b.n	8001ebc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_SPI_Transmit+0x196>
 8001e22:	8afb      	ldrh	r3, [r7, #22]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d144      	bne.n	8001eb2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	330c      	adds	r3, #12
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e4e:	e030      	b.n	8001eb2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d113      	bne.n	8001e86 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e84:	e015      	b.n	8001eb2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e86:	f7fe ff4b 	bl	8000d20 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d803      	bhi.n	8001e9e <HAL_SPI_Transmit+0x20c>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d102      	bne.n	8001ea4 <HAL_SPI_Transmit+0x212>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001eb0:	e029      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1c9      	bne.n	8001e50 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fbdf 	bl	8002684 <SPI_EndRxTxTransaction>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
 8001efc:	e003      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f3c:	e0fb      	b.n	8002136 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f46:	d112      	bne.n	8001f6e <HAL_SPI_Receive+0x56>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10e      	bne.n	8001f6e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2204      	movs	r2, #4
 8001f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f8ef 	bl	8002148 <HAL_SPI_TransmitReceive>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e0e8      	b.n	8002140 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_SPI_Receive+0x64>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0e1      	b.n	8002140 <HAL_SPI_Receive+0x228>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f84:	f7fe fecc 	bl	8000d20 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_Receive+0x7e>
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f9a:	e0cc      	b.n	8002136 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe2:	d10f      	bne.n	8002004 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d007      	beq.n	8002022 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d16a      	bne.n	8002100 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800202a:	e032      	b.n	8002092 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d115      	bne.n	8002066 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f103 020c 	add.w	r2, r3, #12
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002064:	e015      	b.n	8002092 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002066:	f7fe fe5b 	bl	8000d20 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d803      	bhi.n	800207e <HAL_SPI_Receive+0x166>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d102      	bne.n	8002084 <HAL_SPI_Receive+0x16c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002090:	e051      	b.n	8002136 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1c7      	bne.n	800202c <HAL_SPI_Receive+0x114>
 800209c:	e035      	b.n	800210a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d113      	bne.n	80020d4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	b292      	uxth	r2, r2
 80020b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	1c9a      	adds	r2, r3, #2
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020d2:	e015      	b.n	8002100 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d4:	f7fe fe24 	bl	8000d20 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d803      	bhi.n	80020ec <HAL_SPI_Receive+0x1d4>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Receive+0x1da>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80020fe:	e01a      	b.n	8002136 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1c9      	bne.n	800209e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa52 	bl	80025b8 <SPI_EndRxTransaction>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	e003      	b.n	8002136 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800213e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002156:	2301      	movs	r3, #1
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_SPI_TransmitReceive+0x26>
 800216a:	2302      	movs	r3, #2
 800216c:	e198      	b.n	80024a0 <HAL_SPI_TransmitReceive+0x358>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002176:	f7fe fdd3 	bl	8000d20 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002194:	2b01      	cmp	r3, #1
 8002196:	d00f      	beq.n	80021b8 <HAL_SPI_TransmitReceive+0x70>
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800219e:	d107      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x68>
 80021a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d003      	beq.n	80021b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021b6:	e16d      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_SPI_TransmitReceive+0x82>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_SPI_TransmitReceive+0x82>
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021d0:	e160      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d003      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2205      	movs	r2, #5
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	887a      	ldrh	r2, [r7, #2]
 80021f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d007      	beq.n	800223a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002242:	d17c      	bne.n	800233e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x10a>
 800224c:	8b7b      	ldrh	r3, [r7, #26]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d16a      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	1c9a      	adds	r2, r3, #2
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002276:	e057      	b.n	8002328 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d11b      	bne.n	80022be <HAL_SPI_TransmitReceive+0x176>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d016      	beq.n	80022be <HAL_SPI_TransmitReceive+0x176>
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d113      	bne.n	80022be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	1c9a      	adds	r2, r3, #2
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d119      	bne.n	8002300 <HAL_SPI_TransmitReceive+0x1b8>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	b292      	uxth	r2, r2
 80022e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002300:	f7fe fd0e 	bl	8000d20 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800230c:	429a      	cmp	r2, r3
 800230e:	d80b      	bhi.n	8002328 <HAL_SPI_TransmitReceive+0x1e0>
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d007      	beq.n	8002328 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002326:	e0b5      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1a2      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x130>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d19d      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x130>
 800233c:	e080      	b.n	8002440 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_SPI_TransmitReceive+0x204>
 8002346:	8b7b      	ldrh	r3, [r7, #26]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d16f      	bne.n	800242c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002372:	e05b      	b.n	800242c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d11c      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x274>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d017      	beq.n	80023bc <HAL_SPI_TransmitReceive+0x274>
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d114      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d119      	bne.n	80023fe <HAL_SPI_TransmitReceive+0x2b6>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d014      	beq.n	80023fe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023fa:	2301      	movs	r3, #1
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023fe:	f7fe fc8f 	bl	8000d20 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800240a:	429a      	cmp	r2, r3
 800240c:	d803      	bhi.n	8002416 <HAL_SPI_TransmitReceive+0x2ce>
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d102      	bne.n	800241c <HAL_SPI_TransmitReceive+0x2d4>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800242a:	e033      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d19e      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x22c>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d199      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f91d 	bl	8002684 <SPI_EndRxTxTransaction>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800245c:	e01a      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800248a:	e003      	b.n	8002494 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800249c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3730      	adds	r7, #48	; 0x30
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024b8:	f7fe fc32 	bl	8000d20 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024c8:	f7fe fc2a 	bl	8000d20 <HAL_GetTick>
 80024cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	0d1b      	lsrs	r3, r3, #20
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024de:	e054      	b.n	800258a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d050      	beq.n	800258a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024e8:	f7fe fc1a 	bl	8000d20 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d902      	bls.n	80024fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d13d      	bne.n	800257a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800250c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002516:	d111      	bne.n	800253c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002520:	d004      	beq.n	800252c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252a:	d107      	bne.n	800253c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002544:	d10f      	bne.n	8002566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e017      	b.n	80025aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3b01      	subs	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d19b      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025cc:	d111      	bne.n	80025f2 <SPI_EndRxTransaction+0x3a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d6:	d004      	beq.n	80025e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e0:	d107      	bne.n	80025f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025fa:	d12a      	bne.n	8002652 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d012      	beq.n	800262c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff49 	bl	80024a8 <SPI_WaitFlagStateUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02d      	beq.n	8002678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e026      	b.n	800267a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	2101      	movs	r1, #1
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff36 	bl	80024a8 <SPI_WaitFlagStateUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01a      	beq.n	8002678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e013      	b.n	800267a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	2101      	movs	r1, #1
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ff23 	bl	80024a8 <SPI_WaitFlagStateUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e000      	b.n	800267a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2201      	movs	r2, #1
 8002698:	2102      	movs	r1, #2
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff04 	bl	80024a8 <SPI_WaitFlagStateUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e032      	b.n	800271c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <SPI_EndRxTxTransaction+0xa0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <SPI_EndRxTxTransaction+0xa4>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	0d5b      	lsrs	r3, r3, #21
 80026c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d4:	d112      	bne.n	80026fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fee1 	bl	80024a8 <SPI_WaitFlagStateUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d016      	beq.n	800271a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e00f      	b.n	800271c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3b01      	subs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d0f2      	beq.n	80026fc <SPI_EndRxTxTransaction+0x78>
 8002716:	e000      	b.n	800271a <SPI_EndRxTxTransaction+0x96>
        break;
 8002718:	bf00      	nop
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000000 	.word	0x20000000
 8002728:	165e9f81 	.word	0x165e9f81

0800272c <std>:
 800272c:	2300      	movs	r3, #0
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
 8002732:	e9c0 3300 	strd	r3, r3, [r0]
 8002736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800273a:	6083      	str	r3, [r0, #8]
 800273c:	8181      	strh	r1, [r0, #12]
 800273e:	6643      	str	r3, [r0, #100]	; 0x64
 8002740:	81c2      	strh	r2, [r0, #14]
 8002742:	6183      	str	r3, [r0, #24]
 8002744:	4619      	mov	r1, r3
 8002746:	2208      	movs	r2, #8
 8002748:	305c      	adds	r0, #92	; 0x5c
 800274a:	f000 f906 	bl	800295a <memset>
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <std+0x58>)
 8002750:	6263      	str	r3, [r4, #36]	; 0x24
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <std+0x5c>)
 8002754:	62a3      	str	r3, [r4, #40]	; 0x28
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <std+0x60>)
 8002758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <std+0x64>)
 800275c:	6323      	str	r3, [r4, #48]	; 0x30
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <std+0x68>)
 8002760:	6224      	str	r4, [r4, #32]
 8002762:	429c      	cmp	r4, r3
 8002764:	d006      	beq.n	8002774 <std+0x48>
 8002766:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800276a:	4294      	cmp	r4, r2
 800276c:	d002      	beq.n	8002774 <std+0x48>
 800276e:	33d0      	adds	r3, #208	; 0xd0
 8002770:	429c      	cmp	r4, r3
 8002772:	d105      	bne.n	8002780 <std+0x54>
 8002774:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277c:	f000 b966 	b.w	8002a4c <__retarget_lock_init_recursive>
 8002780:	bd10      	pop	{r4, pc}
 8002782:	bf00      	nop
 8002784:	080028d5 	.word	0x080028d5
 8002788:	080028f7 	.word	0x080028f7
 800278c:	0800292f 	.word	0x0800292f
 8002790:	08002953 	.word	0x08002953
 8002794:	200000e4 	.word	0x200000e4

08002798 <stdio_exit_handler>:
 8002798:	4a02      	ldr	r2, [pc, #8]	; (80027a4 <stdio_exit_handler+0xc>)
 800279a:	4903      	ldr	r1, [pc, #12]	; (80027a8 <stdio_exit_handler+0x10>)
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <stdio_exit_handler+0x14>)
 800279e:	f000 b869 	b.w	8002874 <_fwalk_sglue>
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	080032f9 	.word	0x080032f9
 80027ac:	20000018 	.word	0x20000018

080027b0 <cleanup_stdio>:
 80027b0:	6841      	ldr	r1, [r0, #4]
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <cleanup_stdio+0x34>)
 80027b4:	4299      	cmp	r1, r3
 80027b6:	b510      	push	{r4, lr}
 80027b8:	4604      	mov	r4, r0
 80027ba:	d001      	beq.n	80027c0 <cleanup_stdio+0x10>
 80027bc:	f000 fd9c 	bl	80032f8 <_fflush_r>
 80027c0:	68a1      	ldr	r1, [r4, #8]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <cleanup_stdio+0x38>)
 80027c4:	4299      	cmp	r1, r3
 80027c6:	d002      	beq.n	80027ce <cleanup_stdio+0x1e>
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 fd95 	bl	80032f8 <_fflush_r>
 80027ce:	68e1      	ldr	r1, [r4, #12]
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <cleanup_stdio+0x3c>)
 80027d2:	4299      	cmp	r1, r3
 80027d4:	d004      	beq.n	80027e0 <cleanup_stdio+0x30>
 80027d6:	4620      	mov	r0, r4
 80027d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027dc:	f000 bd8c 	b.w	80032f8 <_fflush_r>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	bf00      	nop
 80027e4:	200000e4 	.word	0x200000e4
 80027e8:	2000014c 	.word	0x2000014c
 80027ec:	200001b4 	.word	0x200001b4

080027f0 <global_stdio_init.part.0>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <global_stdio_init.part.0+0x30>)
 80027f4:	4c0b      	ldr	r4, [pc, #44]	; (8002824 <global_stdio_init.part.0+0x34>)
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <global_stdio_init.part.0+0x38>)
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	4620      	mov	r0, r4
 80027fc:	2200      	movs	r2, #0
 80027fe:	2104      	movs	r1, #4
 8002800:	f7ff ff94 	bl	800272c <std>
 8002804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002808:	2201      	movs	r2, #1
 800280a:	2109      	movs	r1, #9
 800280c:	f7ff ff8e 	bl	800272c <std>
 8002810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002814:	2202      	movs	r2, #2
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	2112      	movs	r1, #18
 800281c:	f7ff bf86 	b.w	800272c <std>
 8002820:	2000021c 	.word	0x2000021c
 8002824:	200000e4 	.word	0x200000e4
 8002828:	08002799 	.word	0x08002799

0800282c <__sfp_lock_acquire>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__sfp_lock_acquire+0x8>)
 800282e:	f000 b90e 	b.w	8002a4e <__retarget_lock_acquire_recursive>
 8002832:	bf00      	nop
 8002834:	20000225 	.word	0x20000225

08002838 <__sfp_lock_release>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__sfp_lock_release+0x8>)
 800283a:	f000 b909 	b.w	8002a50 <__retarget_lock_release_recursive>
 800283e:	bf00      	nop
 8002840:	20000225 	.word	0x20000225

08002844 <__sinit>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	f7ff fff0 	bl	800282c <__sfp_lock_acquire>
 800284c:	6a23      	ldr	r3, [r4, #32]
 800284e:	b11b      	cbz	r3, 8002858 <__sinit+0x14>
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f7ff bff0 	b.w	8002838 <__sfp_lock_release>
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__sinit+0x28>)
 800285a:	6223      	str	r3, [r4, #32]
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__sinit+0x2c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f5      	bne.n	8002850 <__sinit+0xc>
 8002864:	f7ff ffc4 	bl	80027f0 <global_stdio_init.part.0>
 8002868:	e7f2      	b.n	8002850 <__sinit+0xc>
 800286a:	bf00      	nop
 800286c:	080027b1 	.word	0x080027b1
 8002870:	2000021c 	.word	0x2000021c

08002874 <_fwalk_sglue>:
 8002874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002878:	4607      	mov	r7, r0
 800287a:	4688      	mov	r8, r1
 800287c:	4614      	mov	r4, r2
 800287e:	2600      	movs	r6, #0
 8002880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002884:	f1b9 0901 	subs.w	r9, r9, #1
 8002888:	d505      	bpl.n	8002896 <_fwalk_sglue+0x22>
 800288a:	6824      	ldr	r4, [r4, #0]
 800288c:	2c00      	cmp	r4, #0
 800288e:	d1f7      	bne.n	8002880 <_fwalk_sglue+0xc>
 8002890:	4630      	mov	r0, r6
 8002892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002896:	89ab      	ldrh	r3, [r5, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d907      	bls.n	80028ac <_fwalk_sglue+0x38>
 800289c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028a0:	3301      	adds	r3, #1
 80028a2:	d003      	beq.n	80028ac <_fwalk_sglue+0x38>
 80028a4:	4629      	mov	r1, r5
 80028a6:	4638      	mov	r0, r7
 80028a8:	47c0      	blx	r8
 80028aa:	4306      	orrs	r6, r0
 80028ac:	3568      	adds	r5, #104	; 0x68
 80028ae:	e7e9      	b.n	8002884 <_fwalk_sglue+0x10>

080028b0 <iprintf>:
 80028b0:	b40f      	push	{r0, r1, r2, r3}
 80028b2:	b507      	push	{r0, r1, r2, lr}
 80028b4:	4906      	ldr	r1, [pc, #24]	; (80028d0 <iprintf+0x20>)
 80028b6:	ab04      	add	r3, sp, #16
 80028b8:	6808      	ldr	r0, [r1, #0]
 80028ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80028be:	6881      	ldr	r1, [r0, #8]
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	f000 f9e9 	bl	8002c98 <_vfiprintf_r>
 80028c6:	b003      	add	sp, #12
 80028c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80028cc:	b004      	add	sp, #16
 80028ce:	4770      	bx	lr
 80028d0:	20000064 	.word	0x20000064

080028d4 <__sread>:
 80028d4:	b510      	push	{r4, lr}
 80028d6:	460c      	mov	r4, r1
 80028d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028dc:	f000 f868 	bl	80029b0 <_read_r>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	bfab      	itete	ge
 80028e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028e6:	89a3      	ldrhlt	r3, [r4, #12]
 80028e8:	181b      	addge	r3, r3, r0
 80028ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028ee:	bfac      	ite	ge
 80028f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80028f2:	81a3      	strhlt	r3, [r4, #12]
 80028f4:	bd10      	pop	{r4, pc}

080028f6 <__swrite>:
 80028f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fa:	461f      	mov	r7, r3
 80028fc:	898b      	ldrh	r3, [r1, #12]
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	4605      	mov	r5, r0
 8002902:	460c      	mov	r4, r1
 8002904:	4616      	mov	r6, r2
 8002906:	d505      	bpl.n	8002914 <__swrite+0x1e>
 8002908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290c:	2302      	movs	r3, #2
 800290e:	2200      	movs	r2, #0
 8002910:	f000 f83c 	bl	800298c <_lseek_r>
 8002914:	89a3      	ldrh	r3, [r4, #12]
 8002916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800291a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	4632      	mov	r2, r6
 8002922:	463b      	mov	r3, r7
 8002924:	4628      	mov	r0, r5
 8002926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800292a:	f000 b853 	b.w	80029d4 <_write_r>

0800292e <__sseek>:
 800292e:	b510      	push	{r4, lr}
 8002930:	460c      	mov	r4, r1
 8002932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002936:	f000 f829 	bl	800298c <_lseek_r>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	bf15      	itete	ne
 8002940:	6560      	strne	r0, [r4, #84]	; 0x54
 8002942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800294a:	81a3      	strheq	r3, [r4, #12]
 800294c:	bf18      	it	ne
 800294e:	81a3      	strhne	r3, [r4, #12]
 8002950:	bd10      	pop	{r4, pc}

08002952 <__sclose>:
 8002952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002956:	f000 b809 	b.w	800296c <_close_r>

0800295a <memset>:
 800295a:	4402      	add	r2, r0
 800295c:	4603      	mov	r3, r0
 800295e:	4293      	cmp	r3, r2
 8002960:	d100      	bne.n	8002964 <memset+0xa>
 8002962:	4770      	bx	lr
 8002964:	f803 1b01 	strb.w	r1, [r3], #1
 8002968:	e7f9      	b.n	800295e <memset+0x4>
	...

0800296c <_close_r>:
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	4d06      	ldr	r5, [pc, #24]	; (8002988 <_close_r+0x1c>)
 8002970:	2300      	movs	r3, #0
 8002972:	4604      	mov	r4, r0
 8002974:	4608      	mov	r0, r1
 8002976:	602b      	str	r3, [r5, #0]
 8002978:	f7fe f8c5 	bl	8000b06 <_close>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	d102      	bne.n	8002986 <_close_r+0x1a>
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	b103      	cbz	r3, 8002986 <_close_r+0x1a>
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	bd38      	pop	{r3, r4, r5, pc}
 8002988:	20000220 	.word	0x20000220

0800298c <_lseek_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4d07      	ldr	r5, [pc, #28]	; (80029ac <_lseek_r+0x20>)
 8002990:	4604      	mov	r4, r0
 8002992:	4608      	mov	r0, r1
 8002994:	4611      	mov	r1, r2
 8002996:	2200      	movs	r2, #0
 8002998:	602a      	str	r2, [r5, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	f7fe f8da 	bl	8000b54 <_lseek>
 80029a0:	1c43      	adds	r3, r0, #1
 80029a2:	d102      	bne.n	80029aa <_lseek_r+0x1e>
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	b103      	cbz	r3, 80029aa <_lseek_r+0x1e>
 80029a8:	6023      	str	r3, [r4, #0]
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
 80029ac:	20000220 	.word	0x20000220

080029b0 <_read_r>:
 80029b0:	b538      	push	{r3, r4, r5, lr}
 80029b2:	4d07      	ldr	r5, [pc, #28]	; (80029d0 <_read_r+0x20>)
 80029b4:	4604      	mov	r4, r0
 80029b6:	4608      	mov	r0, r1
 80029b8:	4611      	mov	r1, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	602a      	str	r2, [r5, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7fe f884 	bl	8000acc <_read>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d102      	bne.n	80029ce <_read_r+0x1e>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	b103      	cbz	r3, 80029ce <_read_r+0x1e>
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	bd38      	pop	{r3, r4, r5, pc}
 80029d0:	20000220 	.word	0x20000220

080029d4 <_write_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	; (80029f4 <_write_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fd fec6 	bl	8000774 <_write>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_write_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_write_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	20000220 	.word	0x20000220

080029f8 <__errno>:
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <__errno+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000064 	.word	0x20000064

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	4d0d      	ldr	r5, [pc, #52]	; (8002a3c <__libc_init_array+0x38>)
 8002a08:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	2600      	movs	r6, #0
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	4d0b      	ldr	r5, [pc, #44]	; (8002a44 <__libc_init_array+0x40>)
 8002a16:	4c0c      	ldr	r4, [pc, #48]	; (8002a48 <__libc_init_array+0x44>)
 8002a18:	f000 fdc0 	bl	800359c <_init>
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	2600      	movs	r6, #0
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	08003634 	.word	0x08003634
 8002a40:	08003634 	.word	0x08003634
 8002a44:	08003634 	.word	0x08003634
 8002a48:	08003638 	.word	0x08003638

08002a4c <__retarget_lock_init_recursive>:
 8002a4c:	4770      	bx	lr

08002a4e <__retarget_lock_acquire_recursive>:
 8002a4e:	4770      	bx	lr

08002a50 <__retarget_lock_release_recursive>:
 8002a50:	4770      	bx	lr
	...

08002a54 <_free_r>:
 8002a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a56:	2900      	cmp	r1, #0
 8002a58:	d044      	beq.n	8002ae4 <_free_r+0x90>
 8002a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a5e:	9001      	str	r0, [sp, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f1a1 0404 	sub.w	r4, r1, #4
 8002a66:	bfb8      	it	lt
 8002a68:	18e4      	addlt	r4, r4, r3
 8002a6a:	f000 f8df 	bl	8002c2c <__malloc_lock>
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <_free_r+0x94>)
 8002a70:	9801      	ldr	r0, [sp, #4]
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	b933      	cbnz	r3, 8002a84 <_free_r+0x30>
 8002a76:	6063      	str	r3, [r4, #4]
 8002a78:	6014      	str	r4, [r2, #0]
 8002a7a:	b003      	add	sp, #12
 8002a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a80:	f000 b8da 	b.w	8002c38 <__malloc_unlock>
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	d908      	bls.n	8002a9a <_free_r+0x46>
 8002a88:	6825      	ldr	r5, [r4, #0]
 8002a8a:	1961      	adds	r1, r4, r5
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	bf01      	itttt	eq
 8002a90:	6819      	ldreq	r1, [r3, #0]
 8002a92:	685b      	ldreq	r3, [r3, #4]
 8002a94:	1949      	addeq	r1, r1, r5
 8002a96:	6021      	streq	r1, [r4, #0]
 8002a98:	e7ed      	b.n	8002a76 <_free_r+0x22>
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b10b      	cbz	r3, 8002aa4 <_free_r+0x50>
 8002aa0:	42a3      	cmp	r3, r4
 8002aa2:	d9fa      	bls.n	8002a9a <_free_r+0x46>
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	1855      	adds	r5, r2, r1
 8002aa8:	42a5      	cmp	r5, r4
 8002aaa:	d10b      	bne.n	8002ac4 <_free_r+0x70>
 8002aac:	6824      	ldr	r4, [r4, #0]
 8002aae:	4421      	add	r1, r4
 8002ab0:	1854      	adds	r4, r2, r1
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	d1e0      	bne.n	8002a7a <_free_r+0x26>
 8002ab8:	681c      	ldr	r4, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	440c      	add	r4, r1
 8002ac0:	6014      	str	r4, [r2, #0]
 8002ac2:	e7da      	b.n	8002a7a <_free_r+0x26>
 8002ac4:	d902      	bls.n	8002acc <_free_r+0x78>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	6003      	str	r3, [r0, #0]
 8002aca:	e7d6      	b.n	8002a7a <_free_r+0x26>
 8002acc:	6825      	ldr	r5, [r4, #0]
 8002ace:	1961      	adds	r1, r4, r5
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	bf04      	itt	eq
 8002ad4:	6819      	ldreq	r1, [r3, #0]
 8002ad6:	685b      	ldreq	r3, [r3, #4]
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	bf04      	itt	eq
 8002adc:	1949      	addeq	r1, r1, r5
 8002ade:	6021      	streq	r1, [r4, #0]
 8002ae0:	6054      	str	r4, [r2, #4]
 8002ae2:	e7ca      	b.n	8002a7a <_free_r+0x26>
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bd30      	pop	{r4, r5, pc}
 8002ae8:	20000228 	.word	0x20000228

08002aec <sbrk_aligned>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4e0e      	ldr	r6, [pc, #56]	; (8002b28 <sbrk_aligned+0x3c>)
 8002af0:	460c      	mov	r4, r1
 8002af2:	6831      	ldr	r1, [r6, #0]
 8002af4:	4605      	mov	r5, r0
 8002af6:	b911      	cbnz	r1, 8002afe <sbrk_aligned+0x12>
 8002af8:	f000 fcbc 	bl	8003474 <_sbrk_r>
 8002afc:	6030      	str	r0, [r6, #0]
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 fcb7 	bl	8003474 <_sbrk_r>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	d00a      	beq.n	8002b20 <sbrk_aligned+0x34>
 8002b0a:	1cc4      	adds	r4, r0, #3
 8002b0c:	f024 0403 	bic.w	r4, r4, #3
 8002b10:	42a0      	cmp	r0, r4
 8002b12:	d007      	beq.n	8002b24 <sbrk_aligned+0x38>
 8002b14:	1a21      	subs	r1, r4, r0
 8002b16:	4628      	mov	r0, r5
 8002b18:	f000 fcac 	bl	8003474 <_sbrk_r>
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d101      	bne.n	8002b24 <sbrk_aligned+0x38>
 8002b20:	f04f 34ff 	mov.w	r4, #4294967295
 8002b24:	4620      	mov	r0, r4
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	2000022c 	.word	0x2000022c

08002b2c <_malloc_r>:
 8002b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b30:	1ccd      	adds	r5, r1, #3
 8002b32:	f025 0503 	bic.w	r5, r5, #3
 8002b36:	3508      	adds	r5, #8
 8002b38:	2d0c      	cmp	r5, #12
 8002b3a:	bf38      	it	cc
 8002b3c:	250c      	movcc	r5, #12
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	4607      	mov	r7, r0
 8002b42:	db01      	blt.n	8002b48 <_malloc_r+0x1c>
 8002b44:	42a9      	cmp	r1, r5
 8002b46:	d905      	bls.n	8002b54 <_malloc_r+0x28>
 8002b48:	230c      	movs	r3, #12
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4630      	mov	r0, r6
 8002b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c28 <_malloc_r+0xfc>
 8002b58:	f000 f868 	bl	8002c2c <__malloc_lock>
 8002b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b60:	461c      	mov	r4, r3
 8002b62:	bb5c      	cbnz	r4, 8002bbc <_malloc_r+0x90>
 8002b64:	4629      	mov	r1, r5
 8002b66:	4638      	mov	r0, r7
 8002b68:	f7ff ffc0 	bl	8002aec <sbrk_aligned>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	4604      	mov	r4, r0
 8002b70:	d155      	bne.n	8002c1e <_malloc_r+0xf2>
 8002b72:	f8d8 4000 	ldr.w	r4, [r8]
 8002b76:	4626      	mov	r6, r4
 8002b78:	2e00      	cmp	r6, #0
 8002b7a:	d145      	bne.n	8002c08 <_malloc_r+0xdc>
 8002b7c:	2c00      	cmp	r4, #0
 8002b7e:	d048      	beq.n	8002c12 <_malloc_r+0xe6>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	4631      	mov	r1, r6
 8002b84:	4638      	mov	r0, r7
 8002b86:	eb04 0903 	add.w	r9, r4, r3
 8002b8a:	f000 fc73 	bl	8003474 <_sbrk_r>
 8002b8e:	4581      	cmp	r9, r0
 8002b90:	d13f      	bne.n	8002c12 <_malloc_r+0xe6>
 8002b92:	6821      	ldr	r1, [r4, #0]
 8002b94:	1a6d      	subs	r5, r5, r1
 8002b96:	4629      	mov	r1, r5
 8002b98:	4638      	mov	r0, r7
 8002b9a:	f7ff ffa7 	bl	8002aec <sbrk_aligned>
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d037      	beq.n	8002c12 <_malloc_r+0xe6>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	442b      	add	r3, r5
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d038      	beq.n	8002c22 <_malloc_r+0xf6>
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	42a2      	cmp	r2, r4
 8002bb4:	d12b      	bne.n	8002c0e <_malloc_r+0xe2>
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e00f      	b.n	8002bdc <_malloc_r+0xb0>
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	1b52      	subs	r2, r2, r5
 8002bc0:	d41f      	bmi.n	8002c02 <_malloc_r+0xd6>
 8002bc2:	2a0b      	cmp	r2, #11
 8002bc4:	d917      	bls.n	8002bf6 <_malloc_r+0xca>
 8002bc6:	1961      	adds	r1, r4, r5
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	6025      	str	r5, [r4, #0]
 8002bcc:	bf18      	it	ne
 8002bce:	6059      	strne	r1, [r3, #4]
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	bf08      	it	eq
 8002bd4:	f8c8 1000 	streq.w	r1, [r8]
 8002bd8:	5162      	str	r2, [r4, r5]
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f104 060b 	add.w	r6, r4, #11
 8002be2:	f000 f829 	bl	8002c38 <__malloc_unlock>
 8002be6:	f026 0607 	bic.w	r6, r6, #7
 8002bea:	1d23      	adds	r3, r4, #4
 8002bec:	1af2      	subs	r2, r6, r3
 8002bee:	d0ae      	beq.n	8002b4e <_malloc_r+0x22>
 8002bf0:	1b9b      	subs	r3, r3, r6
 8002bf2:	50a3      	str	r3, [r4, r2]
 8002bf4:	e7ab      	b.n	8002b4e <_malloc_r+0x22>
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	6862      	ldr	r2, [r4, #4]
 8002bfa:	d1dd      	bne.n	8002bb8 <_malloc_r+0x8c>
 8002bfc:	f8c8 2000 	str.w	r2, [r8]
 8002c00:	e7ec      	b.n	8002bdc <_malloc_r+0xb0>
 8002c02:	4623      	mov	r3, r4
 8002c04:	6864      	ldr	r4, [r4, #4]
 8002c06:	e7ac      	b.n	8002b62 <_malloc_r+0x36>
 8002c08:	4634      	mov	r4, r6
 8002c0a:	6876      	ldr	r6, [r6, #4]
 8002c0c:	e7b4      	b.n	8002b78 <_malloc_r+0x4c>
 8002c0e:	4613      	mov	r3, r2
 8002c10:	e7cc      	b.n	8002bac <_malloc_r+0x80>
 8002c12:	230c      	movs	r3, #12
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4638      	mov	r0, r7
 8002c18:	f000 f80e 	bl	8002c38 <__malloc_unlock>
 8002c1c:	e797      	b.n	8002b4e <_malloc_r+0x22>
 8002c1e:	6025      	str	r5, [r4, #0]
 8002c20:	e7dc      	b.n	8002bdc <_malloc_r+0xb0>
 8002c22:	605b      	str	r3, [r3, #4]
 8002c24:	deff      	udf	#255	; 0xff
 8002c26:	bf00      	nop
 8002c28:	20000228 	.word	0x20000228

08002c2c <__malloc_lock>:
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <__malloc_lock+0x8>)
 8002c2e:	f7ff bf0e 	b.w	8002a4e <__retarget_lock_acquire_recursive>
 8002c32:	bf00      	nop
 8002c34:	20000224 	.word	0x20000224

08002c38 <__malloc_unlock>:
 8002c38:	4801      	ldr	r0, [pc, #4]	; (8002c40 <__malloc_unlock+0x8>)
 8002c3a:	f7ff bf09 	b.w	8002a50 <__retarget_lock_release_recursive>
 8002c3e:	bf00      	nop
 8002c40:	20000224 	.word	0x20000224

08002c44 <__sfputc_r>:
 8002c44:	6893      	ldr	r3, [r2, #8]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	b410      	push	{r4}
 8002c4c:	6093      	str	r3, [r2, #8]
 8002c4e:	da08      	bge.n	8002c62 <__sfputc_r+0x1e>
 8002c50:	6994      	ldr	r4, [r2, #24]
 8002c52:	42a3      	cmp	r3, r4
 8002c54:	db01      	blt.n	8002c5a <__sfputc_r+0x16>
 8002c56:	290a      	cmp	r1, #10
 8002c58:	d103      	bne.n	8002c62 <__sfputc_r+0x1e>
 8002c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c5e:	f000 bb73 	b.w	8003348 <__swbuf_r>
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	1c58      	adds	r0, r3, #1
 8002c66:	6010      	str	r0, [r2, #0]
 8002c68:	7019      	strb	r1, [r3, #0]
 8002c6a:	4608      	mov	r0, r1
 8002c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <__sfputs_r>:
 8002c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c74:	4606      	mov	r6, r0
 8002c76:	460f      	mov	r7, r1
 8002c78:	4614      	mov	r4, r2
 8002c7a:	18d5      	adds	r5, r2, r3
 8002c7c:	42ac      	cmp	r4, r5
 8002c7e:	d101      	bne.n	8002c84 <__sfputs_r+0x12>
 8002c80:	2000      	movs	r0, #0
 8002c82:	e007      	b.n	8002c94 <__sfputs_r+0x22>
 8002c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c88:	463a      	mov	r2, r7
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f7ff ffda 	bl	8002c44 <__sfputc_r>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d1f3      	bne.n	8002c7c <__sfputs_r+0xa>
 8002c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c98 <_vfiprintf_r>:
 8002c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	b09d      	sub	sp, #116	; 0x74
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	4698      	mov	r8, r3
 8002ca4:	4606      	mov	r6, r0
 8002ca6:	b118      	cbz	r0, 8002cb0 <_vfiprintf_r+0x18>
 8002ca8:	6a03      	ldr	r3, [r0, #32]
 8002caa:	b90b      	cbnz	r3, 8002cb0 <_vfiprintf_r+0x18>
 8002cac:	f7ff fdca 	bl	8002844 <__sinit>
 8002cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cb2:	07d9      	lsls	r1, r3, #31
 8002cb4:	d405      	bmi.n	8002cc2 <_vfiprintf_r+0x2a>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	059a      	lsls	r2, r3, #22
 8002cba:	d402      	bmi.n	8002cc2 <_vfiprintf_r+0x2a>
 8002cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cbe:	f7ff fec6 	bl	8002a4e <__retarget_lock_acquire_recursive>
 8002cc2:	89ab      	ldrh	r3, [r5, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	d501      	bpl.n	8002ccc <_vfiprintf_r+0x34>
 8002cc8:	692b      	ldr	r3, [r5, #16]
 8002cca:	b99b      	cbnz	r3, 8002cf4 <_vfiprintf_r+0x5c>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 fb78 	bl	80033c4 <__swsetup_r>
 8002cd4:	b170      	cbz	r0, 8002cf4 <_vfiprintf_r+0x5c>
 8002cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cd8:	07dc      	lsls	r4, r3, #31
 8002cda:	d504      	bpl.n	8002ce6 <_vfiprintf_r+0x4e>
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	b01d      	add	sp, #116	; 0x74
 8002ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce6:	89ab      	ldrh	r3, [r5, #12]
 8002ce8:	0598      	lsls	r0, r3, #22
 8002cea:	d4f7      	bmi.n	8002cdc <_vfiprintf_r+0x44>
 8002cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cee:	f7ff feaf 	bl	8002a50 <__retarget_lock_release_recursive>
 8002cf2:	e7f3      	b.n	8002cdc <_vfiprintf_r+0x44>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d02:	2330      	movs	r3, #48	; 0x30
 8002d04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002eb8 <_vfiprintf_r+0x220>
 8002d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d0c:	f04f 0901 	mov.w	r9, #1
 8002d10:	4623      	mov	r3, r4
 8002d12:	469a      	mov	sl, r3
 8002d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d18:	b10a      	cbz	r2, 8002d1e <_vfiprintf_r+0x86>
 8002d1a:	2a25      	cmp	r2, #37	; 0x25
 8002d1c:	d1f9      	bne.n	8002d12 <_vfiprintf_r+0x7a>
 8002d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d22:	d00b      	beq.n	8002d3c <_vfiprintf_r+0xa4>
 8002d24:	465b      	mov	r3, fp
 8002d26:	4622      	mov	r2, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f7ff ffa1 	bl	8002c72 <__sfputs_r>
 8002d30:	3001      	adds	r0, #1
 8002d32:	f000 80a9 	beq.w	8002e88 <_vfiprintf_r+0x1f0>
 8002d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d38:	445a      	add	r2, fp
 8002d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a1 	beq.w	8002e88 <_vfiprintf_r+0x1f0>
 8002d46:	2300      	movs	r3, #0
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d50:	f10a 0a01 	add.w	sl, sl, #1
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	9307      	str	r3, [sp, #28]
 8002d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8002d5e:	4654      	mov	r4, sl
 8002d60:	2205      	movs	r2, #5
 8002d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d66:	4854      	ldr	r0, [pc, #336]	; (8002eb8 <_vfiprintf_r+0x220>)
 8002d68:	f7fd fa32 	bl	80001d0 <memchr>
 8002d6c:	9a04      	ldr	r2, [sp, #16]
 8002d6e:	b9d8      	cbnz	r0, 8002da8 <_vfiprintf_r+0x110>
 8002d70:	06d1      	lsls	r1, r2, #27
 8002d72:	bf44      	itt	mi
 8002d74:	2320      	movmi	r3, #32
 8002d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d7a:	0713      	lsls	r3, r2, #28
 8002d7c:	bf44      	itt	mi
 8002d7e:	232b      	movmi	r3, #43	; 0x2b
 8002d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d84:	f89a 3000 	ldrb.w	r3, [sl]
 8002d88:	2b2a      	cmp	r3, #42	; 0x2a
 8002d8a:	d015      	beq.n	8002db8 <_vfiprintf_r+0x120>
 8002d8c:	9a07      	ldr	r2, [sp, #28]
 8002d8e:	4654      	mov	r4, sl
 8002d90:	2000      	movs	r0, #0
 8002d92:	f04f 0c0a 	mov.w	ip, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d9c:	3b30      	subs	r3, #48	; 0x30
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d94d      	bls.n	8002e3e <_vfiprintf_r+0x1a6>
 8002da2:	b1b0      	cbz	r0, 8002dd2 <_vfiprintf_r+0x13a>
 8002da4:	9207      	str	r2, [sp, #28]
 8002da6:	e014      	b.n	8002dd2 <_vfiprintf_r+0x13a>
 8002da8:	eba0 0308 	sub.w	r3, r0, r8
 8002dac:	fa09 f303 	lsl.w	r3, r9, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	9304      	str	r3, [sp, #16]
 8002db4:	46a2      	mov	sl, r4
 8002db6:	e7d2      	b.n	8002d5e <_vfiprintf_r+0xc6>
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	1d19      	adds	r1, r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	9103      	str	r1, [sp, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bfbb      	ittet	lt
 8002dc4:	425b      	neglt	r3, r3
 8002dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8002dca:	9307      	strge	r3, [sp, #28]
 8002dcc:	9307      	strlt	r3, [sp, #28]
 8002dce:	bfb8      	it	lt
 8002dd0:	9204      	strlt	r2, [sp, #16]
 8002dd2:	7823      	ldrb	r3, [r4, #0]
 8002dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd6:	d10c      	bne.n	8002df2 <_vfiprintf_r+0x15a>
 8002dd8:	7863      	ldrb	r3, [r4, #1]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d134      	bne.n	8002e48 <_vfiprintf_r+0x1b0>
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	1d1a      	adds	r2, r3, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	9203      	str	r2, [sp, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bfb8      	it	lt
 8002dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dee:	3402      	adds	r4, #2
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002ec8 <_vfiprintf_r+0x230>
 8002df6:	7821      	ldrb	r1, [r4, #0]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4650      	mov	r0, sl
 8002dfc:	f7fd f9e8 	bl	80001d0 <memchr>
 8002e00:	b138      	cbz	r0, 8002e12 <_vfiprintf_r+0x17a>
 8002e02:	9b04      	ldr	r3, [sp, #16]
 8002e04:	eba0 000a 	sub.w	r0, r0, sl
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	4082      	lsls	r2, r0
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	3401      	adds	r4, #1
 8002e10:	9304      	str	r3, [sp, #16]
 8002e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e16:	4829      	ldr	r0, [pc, #164]	; (8002ebc <_vfiprintf_r+0x224>)
 8002e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e1c:	2206      	movs	r2, #6
 8002e1e:	f7fd f9d7 	bl	80001d0 <memchr>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d03f      	beq.n	8002ea6 <_vfiprintf_r+0x20e>
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <_vfiprintf_r+0x228>)
 8002e28:	bb1b      	cbnz	r3, 8002e72 <_vfiprintf_r+0x1da>
 8002e2a:	9b03      	ldr	r3, [sp, #12]
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	f023 0307 	bic.w	r3, r3, #7
 8002e32:	3308      	adds	r3, #8
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e38:	443b      	add	r3, r7
 8002e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3c:	e768      	b.n	8002d10 <_vfiprintf_r+0x78>
 8002e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e42:	460c      	mov	r4, r1
 8002e44:	2001      	movs	r0, #1
 8002e46:	e7a6      	b.n	8002d96 <_vfiprintf_r+0xfe>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	3401      	adds	r4, #1
 8002e4c:	9305      	str	r3, [sp, #20]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f04f 0c0a 	mov.w	ip, #10
 8002e54:	4620      	mov	r0, r4
 8002e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e5a:	3a30      	subs	r2, #48	; 0x30
 8002e5c:	2a09      	cmp	r2, #9
 8002e5e:	d903      	bls.n	8002e68 <_vfiprintf_r+0x1d0>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0c6      	beq.n	8002df2 <_vfiprintf_r+0x15a>
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	e7c4      	b.n	8002df2 <_vfiprintf_r+0x15a>
 8002e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e7f0      	b.n	8002e54 <_vfiprintf_r+0x1bc>
 8002e72:	ab03      	add	r3, sp, #12
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	462a      	mov	r2, r5
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <_vfiprintf_r+0x22c>)
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f3af 8000 	nop.w
 8002e82:	4607      	mov	r7, r0
 8002e84:	1c78      	adds	r0, r7, #1
 8002e86:	d1d6      	bne.n	8002e36 <_vfiprintf_r+0x19e>
 8002e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e8a:	07d9      	lsls	r1, r3, #31
 8002e8c:	d405      	bmi.n	8002e9a <_vfiprintf_r+0x202>
 8002e8e:	89ab      	ldrh	r3, [r5, #12]
 8002e90:	059a      	lsls	r2, r3, #22
 8002e92:	d402      	bmi.n	8002e9a <_vfiprintf_r+0x202>
 8002e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e96:	f7ff fddb 	bl	8002a50 <__retarget_lock_release_recursive>
 8002e9a:	89ab      	ldrh	r3, [r5, #12]
 8002e9c:	065b      	lsls	r3, r3, #25
 8002e9e:	f53f af1d 	bmi.w	8002cdc <_vfiprintf_r+0x44>
 8002ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ea4:	e71c      	b.n	8002ce0 <_vfiprintf_r+0x48>
 8002ea6:	ab03      	add	r3, sp, #12
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	462a      	mov	r2, r5
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <_vfiprintf_r+0x22c>)
 8002eae:	a904      	add	r1, sp, #16
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f000 f879 	bl	8002fa8 <_printf_i>
 8002eb6:	e7e4      	b.n	8002e82 <_vfiprintf_r+0x1ea>
 8002eb8:	080035f8 	.word	0x080035f8
 8002ebc:	08003602 	.word	0x08003602
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	08002c73 	.word	0x08002c73
 8002ec8:	080035fe 	.word	0x080035fe

08002ecc <_printf_common>:
 8002ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed0:	4616      	mov	r6, r2
 8002ed2:	4699      	mov	r9, r3
 8002ed4:	688a      	ldr	r2, [r1, #8]
 8002ed6:	690b      	ldr	r3, [r1, #16]
 8002ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bfb8      	it	lt
 8002ee0:	4613      	movlt	r3, r2
 8002ee2:	6033      	str	r3, [r6, #0]
 8002ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ee8:	4607      	mov	r7, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	b10a      	cbz	r2, 8002ef2 <_printf_common+0x26>
 8002eee:	3301      	adds	r3, #1
 8002ef0:	6033      	str	r3, [r6, #0]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	0699      	lsls	r1, r3, #26
 8002ef6:	bf42      	ittt	mi
 8002ef8:	6833      	ldrmi	r3, [r6, #0]
 8002efa:	3302      	addmi	r3, #2
 8002efc:	6033      	strmi	r3, [r6, #0]
 8002efe:	6825      	ldr	r5, [r4, #0]
 8002f00:	f015 0506 	ands.w	r5, r5, #6
 8002f04:	d106      	bne.n	8002f14 <_printf_common+0x48>
 8002f06:	f104 0a19 	add.w	sl, r4, #25
 8002f0a:	68e3      	ldr	r3, [r4, #12]
 8002f0c:	6832      	ldr	r2, [r6, #0]
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	42ab      	cmp	r3, r5
 8002f12:	dc26      	bgt.n	8002f62 <_printf_common+0x96>
 8002f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f18:	1e13      	subs	r3, r2, #0
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	bf18      	it	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	0692      	lsls	r2, r2, #26
 8002f22:	d42b      	bmi.n	8002f7c <_printf_common+0xb0>
 8002f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	47c0      	blx	r8
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d01e      	beq.n	8002f70 <_printf_common+0xa4>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	6922      	ldr	r2, [r4, #16]
 8002f36:	f003 0306 	and.w	r3, r3, #6
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf02      	ittt	eq
 8002f3e:	68e5      	ldreq	r5, [r4, #12]
 8002f40:	6833      	ldreq	r3, [r6, #0]
 8002f42:	1aed      	subeq	r5, r5, r3
 8002f44:	68a3      	ldr	r3, [r4, #8]
 8002f46:	bf0c      	ite	eq
 8002f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f4c:	2500      	movne	r5, #0
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	bfc4      	itt	gt
 8002f52:	1a9b      	subgt	r3, r3, r2
 8002f54:	18ed      	addgt	r5, r5, r3
 8002f56:	2600      	movs	r6, #0
 8002f58:	341a      	adds	r4, #26
 8002f5a:	42b5      	cmp	r5, r6
 8002f5c:	d11a      	bne.n	8002f94 <_printf_common+0xc8>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e008      	b.n	8002f74 <_printf_common+0xa8>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4652      	mov	r2, sl
 8002f66:	4649      	mov	r1, r9
 8002f68:	4638      	mov	r0, r7
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d103      	bne.n	8002f78 <_printf_common+0xac>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7c6      	b.n	8002f0a <_printf_common+0x3e>
 8002f7c:	18e1      	adds	r1, r4, r3
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	2030      	movs	r0, #48	; 0x30
 8002f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f86:	4422      	add	r2, r4
 8002f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f90:	3302      	adds	r3, #2
 8002f92:	e7c7      	b.n	8002f24 <_printf_common+0x58>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4622      	mov	r2, r4
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0e6      	beq.n	8002f70 <_printf_common+0xa4>
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7d9      	b.n	8002f5a <_printf_common+0x8e>
	...

08002fa8 <_printf_i>:
 8002fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	7e0f      	ldrb	r7, [r1, #24]
 8002fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fb0:	2f78      	cmp	r7, #120	; 0x78
 8002fb2:	4691      	mov	r9, r2
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	469a      	mov	sl, r3
 8002fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fbe:	d807      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fc0:	2f62      	cmp	r7, #98	; 0x62
 8002fc2:	d80a      	bhi.n	8002fda <_printf_i+0x32>
 8002fc4:	2f00      	cmp	r7, #0
 8002fc6:	f000 80d4 	beq.w	8003172 <_printf_i+0x1ca>
 8002fca:	2f58      	cmp	r7, #88	; 0x58
 8002fcc:	f000 80c0 	beq.w	8003150 <_printf_i+0x1a8>
 8002fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fd8:	e03a      	b.n	8003050 <_printf_i+0xa8>
 8002fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fde:	2b15      	cmp	r3, #21
 8002fe0:	d8f6      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fe2:	a101      	add	r1, pc, #4	; (adr r1, 8002fe8 <_printf_i+0x40>)
 8002fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fe8:	08003041 	.word	0x08003041
 8002fec:	08003055 	.word	0x08003055
 8002ff0:	08002fd1 	.word	0x08002fd1
 8002ff4:	08002fd1 	.word	0x08002fd1
 8002ff8:	08002fd1 	.word	0x08002fd1
 8002ffc:	08002fd1 	.word	0x08002fd1
 8003000:	08003055 	.word	0x08003055
 8003004:	08002fd1 	.word	0x08002fd1
 8003008:	08002fd1 	.word	0x08002fd1
 800300c:	08002fd1 	.word	0x08002fd1
 8003010:	08002fd1 	.word	0x08002fd1
 8003014:	08003159 	.word	0x08003159
 8003018:	08003081 	.word	0x08003081
 800301c:	08003113 	.word	0x08003113
 8003020:	08002fd1 	.word	0x08002fd1
 8003024:	08002fd1 	.word	0x08002fd1
 8003028:	0800317b 	.word	0x0800317b
 800302c:	08002fd1 	.word	0x08002fd1
 8003030:	08003081 	.word	0x08003081
 8003034:	08002fd1 	.word	0x08002fd1
 8003038:	08002fd1 	.word	0x08002fd1
 800303c:	0800311b 	.word	0x0800311b
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	1d1a      	adds	r2, r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	602a      	str	r2, [r5, #0]
 8003048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800304c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003050:	2301      	movs	r3, #1
 8003052:	e09f      	b.n	8003194 <_printf_i+0x1ec>
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	0607      	lsls	r7, r0, #24
 800305a:	f103 0104 	add.w	r1, r3, #4
 800305e:	6029      	str	r1, [r5, #0]
 8003060:	d501      	bpl.n	8003066 <_printf_i+0xbe>
 8003062:	681e      	ldr	r6, [r3, #0]
 8003064:	e003      	b.n	800306e <_printf_i+0xc6>
 8003066:	0646      	lsls	r6, r0, #25
 8003068:	d5fb      	bpl.n	8003062 <_printf_i+0xba>
 800306a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800306e:	2e00      	cmp	r6, #0
 8003070:	da03      	bge.n	800307a <_printf_i+0xd2>
 8003072:	232d      	movs	r3, #45	; 0x2d
 8003074:	4276      	negs	r6, r6
 8003076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800307a:	485a      	ldr	r0, [pc, #360]	; (80031e4 <_printf_i+0x23c>)
 800307c:	230a      	movs	r3, #10
 800307e:	e012      	b.n	80030a6 <_printf_i+0xfe>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	1d19      	adds	r1, r3, #4
 8003086:	6029      	str	r1, [r5, #0]
 8003088:	0605      	lsls	r5, r0, #24
 800308a:	d501      	bpl.n	8003090 <_printf_i+0xe8>
 800308c:	681e      	ldr	r6, [r3, #0]
 800308e:	e002      	b.n	8003096 <_printf_i+0xee>
 8003090:	0641      	lsls	r1, r0, #25
 8003092:	d5fb      	bpl.n	800308c <_printf_i+0xe4>
 8003094:	881e      	ldrh	r6, [r3, #0]
 8003096:	4853      	ldr	r0, [pc, #332]	; (80031e4 <_printf_i+0x23c>)
 8003098:	2f6f      	cmp	r7, #111	; 0x6f
 800309a:	bf0c      	ite	eq
 800309c:	2308      	moveq	r3, #8
 800309e:	230a      	movne	r3, #10
 80030a0:	2100      	movs	r1, #0
 80030a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030a6:	6865      	ldr	r5, [r4, #4]
 80030a8:	60a5      	str	r5, [r4, #8]
 80030aa:	2d00      	cmp	r5, #0
 80030ac:	bfa2      	ittt	ge
 80030ae:	6821      	ldrge	r1, [r4, #0]
 80030b0:	f021 0104 	bicge.w	r1, r1, #4
 80030b4:	6021      	strge	r1, [r4, #0]
 80030b6:	b90e      	cbnz	r6, 80030bc <_printf_i+0x114>
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	d04b      	beq.n	8003154 <_printf_i+0x1ac>
 80030bc:	4615      	mov	r5, r2
 80030be:	fbb6 f1f3 	udiv	r1, r6, r3
 80030c2:	fb03 6711 	mls	r7, r3, r1, r6
 80030c6:	5dc7      	ldrb	r7, [r0, r7]
 80030c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030cc:	4637      	mov	r7, r6
 80030ce:	42bb      	cmp	r3, r7
 80030d0:	460e      	mov	r6, r1
 80030d2:	d9f4      	bls.n	80030be <_printf_i+0x116>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d10b      	bne.n	80030f0 <_printf_i+0x148>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	07de      	lsls	r6, r3, #31
 80030dc:	d508      	bpl.n	80030f0 <_printf_i+0x148>
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	6861      	ldr	r1, [r4, #4]
 80030e2:	4299      	cmp	r1, r3
 80030e4:	bfde      	ittt	le
 80030e6:	2330      	movle	r3, #48	; 0x30
 80030e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030f0:	1b52      	subs	r2, r2, r5
 80030f2:	6122      	str	r2, [r4, #16]
 80030f4:	f8cd a000 	str.w	sl, [sp]
 80030f8:	464b      	mov	r3, r9
 80030fa:	aa03      	add	r2, sp, #12
 80030fc:	4621      	mov	r1, r4
 80030fe:	4640      	mov	r0, r8
 8003100:	f7ff fee4 	bl	8002ecc <_printf_common>
 8003104:	3001      	adds	r0, #1
 8003106:	d14a      	bne.n	800319e <_printf_i+0x1f6>
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	b004      	add	sp, #16
 800310e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	4833      	ldr	r0, [pc, #204]	; (80031e8 <_printf_i+0x240>)
 800311c:	2778      	movs	r7, #120	; 0x78
 800311e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	6829      	ldr	r1, [r5, #0]
 8003126:	061f      	lsls	r7, r3, #24
 8003128:	f851 6b04 	ldr.w	r6, [r1], #4
 800312c:	d402      	bmi.n	8003134 <_printf_i+0x18c>
 800312e:	065f      	lsls	r7, r3, #25
 8003130:	bf48      	it	mi
 8003132:	b2b6      	uxthmi	r6, r6
 8003134:	07df      	lsls	r7, r3, #31
 8003136:	bf48      	it	mi
 8003138:	f043 0320 	orrmi.w	r3, r3, #32
 800313c:	6029      	str	r1, [r5, #0]
 800313e:	bf48      	it	mi
 8003140:	6023      	strmi	r3, [r4, #0]
 8003142:	b91e      	cbnz	r6, 800314c <_printf_i+0x1a4>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f023 0320 	bic.w	r3, r3, #32
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	2310      	movs	r3, #16
 800314e:	e7a7      	b.n	80030a0 <_printf_i+0xf8>
 8003150:	4824      	ldr	r0, [pc, #144]	; (80031e4 <_printf_i+0x23c>)
 8003152:	e7e4      	b.n	800311e <_printf_i+0x176>
 8003154:	4615      	mov	r5, r2
 8003156:	e7bd      	b.n	80030d4 <_printf_i+0x12c>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	6826      	ldr	r6, [r4, #0]
 800315c:	6961      	ldr	r1, [r4, #20]
 800315e:	1d18      	adds	r0, r3, #4
 8003160:	6028      	str	r0, [r5, #0]
 8003162:	0635      	lsls	r5, r6, #24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	d501      	bpl.n	800316c <_printf_i+0x1c4>
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	e002      	b.n	8003172 <_printf_i+0x1ca>
 800316c:	0670      	lsls	r0, r6, #25
 800316e:	d5fb      	bpl.n	8003168 <_printf_i+0x1c0>
 8003170:	8019      	strh	r1, [r3, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	6123      	str	r3, [r4, #16]
 8003176:	4615      	mov	r5, r2
 8003178:	e7bc      	b.n	80030f4 <_printf_i+0x14c>
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	602a      	str	r2, [r5, #0]
 8003180:	681d      	ldr	r5, [r3, #0]
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	2100      	movs	r1, #0
 8003186:	4628      	mov	r0, r5
 8003188:	f7fd f822 	bl	80001d0 <memchr>
 800318c:	b108      	cbz	r0, 8003192 <_printf_i+0x1ea>
 800318e:	1b40      	subs	r0, r0, r5
 8003190:	6060      	str	r0, [r4, #4]
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	6123      	str	r3, [r4, #16]
 8003196:	2300      	movs	r3, #0
 8003198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800319c:	e7aa      	b.n	80030f4 <_printf_i+0x14c>
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	462a      	mov	r2, r5
 80031a2:	4649      	mov	r1, r9
 80031a4:	4640      	mov	r0, r8
 80031a6:	47d0      	blx	sl
 80031a8:	3001      	adds	r0, #1
 80031aa:	d0ad      	beq.n	8003108 <_printf_i+0x160>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	079b      	lsls	r3, r3, #30
 80031b0:	d413      	bmi.n	80031da <_printf_i+0x232>
 80031b2:	68e0      	ldr	r0, [r4, #12]
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	4298      	cmp	r0, r3
 80031b8:	bfb8      	it	lt
 80031ba:	4618      	movlt	r0, r3
 80031bc:	e7a6      	b.n	800310c <_printf_i+0x164>
 80031be:	2301      	movs	r3, #1
 80031c0:	4632      	mov	r2, r6
 80031c2:	4649      	mov	r1, r9
 80031c4:	4640      	mov	r0, r8
 80031c6:	47d0      	blx	sl
 80031c8:	3001      	adds	r0, #1
 80031ca:	d09d      	beq.n	8003108 <_printf_i+0x160>
 80031cc:	3501      	adds	r5, #1
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	9903      	ldr	r1, [sp, #12]
 80031d2:	1a5b      	subs	r3, r3, r1
 80031d4:	42ab      	cmp	r3, r5
 80031d6:	dcf2      	bgt.n	80031be <_printf_i+0x216>
 80031d8:	e7eb      	b.n	80031b2 <_printf_i+0x20a>
 80031da:	2500      	movs	r5, #0
 80031dc:	f104 0619 	add.w	r6, r4, #25
 80031e0:	e7f5      	b.n	80031ce <_printf_i+0x226>
 80031e2:	bf00      	nop
 80031e4:	08003609 	.word	0x08003609
 80031e8:	0800361a 	.word	0x0800361a

080031ec <__sflush_r>:
 80031ec:	898a      	ldrh	r2, [r1, #12]
 80031ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f2:	4605      	mov	r5, r0
 80031f4:	0710      	lsls	r0, r2, #28
 80031f6:	460c      	mov	r4, r1
 80031f8:	d458      	bmi.n	80032ac <__sflush_r+0xc0>
 80031fa:	684b      	ldr	r3, [r1, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	dc05      	bgt.n	800320c <__sflush_r+0x20>
 8003200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	dc02      	bgt.n	800320c <__sflush_r+0x20>
 8003206:	2000      	movs	r0, #0
 8003208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800320c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800320e:	2e00      	cmp	r6, #0
 8003210:	d0f9      	beq.n	8003206 <__sflush_r+0x1a>
 8003212:	2300      	movs	r3, #0
 8003214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003218:	682f      	ldr	r7, [r5, #0]
 800321a:	6a21      	ldr	r1, [r4, #32]
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	d032      	beq.n	8003286 <__sflush_r+0x9a>
 8003220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	075a      	lsls	r2, r3, #29
 8003226:	d505      	bpl.n	8003234 <__sflush_r+0x48>
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	1ac0      	subs	r0, r0, r3
 800322c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800322e:	b10b      	cbz	r3, 8003234 <__sflush_r+0x48>
 8003230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003232:	1ac0      	subs	r0, r0, r3
 8003234:	2300      	movs	r3, #0
 8003236:	4602      	mov	r2, r0
 8003238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800323a:	6a21      	ldr	r1, [r4, #32]
 800323c:	4628      	mov	r0, r5
 800323e:	47b0      	blx	r6
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	d106      	bne.n	8003254 <__sflush_r+0x68>
 8003246:	6829      	ldr	r1, [r5, #0]
 8003248:	291d      	cmp	r1, #29
 800324a:	d82b      	bhi.n	80032a4 <__sflush_r+0xb8>
 800324c:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <__sflush_r+0x108>)
 800324e:	410a      	asrs	r2, r1
 8003250:	07d6      	lsls	r6, r2, #31
 8003252:	d427      	bmi.n	80032a4 <__sflush_r+0xb8>
 8003254:	2200      	movs	r2, #0
 8003256:	6062      	str	r2, [r4, #4]
 8003258:	04d9      	lsls	r1, r3, #19
 800325a:	6922      	ldr	r2, [r4, #16]
 800325c:	6022      	str	r2, [r4, #0]
 800325e:	d504      	bpl.n	800326a <__sflush_r+0x7e>
 8003260:	1c42      	adds	r2, r0, #1
 8003262:	d101      	bne.n	8003268 <__sflush_r+0x7c>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b903      	cbnz	r3, 800326a <__sflush_r+0x7e>
 8003268:	6560      	str	r0, [r4, #84]	; 0x54
 800326a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800326c:	602f      	str	r7, [r5, #0]
 800326e:	2900      	cmp	r1, #0
 8003270:	d0c9      	beq.n	8003206 <__sflush_r+0x1a>
 8003272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003276:	4299      	cmp	r1, r3
 8003278:	d002      	beq.n	8003280 <__sflush_r+0x94>
 800327a:	4628      	mov	r0, r5
 800327c:	f7ff fbea 	bl	8002a54 <_free_r>
 8003280:	2000      	movs	r0, #0
 8003282:	6360      	str	r0, [r4, #52]	; 0x34
 8003284:	e7c0      	b.n	8003208 <__sflush_r+0x1c>
 8003286:	2301      	movs	r3, #1
 8003288:	4628      	mov	r0, r5
 800328a:	47b0      	blx	r6
 800328c:	1c41      	adds	r1, r0, #1
 800328e:	d1c8      	bne.n	8003222 <__sflush_r+0x36>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0c5      	beq.n	8003222 <__sflush_r+0x36>
 8003296:	2b1d      	cmp	r3, #29
 8003298:	d001      	beq.n	800329e <__sflush_r+0xb2>
 800329a:	2b16      	cmp	r3, #22
 800329c:	d101      	bne.n	80032a2 <__sflush_r+0xb6>
 800329e:	602f      	str	r7, [r5, #0]
 80032a0:	e7b1      	b.n	8003206 <__sflush_r+0x1a>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	e7ad      	b.n	8003208 <__sflush_r+0x1c>
 80032ac:	690f      	ldr	r7, [r1, #16]
 80032ae:	2f00      	cmp	r7, #0
 80032b0:	d0a9      	beq.n	8003206 <__sflush_r+0x1a>
 80032b2:	0793      	lsls	r3, r2, #30
 80032b4:	680e      	ldr	r6, [r1, #0]
 80032b6:	bf08      	it	eq
 80032b8:	694b      	ldreq	r3, [r1, #20]
 80032ba:	600f      	str	r7, [r1, #0]
 80032bc:	bf18      	it	ne
 80032be:	2300      	movne	r3, #0
 80032c0:	eba6 0807 	sub.w	r8, r6, r7
 80032c4:	608b      	str	r3, [r1, #8]
 80032c6:	f1b8 0f00 	cmp.w	r8, #0
 80032ca:	dd9c      	ble.n	8003206 <__sflush_r+0x1a>
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032d0:	4643      	mov	r3, r8
 80032d2:	463a      	mov	r2, r7
 80032d4:	4628      	mov	r0, r5
 80032d6:	47b0      	blx	r6
 80032d8:	2800      	cmp	r0, #0
 80032da:	dc06      	bgt.n	80032ea <__sflush_r+0xfe>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	e78e      	b.n	8003208 <__sflush_r+0x1c>
 80032ea:	4407      	add	r7, r0
 80032ec:	eba8 0800 	sub.w	r8, r8, r0
 80032f0:	e7e9      	b.n	80032c6 <__sflush_r+0xda>
 80032f2:	bf00      	nop
 80032f4:	dfbffffe 	.word	0xdfbffffe

080032f8 <_fflush_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	690b      	ldr	r3, [r1, #16]
 80032fc:	4605      	mov	r5, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	b913      	cbnz	r3, 8003308 <_fflush_r+0x10>
 8003302:	2500      	movs	r5, #0
 8003304:	4628      	mov	r0, r5
 8003306:	bd38      	pop	{r3, r4, r5, pc}
 8003308:	b118      	cbz	r0, 8003312 <_fflush_r+0x1a>
 800330a:	6a03      	ldr	r3, [r0, #32]
 800330c:	b90b      	cbnz	r3, 8003312 <_fflush_r+0x1a>
 800330e:	f7ff fa99 	bl	8002844 <__sinit>
 8003312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f3      	beq.n	8003302 <_fflush_r+0xa>
 800331a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800331c:	07d0      	lsls	r0, r2, #31
 800331e:	d404      	bmi.n	800332a <_fflush_r+0x32>
 8003320:	0599      	lsls	r1, r3, #22
 8003322:	d402      	bmi.n	800332a <_fflush_r+0x32>
 8003324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003326:	f7ff fb92 	bl	8002a4e <__retarget_lock_acquire_recursive>
 800332a:	4628      	mov	r0, r5
 800332c:	4621      	mov	r1, r4
 800332e:	f7ff ff5d 	bl	80031ec <__sflush_r>
 8003332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003334:	07da      	lsls	r2, r3, #31
 8003336:	4605      	mov	r5, r0
 8003338:	d4e4      	bmi.n	8003304 <_fflush_r+0xc>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	059b      	lsls	r3, r3, #22
 800333e:	d4e1      	bmi.n	8003304 <_fflush_r+0xc>
 8003340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003342:	f7ff fb85 	bl	8002a50 <__retarget_lock_release_recursive>
 8003346:	e7dd      	b.n	8003304 <_fflush_r+0xc>

08003348 <__swbuf_r>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	460e      	mov	r6, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4605      	mov	r5, r0
 8003350:	b118      	cbz	r0, 800335a <__swbuf_r+0x12>
 8003352:	6a03      	ldr	r3, [r0, #32]
 8003354:	b90b      	cbnz	r3, 800335a <__swbuf_r+0x12>
 8003356:	f7ff fa75 	bl	8002844 <__sinit>
 800335a:	69a3      	ldr	r3, [r4, #24]
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	071a      	lsls	r2, r3, #28
 8003362:	d525      	bpl.n	80033b0 <__swbuf_r+0x68>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	b31b      	cbz	r3, 80033b0 <__swbuf_r+0x68>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	6922      	ldr	r2, [r4, #16]
 800336c:	1a98      	subs	r0, r3, r2
 800336e:	6963      	ldr	r3, [r4, #20]
 8003370:	b2f6      	uxtb	r6, r6
 8003372:	4283      	cmp	r3, r0
 8003374:	4637      	mov	r7, r6
 8003376:	dc04      	bgt.n	8003382 <__swbuf_r+0x3a>
 8003378:	4621      	mov	r1, r4
 800337a:	4628      	mov	r0, r5
 800337c:	f7ff ffbc 	bl	80032f8 <_fflush_r>
 8003380:	b9e0      	cbnz	r0, 80033bc <__swbuf_r+0x74>
 8003382:	68a3      	ldr	r3, [r4, #8]
 8003384:	3b01      	subs	r3, #1
 8003386:	60a3      	str	r3, [r4, #8]
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	6022      	str	r2, [r4, #0]
 800338e:	701e      	strb	r6, [r3, #0]
 8003390:	6962      	ldr	r2, [r4, #20]
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	429a      	cmp	r2, r3
 8003396:	d004      	beq.n	80033a2 <__swbuf_r+0x5a>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	07db      	lsls	r3, r3, #31
 800339c:	d506      	bpl.n	80033ac <__swbuf_r+0x64>
 800339e:	2e0a      	cmp	r6, #10
 80033a0:	d104      	bne.n	80033ac <__swbuf_r+0x64>
 80033a2:	4621      	mov	r1, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f7ff ffa7 	bl	80032f8 <_fflush_r>
 80033aa:	b938      	cbnz	r0, 80033bc <__swbuf_r+0x74>
 80033ac:	4638      	mov	r0, r7
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b0:	4621      	mov	r1, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 f806 	bl	80033c4 <__swsetup_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d0d5      	beq.n	8003368 <__swbuf_r+0x20>
 80033bc:	f04f 37ff 	mov.w	r7, #4294967295
 80033c0:	e7f4      	b.n	80033ac <__swbuf_r+0x64>
	...

080033c4 <__swsetup_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <__swsetup_r+0xac>)
 80033c8:	4605      	mov	r5, r0
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	460c      	mov	r4, r1
 80033ce:	b118      	cbz	r0, 80033d8 <__swsetup_r+0x14>
 80033d0:	6a03      	ldr	r3, [r0, #32]
 80033d2:	b90b      	cbnz	r3, 80033d8 <__swsetup_r+0x14>
 80033d4:	f7ff fa36 	bl	8002844 <__sinit>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033de:	0718      	lsls	r0, r3, #28
 80033e0:	d422      	bmi.n	8003428 <__swsetup_r+0x64>
 80033e2:	06d9      	lsls	r1, r3, #27
 80033e4:	d407      	bmi.n	80033f6 <__swsetup_r+0x32>
 80033e6:	2309      	movs	r3, #9
 80033e8:	602b      	str	r3, [r5, #0]
 80033ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033ee:	81a3      	strh	r3, [r4, #12]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e034      	b.n	8003460 <__swsetup_r+0x9c>
 80033f6:	0758      	lsls	r0, r3, #29
 80033f8:	d512      	bpl.n	8003420 <__swsetup_r+0x5c>
 80033fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fc:	b141      	cbz	r1, 8003410 <__swsetup_r+0x4c>
 80033fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003402:	4299      	cmp	r1, r3
 8003404:	d002      	beq.n	800340c <__swsetup_r+0x48>
 8003406:	4628      	mov	r0, r5
 8003408:	f7ff fb24 	bl	8002a54 <_free_r>
 800340c:	2300      	movs	r3, #0
 800340e:	6363      	str	r3, [r4, #52]	; 0x34
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	2300      	movs	r3, #0
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	b94b      	cbnz	r3, 8003440 <__swsetup_r+0x7c>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d003      	beq.n	8003440 <__swsetup_r+0x7c>
 8003438:	4621      	mov	r1, r4
 800343a:	4628      	mov	r0, r5
 800343c:	f000 f850 	bl	80034e0 <__smakebuf_r>
 8003440:	89a0      	ldrh	r0, [r4, #12]
 8003442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003446:	f010 0301 	ands.w	r3, r0, #1
 800344a:	d00a      	beq.n	8003462 <__swsetup_r+0x9e>
 800344c:	2300      	movs	r3, #0
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	6963      	ldr	r3, [r4, #20]
 8003452:	425b      	negs	r3, r3
 8003454:	61a3      	str	r3, [r4, #24]
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	b943      	cbnz	r3, 800346c <__swsetup_r+0xa8>
 800345a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800345e:	d1c4      	bne.n	80033ea <__swsetup_r+0x26>
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	0781      	lsls	r1, r0, #30
 8003464:	bf58      	it	pl
 8003466:	6963      	ldrpl	r3, [r4, #20]
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	e7f4      	b.n	8003456 <__swsetup_r+0x92>
 800346c:	2000      	movs	r0, #0
 800346e:	e7f7      	b.n	8003460 <__swsetup_r+0x9c>
 8003470:	20000064 	.word	0x20000064

08003474 <_sbrk_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	4d06      	ldr	r5, [pc, #24]	; (8003490 <_sbrk_r+0x1c>)
 8003478:	2300      	movs	r3, #0
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd fb76 	bl	8000b70 <_sbrk>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_sbrk_r+0x1a>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_sbrk_r+0x1a>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	20000220 	.word	0x20000220

08003494 <__swhatbuf_r>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	460c      	mov	r4, r1
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	2900      	cmp	r1, #0
 800349e:	b096      	sub	sp, #88	; 0x58
 80034a0:	4615      	mov	r5, r2
 80034a2:	461e      	mov	r6, r3
 80034a4:	da0d      	bge.n	80034c2 <__swhatbuf_r+0x2e>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80034b6:	2340      	movne	r3, #64	; 0x40
 80034b8:	2000      	movs	r0, #0
 80034ba:	6031      	str	r1, [r6, #0]
 80034bc:	602b      	str	r3, [r5, #0]
 80034be:	b016      	add	sp, #88	; 0x58
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	466a      	mov	r2, sp
 80034c4:	f000 f848 	bl	8003558 <_fstat_r>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	dbec      	blt.n	80034a6 <__swhatbuf_r+0x12>
 80034cc:	9901      	ldr	r1, [sp, #4]
 80034ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80034d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80034d6:	4259      	negs	r1, r3
 80034d8:	4159      	adcs	r1, r3
 80034da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034de:	e7eb      	b.n	80034b8 <__swhatbuf_r+0x24>

080034e0 <__smakebuf_r>:
 80034e0:	898b      	ldrh	r3, [r1, #12]
 80034e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034e4:	079d      	lsls	r5, r3, #30
 80034e6:	4606      	mov	r6, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	d507      	bpl.n	80034fc <__smakebuf_r+0x1c>
 80034ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	2301      	movs	r3, #1
 80034f6:	6163      	str	r3, [r4, #20]
 80034f8:	b002      	add	sp, #8
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	ab01      	add	r3, sp, #4
 80034fe:	466a      	mov	r2, sp
 8003500:	f7ff ffc8 	bl	8003494 <__swhatbuf_r>
 8003504:	9900      	ldr	r1, [sp, #0]
 8003506:	4605      	mov	r5, r0
 8003508:	4630      	mov	r0, r6
 800350a:	f7ff fb0f 	bl	8002b2c <_malloc_r>
 800350e:	b948      	cbnz	r0, 8003524 <__smakebuf_r+0x44>
 8003510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003514:	059a      	lsls	r2, r3, #22
 8003516:	d4ef      	bmi.n	80034f8 <__smakebuf_r+0x18>
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	e7e3      	b.n	80034ec <__smakebuf_r+0xc>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	6020      	str	r0, [r4, #0]
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	9b00      	ldr	r3, [sp, #0]
 8003530:	6163      	str	r3, [r4, #20]
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	6120      	str	r0, [r4, #16]
 8003536:	b15b      	cbz	r3, 8003550 <__smakebuf_r+0x70>
 8003538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f81d 	bl	800357c <_isatty_r>
 8003542:	b128      	cbz	r0, 8003550 <__smakebuf_r+0x70>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	431d      	orrs	r5, r3
 8003554:	81a5      	strh	r5, [r4, #12]
 8003556:	e7cf      	b.n	80034f8 <__smakebuf_r+0x18>

08003558 <_fstat_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4d07      	ldr	r5, [pc, #28]	; (8003578 <_fstat_r+0x20>)
 800355c:	2300      	movs	r3, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	f7fd fada 	bl	8000b1e <_fstat>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d102      	bne.n	8003574 <_fstat_r+0x1c>
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	b103      	cbz	r3, 8003574 <_fstat_r+0x1c>
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	20000220 	.word	0x20000220

0800357c <_isatty_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4d06      	ldr	r5, [pc, #24]	; (8003598 <_isatty_r+0x1c>)
 8003580:	2300      	movs	r3, #0
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd fad9 	bl	8000b3e <_isatty>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_isatty_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_isatty_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20000220 	.word	0x20000220

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
