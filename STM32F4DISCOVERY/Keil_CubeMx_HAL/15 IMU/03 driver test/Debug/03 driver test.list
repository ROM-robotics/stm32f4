
03 driver test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080066e8  080066e8  000166e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b10  08006b10  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b18  08006b18  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000220  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007756  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019e8  00000000  00000000  0002799d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000758  00000000  00000000  00029388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000563  00000000  00000000  00029ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000214e1  00000000  00000000  0002a043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000968a  00000000  00000000  0004b524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4602  00000000  00000000  00054bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d40  00000000  00000000  001191b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  0011bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066cc 	.word	0x080066cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080066cc 	.word	0x080066cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MPU_begin>:

/// @brief Check for connection, reset IMU, and set full range scale
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    // Initialize variables
    uint8_t check, addr, val;

    // Confirm device
    MPU_REG_READ(SPIx, pMPU9250, WHO_AM_I, &check, 1);
 8000f4e:	f107 030f 	add.w	r3, r7, #15
 8000f52:	2201      	movs	r2, #1
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	2275      	movs	r2, #117	; 0x75
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f853 	bl	8001006 <MPU_REG_READ>
    if (check == WHO_AM_I_9250_ANS)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b71      	cmp	r3, #113	; 0x71
 8000f64:	d129      	bne.n	8000fba <MPU_begin+0x76>
    {
        // Startup / reset the sensor
        addr = PWR_MGMT_1;
 8000f66:	236b      	movs	r3, #107	; 0x6b
 8000f68:	73bb      	strb	r3, [r7, #14]
        val = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000f6e:	f107 030d 	add.w	r3, r7, #13
 8000f72:	f107 020e 	add.w	r2, r7, #14
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f823 	bl	8000fc4 <MPU_REG_WRITE>

        // Disable I2C (SPI only)
        addr = USER_CTRL;
 8000f7e:	236a      	movs	r3, #106	; 0x6a
 8000f80:	73bb      	strb	r3, [r7, #14]
        val = 0x10;
 8000f82:	2310      	movs	r3, #16
 8000f84:	737b      	strb	r3, [r7, #13]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8000f86:	f107 030d 	add.w	r3, r7, #13
 8000f8a:	f107 020e 	add.w	r2, r7, #14
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f817 	bl	8000fc4 <MPU_REG_WRITE>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.aFullScaleRange);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f86d 	bl	8001080 <MPU_writeAccFullScaleRange>
        //addr = 29;
        //val  = ;
        //MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);


        MPU_writeGyroFullScaleRange(SPIx, pMPU9250, pMPU9250->settings.gFullScaleRange);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000fac:	461a      	mov	r2, r3
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8cd 	bl	8001150 <MPU_writeGyroFullScaleRange>
        // digital filter for gyro , smplrt_div, dlpf
        return 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <MPU_begin+0x78>
    }
    else
    {
        return 0;
 8000fba:	2300      	movs	r3, #0
    }
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <MPU_REG_WRITE>:
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param pAddr Pointer to address to be written to
/// @param pVal Pointer of value to write to given address
void MPU_REG_WRITE(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t *pAddr, uint8_t *pVal)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
    MPU_CS(pMPU9250, CS_SELECT);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	68b8      	ldr	r0, [r7, #8]
 8000fd6:	f000 f83e 	bl	8001056 <MPU_CS>
    HAL_SPI_Transmit(SPIx, pAddr, 1, SPI_TIMOUT_MS);
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	2201      	movs	r2, #1
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f001 fe85 	bl	8002cf2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(SPIx, pVal, 1, SPI_TIMOUT_MS);
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	2201      	movs	r2, #1
 8000fee:	6839      	ldr	r1, [r7, #0]
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f001 fe7e 	bl	8002cf2 <HAL_SPI_Transmit>
    MPU_CS(pMPU9250, CS_DESELECT);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f82c 	bl	8001056 <MPU_CS>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MPU_REG_READ>:
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param addr Address to start reading at
/// @param pRxData Pointer to data buffer
/// @param RxSize Size of data buffer
void MPU_REG_READ(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t addr, uint8_t *pRxData, uint16_t RxSize)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	71fb      	strb	r3, [r7, #7]
    MPU_CS(pMPU9250, CS_SELECT);
 8001016:	2100      	movs	r1, #0
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f000 f81c 	bl	8001056 <MPU_CS>
    uint8_t writeAddr = addr | READWRITE;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001024:	b2db      	uxtb	r3, r3
 8001026:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(SPIx, &writeAddr, 1, SPI_TIMOUT_MS);
 8001028:	f107 0117 	add.w	r1, r7, #23
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	2201      	movs	r2, #1
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f001 fe5d 	bl	8002cf2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(SPIx, pRxData, RxSize, SPI_TIMOUT_MS);
 8001038:	8c3a      	ldrh	r2, [r7, #32]
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f001 ff99 	bl	8002f78 <HAL_SPI_Receive>
    MPU_CS(pMPU9250, CS_DESELECT);
 8001046:	2101      	movs	r1, #1
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f000 f804 	bl	8001056 <MPU_CS>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <MPU_CS>:

/// @brief Set CS state to either start or end transmissions
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param state Set low to select, high to deselect
void MPU_CS(MPU9250_t *pMPU9250, uint8_t state)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(pMPU9250->settings.CS_PORT, pMPU9250->settings.CS_PIN, state);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800106c:	b29b      	uxth	r3, r3
 800106e:	78fa      	ldrb	r2, [r7, #3]
 8001070:	4619      	mov	r1, r3
 8001072:	f001 f937 	bl	80022e4 <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MPU_writeAccFullScaleRange>:
/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t aScale)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4613      	mov	r3, r2
 800108c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = ACCEL_CONFIG;
 800108e:	231c      	movs	r3, #28
 8001090:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (aScale)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d847      	bhi.n	8001128 <MPU_writeAccFullScaleRange+0xa8>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <MPU_writeAccFullScaleRange+0x20>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010cf 	.word	0x080010cf
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	0800110b 	.word	0x0800110b
    {
    case AFSR_2G:
        pMPU9250->sensorData.aScaleFactor = 16384.0;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80010b6:	60da      	str	r2, [r3, #12]
        val = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010bc:	f107 0316 	add.w	r3, r7, #22
 80010c0:	f107 0217 	add.w	r2, r7, #23
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ff7c 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 80010cc:	e03b      	b.n	8001146 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_4G:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80010d4:	60da      	str	r2, [r3, #12]
        val = 0x08;
 80010d6:	2308      	movs	r3, #8
 80010d8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010da:	f107 0316 	add.w	r3, r7, #22
 80010de:	f107 0217 	add.w	r2, r7, #23
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ff6d 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 80010ea:	e02c      	b.n	8001146 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_8G:
        pMPU9250->sensorData.aScaleFactor = 4096.0;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80010f2:	60da      	str	r2, [r3, #12]
        val = 0x10;
 80010f4:	2310      	movs	r3, #16
 80010f6:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80010f8:	f107 0316 	add.w	r3, r7, #22
 80010fc:	f107 0217 	add.w	r2, r7, #23
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff5e 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 8001108:	e01d      	b.n	8001146 <MPU_writeAccFullScaleRange+0xc6>
    case AFSR_16G:
        pMPU9250->sensorData.aScaleFactor = 2048.0;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001110:	60da      	str	r2, [r3, #12]
        val = 0x18;
 8001112:	2318      	movs	r3, #24
 8001114:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001116:	f107 0316 	add.w	r3, r7, #22
 800111a:	f107 0217 	add.w	r2, r7, #23
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff4f 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 8001126:	e00e      	b.n	8001146 <MPU_writeAccFullScaleRange+0xc6>
    default:
        pMPU9250->sensorData.aScaleFactor = 8192.0;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800112e:	60da      	str	r2, [r3, #12]
        val = 0x08;
 8001130:	2308      	movs	r3, #8
 8001132:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 8001134:	f107 0316 	add.w	r3, r7, #22
 8001138:	f107 0217 	add.w	r2, r7, #23
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ff40 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 8001144:	bf00      	nop
    }
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop

08001150 <MPU_writeGyroFullScaleRange>:
/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint8_t gScale)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t addr = GYRO_CONFIG;
 800115e:	231b      	movs	r3, #27
 8001160:	75fb      	strb	r3, [r7, #23]
    uint8_t val;

    // Set the value
    switch (gScale)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d843      	bhi.n	80011f0 <MPU_writeGyroFullScaleRange+0xa0>
 8001168:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <MPU_writeGyroFullScaleRange+0x20>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001181 	.word	0x08001181
 8001174:	0800119d 	.word	0x0800119d
 8001178:	080011b9 	.word	0x080011b9
 800117c:	080011d5 	.word	0x080011d5
    {
    case GFSR_250DPS:
        pMPU9250->sensorData.gScaleFactor = 131.0;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4a24      	ldr	r2, [pc, #144]	; (8001214 <MPU_writeGyroFullScaleRange+0xc4>)
 8001184:	611a      	str	r2, [r3, #16]
        val = 0x00;
 8001186:	2300      	movs	r3, #0
 8001188:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 800118a:	f107 0316 	add.w	r3, r7, #22
 800118e:	f107 0217 	add.w	r2, r7, #23
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff ff15 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 800119a:	e037      	b.n	800120c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_500DPS:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <MPU_writeGyroFullScaleRange+0xc8>)
 80011a0:	611a      	str	r2, [r3, #16]
        val = 0x08;
 80011a2:	2308      	movs	r3, #8
 80011a4:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011a6:	f107 0316 	add.w	r3, r7, #22
 80011aa:	f107 0217 	add.w	r2, r7, #23
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff ff07 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 80011b6:	e029      	b.n	800120c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_1000DPS:
        pMPU9250->sensorData.gScaleFactor = 32.8;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <MPU_writeGyroFullScaleRange+0xcc>)
 80011bc:	611a      	str	r2, [r3, #16]
        val = 0x10;
 80011be:	2310      	movs	r3, #16
 80011c0:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011c2:	f107 0316 	add.w	r3, r7, #22
 80011c6:	f107 0217 	add.w	r2, r7, #23
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fef9 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 80011d2:	e01b      	b.n	800120c <MPU_writeGyroFullScaleRange+0xbc>
    case GFSR_2000DPS:
        pMPU9250->sensorData.gScaleFactor = 16.4;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MPU_writeGyroFullScaleRange+0xd0>)
 80011d8:	611a      	str	r2, [r3, #16]
        val = 0x18;
 80011da:	2318      	movs	r3, #24
 80011dc:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011de:	f107 0316 	add.w	r3, r7, #22
 80011e2:	f107 0217 	add.w	r2, r7, #23
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff feeb 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 80011ee:	e00d      	b.n	800120c <MPU_writeGyroFullScaleRange+0xbc>
    default:
        pMPU9250->sensorData.gScaleFactor = 65.5;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <MPU_writeGyroFullScaleRange+0xc8>)
 80011f4:	611a      	str	r2, [r3, #16]
        val = 0x08;
 80011f6:	2308      	movs	r3, #8
 80011f8:	75bb      	strb	r3, [r7, #22]
        MPU_REG_WRITE(SPIx, pMPU9250, &addr, &val);
 80011fa:	f107 0316 	add.w	r3, r7, #22
 80011fe:	f107 0217 	add.w	r2, r7, #23
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff fedd 	bl	8000fc4 <MPU_REG_WRITE>
        break;
 800120a:	bf00      	nop
    }
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	43030000 	.word	0x43030000
 8001218:	42830000 	.word	0x42830000
 800121c:	42033333 	.word	0x42033333
 8001220:	41833333 	.word	0x41833333

08001224 <MPU_readRawData>:

/// @brief Read raw data from IMU
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readRawData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af02      	add	r7, sp, #8
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    MPU_REG_READ(SPIx, pMPU9250, ACCEL_XOUT_H, &buf[0], 14);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	220e      	movs	r2, #14
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	223b      	movs	r2, #59	; 0x3b
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fee3 	bl	8001006 <MPU_REG_READ>

    // Bit shift the data
    pMPU9250->rawData.ax = buf[0] << 8 | buf[1];
 8001240:	7a3b      	ldrb	r3, [r7, #8]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7a7b      	ldrb	r3, [r7, #9]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	801a      	strh	r2, [r3, #0]
    pMPU9250->rawData.ay = buf[2] << 8 | buf[3];
 8001252:	7abb      	ldrb	r3, [r7, #10]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	805a      	strh	r2, [r3, #2]
    pMPU9250->rawData.az = buf[4] << 8 | buf[5];
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    pMPU9250->rawData.gx = buf[8] << 8 | buf[9];
 8001276:	7c3b      	ldrb	r3, [r7, #16]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7c7b      	ldrb	r3, [r7, #17]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	80da      	strh	r2, [r3, #6]
    pMPU9250->rawData.gy = buf[10] << 8 | buf[11];
 8001288:	7cbb      	ldrb	r3, [r7, #18]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7cfb      	ldrb	r3, [r7, #19]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	811a      	strh	r2, [r3, #8]
    pMPU9250->rawData.gz = buf[12] << 8 | buf[13];
 800129a:	7d3b      	ldrb	r3, [r7, #20]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7d7b      	ldrb	r3, [r7, #21]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	815a      	strh	r2, [r3, #10]
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <MPU_calibrateGyro>:
/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250, uint16_t numCalPoints)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
    int32_t z = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]

    // Zero guard
    if (numCalPoints == 0)
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <MPU_calibrateGyro+0x24>
    {
        numCalPoints = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 80012d8:	2300      	movs	r3, #0
 80012da:	827b      	strh	r3, [r7, #18]
 80012dc:	e01e      	b.n	800131c <MPU_calibrateGyro+0x68>
    {
        MPU_readRawData(SPIx, pMPU9250);
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff9f 	bl	8001224 <MPU_readRawData>
        x += pMPU9250->rawData.gx;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012ec:	461a      	mov	r2, r3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	61fb      	str	r3, [r7, #28]
        y += pMPU9250->rawData.gy;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012fa:	461a      	mov	r2, r3
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4413      	add	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        z += pMPU9250->rawData.gz;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001308:	461a      	mov	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fd41 	bl	8001d98 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001316:	8a7b      	ldrh	r3, [r7, #18]
 8001318:	3301      	adds	r3, #1
 800131a:	827b      	strh	r3, [r7, #18]
 800131c:	8a7a      	ldrh	r2, [r7, #18]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3dc      	bcc.n	80012de <MPU_calibrateGyro+0x2a>
    }

    // Average the saved data points to find the gyroscope offset
    pMPU9250->gyroCal.x = (float)x / (float)numCalPoints;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    pMPU9250->gyroCal.y = (float)y / (float)numCalPoints;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    pMPU9250->gyroCal.z = (float)z / (float)numCalPoints;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_readProcessedData(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
    // Get raw values from the IMU
    MPU_readRawData(SPIx, pMPU9250);
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff46 	bl	8001224 <MPU_readRawData>

    // Convert accelerometer values to g's
    pMPU9250->sensorData.ax = pMPU9250->rawData.ax / pMPU9250->sensorData.aScaleFactor;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	edc3 7a05 	vstr	s15, [r3, #20]
    pMPU9250->sensorData.ay = pMPU9250->rawData.ay / pMPU9250->sensorData.aScaleFactor;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	edc3 7a06 	vstr	s15, [r3, #24]
    pMPU9250->sensorData.az = pMPU9250->rawData.az / pMPU9250->sensorData.aScaleFactor;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	edc3 7a07 	vstr	s15, [r3, #28]

    // Compensate for gyro offset
    pMPU9250->sensorData.gx = pMPU9250->rawData.gx - pMPU9250->gyroCal.x;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy = pMPU9250->rawData.gy - pMPU9250->gyroCal.y;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz = pMPU9250->rawData.gz - pMPU9250->gyroCal.z;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    // Convert gyro values to deg/s
    pMPU9250->sensorData.gx /= pMPU9250->sensorData.gScaleFactor;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	ed93 7a04 	vldr	s14, [r3, #16]
 8001458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
    pMPU9250->sensorData.gy /= pMPU9250->sensorData.gScaleFactor;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	ed93 7a04 	vldr	s14, [r3, #16]
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    pMPU9250->sensorData.gz /= pMPU9250->sensorData.gScaleFactor;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	ed93 7a04 	vldr	s14, [r3, #16]
 8001484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU9250 Pointer to master MPU9250 struct
void MPU_calcAttitude(SPI_HandleTypeDef *SPIx, MPU9250_t *pMPU9250)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    // Read processed data
    MPU_readProcessedData(SPIx, pMPU9250);
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff6e 	bl	8001386 <MPU_readProcessedData>

    // Complementary filter
    float accelPitch = atan2(pMPU9250->sensorData.ay, pMPU9250->sensorData.az) * RAD2DEG;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f84a 	bl	8000548 <__aeabi_f2d>
 80014b4:	4604      	mov	r4, r0
 80014b6:	460d      	mov	r5, r1
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f843 	bl	8000548 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	ec43 2b11 	vmov	d1, r2, r3
 80014ca:	ec45 4b10 	vmov	d0, r4, r5
 80014ce:	f004 fe87 	bl	80061e0 <atan2>
 80014d2:	ec51 0b10 	vmov	r0, r1, d0
 80014d6:	a344      	add	r3, pc, #272	; (adr r3, 80015e8 <MPU_calcAttitude+0x150>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb5e 	bl	8000ba8 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(pMPU9250->sensorData.ax, pMPU9250->sensorData.az) * RAD2DEG;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	4604      	mov	r4, r0
 80014fc:	460d      	mov	r5, r1
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f820 	bl	8000548 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	ec43 2b11 	vmov	d1, r2, r3
 8001510:	ec45 4b10 	vmov	d0, r4, r5
 8001514:	f004 fe64 	bl	80061e0 <atan2>
 8001518:	ec51 0b10 	vmov	r0, r1, d0
 800151c:	a332      	add	r3, pc, #200	; (adr r3, 80015e8 <MPU_calcAttitude+0x150>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f869 	bl	80005f8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb3b 	bl	8000ba8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	60bb      	str	r3, [r7, #8]

    pMPU9250->attitude.r = pMPU9250->attitude.tau * (pMPU9250->attitude.r - pMPU9250->sensorData.gy * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelRoll;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800154e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001552:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001564:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001568:	edd7 7a02 	vldr	s15, [r7, #8]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    pMPU9250->attitude.p = pMPU9250->attitude.tau * (pMPU9250->attitude.p - pMPU9250->sensorData.gx * pMPU9250->attitude.dt) + (1 - pMPU9250->attitude.tau) * accelPitch;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	ed93 6a08 	vldr	s12, [r3, #32]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001592:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001596:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800159a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    pMPU9250->attitude.y += (pMPU9250->sensorData.gz * pMPU9250->attitude.dt);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdb0      	pop	{r4, r5, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	1a63cbb0 	.word	0x1a63cbb0
 80015ec:	404ca5dc 	.word	0x404ca5dc

080015f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_GPIO_Init+0xb4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <MX_GPIO_Init+0xb4>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <MX_GPIO_Init+0xb4>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_GPIO_Init+0xb4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2101      	movs	r1, #1
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <MX_GPIO_Init+0xb8>)
 800167c:	f000 fe32 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_GPIO_Init+0xb8>)
 8001698:	f000 fc88 	bl	8001fac <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020800 	.word	0x40020800

080016ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016d4:	e000      	b.n	80016d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f9      	beq.n	80016d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	mpu9250.settings.gFullScaleRange = GFSR_500DPS;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <main+0x6c>)
 8001702:	2201      	movs	r2, #1
 8001704:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	mpu9250.settings.aFullScaleRange = AFSR_4G;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <main+0x6c>)
 800170a:	2201      	movs	r2, #1
 800170c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	mpu9250.settings.CS_PIN = GPIO_PIN_0;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <main+0x6c>)
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	mpu9250.settings.CS_PORT= GPIOC;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <main+0x6c>)
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <main+0x70>)
 800171c:	651a      	str	r2, [r3, #80]	; 0x50
	mpu9250.attitude.tau = 0.98;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <main+0x6c>)
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <main+0x74>)
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
	mpu9250.attitude.dt = 0.010;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <main+0x6c>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <main+0x78>)
 8001728:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f000 fac3 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f827 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f7ff ff5d 	bl	80015f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001736:	f000 f8e7 	bl	8001908 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  if (MPU_begin(&hspi2, &mpu9250) != 1)
 800173a:	490b      	ldr	r1, [pc, #44]	; (8001768 <main+0x6c>)
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <main+0x7c>)
 800173e:	f7ff fc01 	bl	8000f44 <MPU_begin>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d003      	beq.n	8001750 <main+0x54>
    {
	  printf("mpu initialization Error!\n");
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <main+0x80>)
 800174a:	f002 fdad 	bl	80042a8 <puts>
      while (1){}
 800174e:	e7fe      	b.n	800174e <main+0x52>
    }
  MPU_calibrateGyro(&hspi2, &mpu9250, 1000);
 8001750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <main+0x6c>)
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <main+0x7c>)
 8001758:	f7ff fdac 	bl	80012b4 <MPU_calibrateGyro>
  while (1)
  {
    /* USER CODE END WHILE */
	  //printf("Hello testing\n");
	  //HAL_Delay(1000);
	  mpu_callback();
 800175c:	f000 f896 	bl	800188c <mpu_callback>
	  HAL_Delay(10);
 8001760:	200a      	movs	r0, #10
 8001762:	f000 fb19 	bl	8001d98 <HAL_Delay>
	  mpu_callback();
 8001766:	e7f9      	b.n	800175c <main+0x60>
 8001768:	200001f0 	.word	0x200001f0
 800176c:	40020800 	.word	0x40020800
 8001770:	3f7ae148 	.word	0x3f7ae148
 8001774:	3c23d70a 	.word	0x3c23d70a
 8001778:	20000248 	.word	0x20000248
 800177c:	080066e8 	.word	0x080066e8

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	; 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fe6a 	bl	8004468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <SystemClock_Config+0xcc>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <SystemClock_Config+0xcc>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <SystemClock_Config+0xcc>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <SystemClock_Config+0xd0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <SystemClock_Config+0xd0>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <SystemClock_Config+0xd0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017dc:	2301      	movs	r3, #1
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e6:	2302      	movs	r3, #2
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017f4:	23a8      	movs	r3, #168	; 0xa8
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fd87 	bl	8002318 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001810:	f000 f874 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001820:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2105      	movs	r1, #5
 8001832:	4618      	mov	r0, r3
 8001834:	f000 ffe8 	bl	8002808 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800183e:	f000 f85d 	bl	80018fc <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	; 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e009      	b.n	800187a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff1c 	bl	80016ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbf1      	blt.n	8001866 <_write+0x12>
	return len;
 8001882:	687b      	ldr	r3, [r7, #4]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <mpu_callback>:

void mpu_callback(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	MPU_calcAttitude(&hspi2, &mpu9250);
 8001892:	4916      	ldr	r1, [pc, #88]	; (80018ec <mpu_callback+0x60>)
 8001894:	4816      	ldr	r0, [pc, #88]	; (80018f0 <mpu_callback+0x64>)
 8001896:	f7ff fdff 	bl	8001498 <MPU_calcAttitude>
    int16_t roll = mpu9250.attitude.r;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <mpu_callback+0x60>)
 800189c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 3a90 	vmov	r3, s15
 80018a8:	80fb      	strh	r3, [r7, #6]
    //uint8_t rollDecimal = abs(roll % 10);
    int16_t pitch = mpu9250.attitude.p;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <mpu_callback+0x60>)
 80018ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b4:	ee17 3a90 	vmov	r3, s15
 80018b8:	80bb      	strh	r3, [r7, #4]
    //uint8_t pitchDecimal = abs(pitch % 10);
    int16_t yaw = mpu9250.attitude.y;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <mpu_callback+0x60>)
 80018bc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80018c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c4:	ee17 3a90 	vmov	r3, s15
 80018c8:	807b      	strh	r3, [r7, #2]
    //uint8_t yawDecimal = abs(yaw % 10);

    printf("roll  : %d\n",roll);
 80018ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <mpu_callback+0x68>)
 80018d2:	f002 fc83 	bl	80041dc <iprintf>
    printf("pitch : %d\n",pitch);
 80018d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018da:	4619      	mov	r1, r3
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <mpu_callback+0x6c>)
 80018de:	f002 fc7d 	bl	80041dc <iprintf>
   	//printf("Accelero y: %.5f\n",ay);
   	//printf("Accelero z: %.5f\n",az);
   	//printf("Gyro x: %.5f\n",gx);
   	//printf("Gyro y: %.5f\n",gy);
   	//printf("Gyro z: %.5f\n",gz);
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001f0 	.word	0x200001f0
 80018f0:	20000248 	.word	0x20000248
 80018f4:	08006704 	.word	0x08006704
 80018f8:	08006710 	.word	0x08006710

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_SPI2_Init+0x64>)
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <MX_SPI2_Init+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_SPI2_Init+0x64>)
 8001914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_SPI2_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_SPI2_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_SPI2_Init+0x64>)
 8001928:	2202      	movs	r2, #2
 800192a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_SPI2_Init+0x64>)
 800192e:	2201      	movs	r2, #1
 8001930:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_SPI2_Init+0x64>)
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SPI2_Init+0x64>)
 800193c:	2228      	movs	r2, #40	; 0x28
 800193e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_SPI2_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SPI2_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_SPI2_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SPI2_Init+0x64>)
 8001954:	220a      	movs	r2, #10
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_SPI2_Init+0x64>)
 800195a:	f001 f941 	bl	8002be0 <HAL_SPI_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001964:	f7ff ffca 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000248 	.word	0x20000248
 8001970:	40003800 	.word	0x40003800

08001974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_SPI_MspInit+0xc0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d14a      	bne.n	8001a2c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_SPI_MspInit+0xc4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ea:	230c      	movs	r3, #12
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019fa:	2305      	movs	r3, #5
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <HAL_SPI_MspInit+0xc8>)
 8001a06:	f000 fad1 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_SPI_MspInit+0xcc>)
 8001a28:	f000 fac0 	bl	8001fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a82:	2007      	movs	r0, #7
 8001a84:	f000 fa5e 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f93a 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_kill>:

int _kill(int pid, int sig)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b02:	f002 fd03 	bl	800450c <__errno>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2216      	movs	r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_exit>:

void _exit (int status)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffe7 	bl	8001af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2a:	e7fe      	b.n	8001b2a <_exit+0x12>

08001b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
  }

  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_isatty>:

int _isatty(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f002 fc84 	bl	800450c <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20020000 	.word	0x20020000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	200002a0 	.word	0x200002a0
 8001c38:	200003f8 	.word	0x200003f8

08001c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SystemInit+0x20>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <SystemInit+0x20>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c64:	f7ff ffea 	bl	8001c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	; (8001cac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f002 fc43 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff fd33 	bl	80016fc <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ca4:	08006b20 	.word	0x08006b20
  ldr r2, =_sbss
 8001ca8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cac:	200003f4 	.word	0x200003f4

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_Init+0x40>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_Init+0x40>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_Init+0x40>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f931 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff feac 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f93b 	bl	8001f92 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 f911 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	200002a4 	.word	0x200002a4

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200002a4 	.word	0x200002a4

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008

08001de0 <__NVIC_SetPriorityGrouping>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <SysTick_Config>:
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff8e 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff47 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff5c 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff8e 	bl	8001e98 <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5d 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffb0 	bl	8001f00 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e16b      	b.n	80022a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 815a 	bne.w	800229a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d005      	beq.n	8001ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b03      	cmp	r3, #3
 800206a:	d017      	beq.n	800209c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80b4 	beq.w	800229a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a5f      	ldr	r2, [pc, #380]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a5b      	ldr	r2, [pc, #364]	; (80022bc <HAL_GPIO_Init+0x310>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_GPIO_Init+0x314>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <HAL_GPIO_Init+0x318>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <HAL_GPIO_Init+0x31c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	; (80022cc <HAL_GPIO_Init+0x320>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x21a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x216>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_GPIO_Init+0x328>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x212>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_GPIO_Init+0x32c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x20e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <HAL_GPIO_Init+0x330>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x20a>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021b6:	2308      	movs	r3, #8
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x228>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x310>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_GPIO_Init+0x334>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_GPIO_Init+0x334>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_GPIO_Init+0x334>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae90 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e267      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d075      	beq.n	8002422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b04      	cmp	r3, #4
 8002340:	d00c      	beq.n	800235c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235a:	d10b      	bne.n	8002374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4b7e      	ldr	r3, [pc, #504]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d05b      	beq.n	8002420 <HAL_RCC_OscConfig+0x108>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d157      	bne.n	8002420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e242      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x74>
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a75      	ldr	r2, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xb0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x98>
 8002396:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6f      	ldr	r2, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6c      	ldr	r2, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xb0>
 80023b0:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a68      	ldr	r2, [pc, #416]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a65      	ldr	r2, [pc, #404]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fcd6 	bl	8001d80 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff fcd2 	bl	8001d80 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e207      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xc0>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fcc2 	bl	8001d80 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fcbe 	bl	8001d80 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1f3      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0xe8>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x152>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1c7      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4937      	ldr	r1, [pc, #220]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e03a      	b.n	80024f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_OscConfig+0x244>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7ff fc77 	bl	8001d80 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002496:	f7ff fc73 	bl	8001d80 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e1a8      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4925      	ldr	r1, [pc, #148]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_OscConfig+0x244>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fc56 	bl	8001d80 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d8:	f7ff fc52 	bl	8001d80 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e187      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d036      	beq.n	8002570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_RCC_OscConfig+0x248>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7ff fc36 	bl	8001d80 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fc32 	bl	8001d80 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e167      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x240>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x200>
 8002536:	e01b      	b.n	8002570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_OscConfig+0x248>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fc1f 	bl	8001d80 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	e00e      	b.n	8002564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002546:	f7ff fc1b 	bl	8001d80 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d907      	bls.n	8002564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e150      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
 8002558:	40023800 	.word	0x40023800
 800255c:	42470000 	.word	0x42470000
 8002560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ea      	bne.n	8002546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8097 	beq.w	80026ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b81      	ldr	r3, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a7c      	ldr	r2, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b77      	ldr	r3, [pc, #476]	; (800278c <HAL_RCC_OscConfig+0x474>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d118      	bne.n	80025ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b74      	ldr	r3, [pc, #464]	; (800278c <HAL_RCC_OscConfig+0x474>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a73      	ldr	r2, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x474>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fbdb 	bl	8001d80 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7ff fbd7 	bl	8001d80 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e10c      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_OscConfig+0x474>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x2ea>
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a63      	ldr	r2, [pc, #396]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x324>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b05      	cmp	r3, #5
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x30c>
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0x324>
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002636:	f023 0304 	bic.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7ff fb9c 	bl	8001d80 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7ff fb98 	bl	8001d80 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0cb      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ee      	beq.n	800264c <HAL_RCC_OscConfig+0x334>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7ff fb86 	bl	8001d80 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002676:	e00a      	b.n	800268e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7ff fb82 	bl	8001d80 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0b5      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ee      	bne.n	8002678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	4a38      	ldr	r2, [pc, #224]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a1 	beq.w	80027f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b6:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d05c      	beq.n	800277c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d141      	bne.n	800274e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_OscConfig+0x478>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fb56 	bl	8001d80 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7ff fb52 	bl	8001d80 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e087      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	3b01      	subs	r3, #1
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	491b      	ldr	r1, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x478>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff fb2b 	bl	8001d80 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff fb27 	bl	8001d80 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e05c      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x416>
 800274c:	e054      	b.n	80027f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_OscConfig+0x478>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff fb14 	bl	8001d80 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff fb10 	bl	8001d80 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e045      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x470>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x444>
 800277a:	e03d      	b.n	80027f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e038      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
 8002790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x4ec>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d028      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d121      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d11a      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d111      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0cc      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d90c      	bls.n	8002844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d044      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d119      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e067      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4934      	ldr	r1, [pc, #208]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff fa42 	bl	8001d80 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7ff fa3e 	bl	8001d80 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e04f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d20c      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f9a2 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00
 80029c4:	40023800 	.word	0x40023800
 80029c8:	0800671c 	.word	0x0800671c
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d8:	b094      	sub	sp, #80	; 0x50
 80029da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	647b      	str	r3, [r7, #68]	; 0x44
 80029e0:	2300      	movs	r3, #0
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	2300      	movs	r3, #0
 80029e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ec:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d00d      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x40>
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	f200 80e1 	bhi.w	8002bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x34>
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a06:	e0db      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a0c:	e0db      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a12:	e0d8      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a14:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	2200      	movs	r2, #0
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
 8002a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a46:	4622      	mov	r2, r4
 8002a48:	462b      	mov	r3, r5
 8002a4a:	f04f 0000 	mov.w	r0, #0
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	0159      	lsls	r1, r3, #5
 8002a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a58:	0150      	lsls	r0, r2, #5
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4621      	mov	r1, r4
 8002a60:	1a51      	subs	r1, r2, r1
 8002a62:	6139      	str	r1, [r7, #16]
 8002a64:	4629      	mov	r1, r5
 8002a66:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a78:	4659      	mov	r1, fp
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a82:	4651      	mov	r1, sl
 8002a84:	018a      	lsls	r2, r1, #6
 8002a86:	4651      	mov	r1, sl
 8002a88:	ebb2 0801 	subs.w	r8, r2, r1
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa6:	4690      	mov	r8, r2
 8002aa8:	4699      	mov	r9, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	eb18 0303 	adds.w	r3, r8, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	462b      	mov	r3, r5
 8002ab4:	eb49 0303 	adc.w	r3, r9, r3
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	024b      	lsls	r3, r1, #9
 8002aca:	4621      	mov	r1, r4
 8002acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	024a      	lsls	r2, r1, #9
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ada:	2200      	movs	r2, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae4:	f7fe f8b0 	bl	8000c48 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af0:	e058      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	2200      	movs	r2, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	4611      	mov	r1, r2
 8002afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0159      	lsls	r1, r3, #5
 8002b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1e:	0150      	lsls	r0, r2, #5
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4641      	mov	r1, r8
 8002b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b44:	ebb2 040a 	subs.w	r4, r2, sl
 8002b48:	eb63 050b 	sbc.w	r5, r3, fp
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	00eb      	lsls	r3, r5, #3
 8002b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5a:	00e2      	lsls	r2, r4, #3
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	461d      	mov	r5, r3
 8002b60:	4643      	mov	r3, r8
 8002b62:	18e3      	adds	r3, r4, r3
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	464b      	mov	r3, r9
 8002b68:	eb45 0303 	adc.w	r3, r5, r3
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	028b      	lsls	r3, r1, #10
 8002b7e:	4621      	mov	r1, r4
 8002b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b84:	4621      	mov	r1, r4
 8002b86:	028a      	lsls	r2, r1, #10
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b98:	f7fe f856 	bl	8000c48 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3750      	adds	r7, #80	; 0x50
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	007a1200 	.word	0x007a1200

08002be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07b      	b.n	8002cea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d108      	bne.n	8002c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d009      	beq.n	8002c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fe9e 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 0104 	and.w	r1, r3, #4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0210 	and.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_SPI_Transmit+0x22>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e12d      	b.n	8002f70 <HAL_SPI_Transmit+0x27e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1c:	f7ff f830 	bl	8001d80 <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d36:	e116      	b.n	8002f66 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0x52>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d48:	e10d      	b.n	8002f66 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d90:	d10f      	bne.n	8002db2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d007      	beq.n	8002dd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd8:	d14f      	bne.n	8002e7a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Transmit+0xf6>
 8002de2:	8afb      	ldrh	r3, [r7, #22]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d142      	bne.n	8002e6e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e0c:	e02f      	b.n	8002e6e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d112      	bne.n	8002e42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e40:	e015      	b.n	8002e6e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e42:	f7fe ff9d 	bl	8001d80 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d803      	bhi.n	8002e5a <HAL_SPI_Transmit+0x168>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d102      	bne.n	8002e60 <HAL_SPI_Transmit+0x16e>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e6c:	e07b      	b.n	8002f66 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ca      	bne.n	8002e0e <HAL_SPI_Transmit+0x11c>
 8002e78:	e050      	b.n	8002f1c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SPI_Transmit+0x196>
 8002e82:	8afb      	ldrh	r3, [r7, #22]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d144      	bne.n	8002f12 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eae:	e030      	b.n	8002f12 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d113      	bne.n	8002ee6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ee4:	e015      	b.n	8002f12 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee6:	f7fe ff4b 	bl	8001d80 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d803      	bhi.n	8002efe <HAL_SPI_Transmit+0x20c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_Transmit+0x212>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f10:	e029      	b.n	8002f66 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1c9      	bne.n	8002eb0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fbdf 	bl	80036e4 <SPI_EndRxTxTransaction>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e003      	b.n	8002f66 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f9c:	e0fb      	b.n	8003196 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d112      	bne.n	8002fce <HAL_SPI_Receive+0x56>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f8ef 	bl	80031a8 <HAL_SPI_TransmitReceive>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	e0e8      	b.n	80031a0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_SPI_Receive+0x64>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0e1      	b.n	80031a0 <HAL_SPI_Receive+0x228>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe4:	f7fe fecc 	bl	8001d80 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_SPI_Receive+0x7e>
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ffa:	e0cc      	b.n	8003196 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2204      	movs	r2, #4
 8003000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003042:	d10f      	bne.n	8003064 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003052:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003062:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d007      	beq.n	8003082 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d16a      	bne.n	8003160 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800308a:	e032      	b.n	80030f2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d115      	bne.n	80030c6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f103 020c 	add.w	r2, r3, #12
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030c4:	e015      	b.n	80030f2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c6:	f7fe fe5b 	bl	8001d80 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d803      	bhi.n	80030de <HAL_SPI_Receive+0x166>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d102      	bne.n	80030e4 <HAL_SPI_Receive+0x16c>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030f0:	e051      	b.n	8003196 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1c7      	bne.n	800308c <HAL_SPI_Receive+0x114>
 80030fc:	e035      	b.n	800316a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	b292      	uxth	r2, r2
 8003118:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	1c9a      	adds	r2, r3, #2
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003132:	e015      	b.n	8003160 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003134:	f7fe fe24 	bl	8001d80 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d803      	bhi.n	800314c <HAL_SPI_Receive+0x1d4>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Receive+0x1da>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800315e:	e01a      	b.n	8003196 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1c9      	bne.n	80030fe <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	6839      	ldr	r1, [r7, #0]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fa52 	bl	8003618 <SPI_EndRxTransaction>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
 800318c:	e003      	b.n	8003196 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031b6:	2301      	movs	r3, #1
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x26>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e198      	b.n	8003500 <HAL_SPI_TransmitReceive+0x358>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d6:	f7fe fdd3 	bl	8001d80 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00f      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x70>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fe:	d107      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x68>
 8003208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800320c:	2b04      	cmp	r3, #4
 800320e:	d003      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003210:	2302      	movs	r3, #2
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003216:	e16d      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_SPI_TransmitReceive+0x82>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_TransmitReceive+0x82>
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003230:	e160      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b04      	cmp	r3, #4
 800323c:	d003      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2205      	movs	r2, #5
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	887a      	ldrh	r2, [r7, #2]
 800326e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d007      	beq.n	800329a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a2:	d17c      	bne.n	800339e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x10a>
 80032ac:	8b7b      	ldrh	r3, [r7, #26]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d16a      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d6:	e057      	b.n	8003388 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d11b      	bne.n	800331e <HAL_SPI_TransmitReceive+0x176>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_SPI_TransmitReceive+0x176>
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d113      	bne.n	800331e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d119      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x1b8>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d014      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	b292      	uxth	r2, r2
 8003342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800335c:	2301      	movs	r3, #1
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003360:	f7fe fd0e 	bl	8001d80 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336c:	429a      	cmp	r2, r3
 800336e:	d80b      	bhi.n	8003388 <HAL_SPI_TransmitReceive+0x1e0>
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d007      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003386:	e0b5      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1a2      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x130>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d19d      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x130>
 800339c:	e080      	b.n	80034a0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x204>
 80033a6:	8b7b      	ldrh	r3, [r7, #26]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d16f      	bne.n	800348c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d2:	e05b      	b.n	800348c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d11c      	bne.n	800341c <HAL_SPI_TransmitReceive+0x274>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_SPI_TransmitReceive+0x274>
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d114      	bne.n	800341c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d119      	bne.n	800345e <HAL_SPI_TransmitReceive+0x2b6>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d014      	beq.n	800345e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800345e:	f7fe fc8f 	bl	8001d80 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800346a:	429a      	cmp	r2, r3
 800346c:	d803      	bhi.n	8003476 <HAL_SPI_TransmitReceive+0x2ce>
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d102      	bne.n	800347c <HAL_SPI_TransmitReceive+0x2d4>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800348a:	e033      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19e      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x22c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d199      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f91d 	bl	80036e4 <SPI_EndRxTxTransaction>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034bc:	e01a      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ea:	e003      	b.n	80034f4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003500:	4618      	mov	r0, r3
 8003502:	3730      	adds	r7, #48	; 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003518:	f7fe fc32 	bl	8001d80 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4413      	add	r3, r2
 8003526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003528:	f7fe fc2a 	bl	8001d80 <HAL_GetTick>
 800352c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	015b      	lsls	r3, r3, #5
 8003534:	0d1b      	lsrs	r3, r3, #20
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353e:	e054      	b.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d050      	beq.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003548:	f7fe fc1a 	bl	8001d80 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	d902      	bls.n	800355e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13d      	bne.n	80035da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800356c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003576:	d111      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003580:	d004      	beq.n	800358c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d107      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a4:	d10f      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e017      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d19b      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362c:	d111      	bne.n	8003652 <SPI_EndRxTransaction+0x3a>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003636:	d004      	beq.n	8003642 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003640:	d107      	bne.n	8003652 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365a:	d12a      	bne.n	80036b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d012      	beq.n	800368c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ff49 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02d      	beq.n	80036d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e026      	b.n	80036da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	2101      	movs	r1, #1
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff36 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01a      	beq.n	80036d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e013      	b.n	80036da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2101      	movs	r1, #1
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff23 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e000      	b.n	80036da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2201      	movs	r2, #1
 80036f8:	2102      	movs	r1, #2
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff ff04 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e032      	b.n	800377c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <SPI_EndRxTxTransaction+0xa0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <SPI_EndRxTxTransaction+0xa4>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	0d5b      	lsrs	r3, r3, #21
 8003722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003734:	d112      	bne.n	800375c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fee1 	bl	8003508 <SPI_WaitFlagStateUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d016      	beq.n	800377a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00f      	b.n	800377c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3b01      	subs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d0f2      	beq.n	800375c <SPI_EndRxTxTransaction+0x78>
 8003776:	e000      	b.n	800377a <SPI_EndRxTxTransaction+0x96>
        break;
 8003778:	bf00      	nop
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000000 	.word	0x20000000
 8003788:	165e9f81 	.word	0x165e9f81

0800378c <__cvt>:
 800378c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	ec55 4b10 	vmov	r4, r5, d0
 8003794:	2d00      	cmp	r5, #0
 8003796:	460e      	mov	r6, r1
 8003798:	4619      	mov	r1, r3
 800379a:	462b      	mov	r3, r5
 800379c:	bfbb      	ittet	lt
 800379e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037a2:	461d      	movlt	r5, r3
 80037a4:	2300      	movge	r3, #0
 80037a6:	232d      	movlt	r3, #45	; 0x2d
 80037a8:	700b      	strb	r3, [r1, #0]
 80037aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037b0:	4691      	mov	r9, r2
 80037b2:	f023 0820 	bic.w	r8, r3, #32
 80037b6:	bfbc      	itt	lt
 80037b8:	4622      	movlt	r2, r4
 80037ba:	4614      	movlt	r4, r2
 80037bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037c0:	d005      	beq.n	80037ce <__cvt+0x42>
 80037c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80037c6:	d100      	bne.n	80037ca <__cvt+0x3e>
 80037c8:	3601      	adds	r6, #1
 80037ca:	2102      	movs	r1, #2
 80037cc:	e000      	b.n	80037d0 <__cvt+0x44>
 80037ce:	2103      	movs	r1, #3
 80037d0:	ab03      	add	r3, sp, #12
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	ab02      	add	r3, sp, #8
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	ec45 4b10 	vmov	d0, r4, r5
 80037dc:	4653      	mov	r3, sl
 80037de:	4632      	mov	r2, r6
 80037e0:	f000 ff4a 	bl	8004678 <_dtoa_r>
 80037e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037e8:	4607      	mov	r7, r0
 80037ea:	d102      	bne.n	80037f2 <__cvt+0x66>
 80037ec:	f019 0f01 	tst.w	r9, #1
 80037f0:	d022      	beq.n	8003838 <__cvt+0xac>
 80037f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037f6:	eb07 0906 	add.w	r9, r7, r6
 80037fa:	d110      	bne.n	800381e <__cvt+0x92>
 80037fc:	783b      	ldrb	r3, [r7, #0]
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	d10a      	bne.n	8003818 <__cvt+0x8c>
 8003802:	2200      	movs	r2, #0
 8003804:	2300      	movs	r3, #0
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fd f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800380e:	b918      	cbnz	r0, 8003818 <__cvt+0x8c>
 8003810:	f1c6 0601 	rsb	r6, r6, #1
 8003814:	f8ca 6000 	str.w	r6, [sl]
 8003818:	f8da 3000 	ldr.w	r3, [sl]
 800381c:	4499      	add	r9, r3
 800381e:	2200      	movs	r2, #0
 8003820:	2300      	movs	r3, #0
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fd f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800382a:	b108      	cbz	r0, 8003830 <__cvt+0xa4>
 800382c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003830:	2230      	movs	r2, #48	; 0x30
 8003832:	9b03      	ldr	r3, [sp, #12]
 8003834:	454b      	cmp	r3, r9
 8003836:	d307      	bcc.n	8003848 <__cvt+0xbc>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800383c:	1bdb      	subs	r3, r3, r7
 800383e:	4638      	mov	r0, r7
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	b004      	add	sp, #16
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	1c59      	adds	r1, r3, #1
 800384a:	9103      	str	r1, [sp, #12]
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e7f0      	b.n	8003832 <__cvt+0xa6>

08003850 <__exponent>:
 8003850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003852:	4603      	mov	r3, r0
 8003854:	2900      	cmp	r1, #0
 8003856:	bfb8      	it	lt
 8003858:	4249      	neglt	r1, r1
 800385a:	f803 2b02 	strb.w	r2, [r3], #2
 800385e:	bfb4      	ite	lt
 8003860:	222d      	movlt	r2, #45	; 0x2d
 8003862:	222b      	movge	r2, #43	; 0x2b
 8003864:	2909      	cmp	r1, #9
 8003866:	7042      	strb	r2, [r0, #1]
 8003868:	dd2a      	ble.n	80038c0 <__exponent+0x70>
 800386a:	f10d 0207 	add.w	r2, sp, #7
 800386e:	4617      	mov	r7, r2
 8003870:	260a      	movs	r6, #10
 8003872:	4694      	mov	ip, r2
 8003874:	fb91 f5f6 	sdiv	r5, r1, r6
 8003878:	fb06 1415 	mls	r4, r6, r5, r1
 800387c:	3430      	adds	r4, #48	; 0x30
 800387e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003882:	460c      	mov	r4, r1
 8003884:	2c63      	cmp	r4, #99	; 0x63
 8003886:	f102 32ff 	add.w	r2, r2, #4294967295
 800388a:	4629      	mov	r1, r5
 800388c:	dcf1      	bgt.n	8003872 <__exponent+0x22>
 800388e:	3130      	adds	r1, #48	; 0x30
 8003890:	f1ac 0402 	sub.w	r4, ip, #2
 8003894:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003898:	1c41      	adds	r1, r0, #1
 800389a:	4622      	mov	r2, r4
 800389c:	42ba      	cmp	r2, r7
 800389e:	d30a      	bcc.n	80038b6 <__exponent+0x66>
 80038a0:	f10d 0209 	add.w	r2, sp, #9
 80038a4:	eba2 020c 	sub.w	r2, r2, ip
 80038a8:	42bc      	cmp	r4, r7
 80038aa:	bf88      	it	hi
 80038ac:	2200      	movhi	r2, #0
 80038ae:	4413      	add	r3, r2
 80038b0:	1a18      	subs	r0, r3, r0
 80038b2:	b003      	add	sp, #12
 80038b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80038ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80038be:	e7ed      	b.n	800389c <__exponent+0x4c>
 80038c0:	2330      	movs	r3, #48	; 0x30
 80038c2:	3130      	adds	r1, #48	; 0x30
 80038c4:	7083      	strb	r3, [r0, #2]
 80038c6:	70c1      	strb	r1, [r0, #3]
 80038c8:	1d03      	adds	r3, r0, #4
 80038ca:	e7f1      	b.n	80038b0 <__exponent+0x60>

080038cc <_printf_float>:
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	ed2d 8b02 	vpush	{d8}
 80038d4:	b08d      	sub	sp, #52	; 0x34
 80038d6:	460c      	mov	r4, r1
 80038d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80038dc:	4616      	mov	r6, r2
 80038de:	461f      	mov	r7, r3
 80038e0:	4605      	mov	r5, r0
 80038e2:	f000 fdc9 	bl	8004478 <_localeconv_r>
 80038e6:	f8d0 a000 	ldr.w	sl, [r0]
 80038ea:	4650      	mov	r0, sl
 80038ec:	f7fc fcc0 	bl	8000270 <strlen>
 80038f0:	2300      	movs	r3, #0
 80038f2:	930a      	str	r3, [sp, #40]	; 0x28
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	9305      	str	r3, [sp, #20]
 80038f8:	f8d8 3000 	ldr.w	r3, [r8]
 80038fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003900:	3307      	adds	r3, #7
 8003902:	f023 0307 	bic.w	r3, r3, #7
 8003906:	f103 0208 	add.w	r2, r3, #8
 800390a:	f8c8 2000 	str.w	r2, [r8]
 800390e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003916:	9307      	str	r3, [sp, #28]
 8003918:	f8cd 8018 	str.w	r8, [sp, #24]
 800391c:	ee08 0a10 	vmov	s16, r0
 8003920:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003928:	4b9e      	ldr	r3, [pc, #632]	; (8003ba4 <_printf_float+0x2d8>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	f7fd f8fd 	bl	8000b2c <__aeabi_dcmpun>
 8003932:	bb88      	cbnz	r0, 8003998 <_printf_float+0xcc>
 8003934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003938:	4b9a      	ldr	r3, [pc, #616]	; (8003ba4 <_printf_float+0x2d8>)
 800393a:	f04f 32ff 	mov.w	r2, #4294967295
 800393e:	f7fd f8d7 	bl	8000af0 <__aeabi_dcmple>
 8003942:	bb48      	cbnz	r0, 8003998 <_printf_float+0xcc>
 8003944:	2200      	movs	r2, #0
 8003946:	2300      	movs	r3, #0
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fd f8c6 	bl	8000adc <__aeabi_dcmplt>
 8003950:	b110      	cbz	r0, 8003958 <_printf_float+0x8c>
 8003952:	232d      	movs	r3, #45	; 0x2d
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003958:	4a93      	ldr	r2, [pc, #588]	; (8003ba8 <_printf_float+0x2dc>)
 800395a:	4b94      	ldr	r3, [pc, #592]	; (8003bac <_printf_float+0x2e0>)
 800395c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003960:	bf94      	ite	ls
 8003962:	4690      	movls	r8, r2
 8003964:	4698      	movhi	r8, r3
 8003966:	2303      	movs	r3, #3
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	9b05      	ldr	r3, [sp, #20]
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	f04f 0900 	mov.w	r9, #0
 8003976:	9700      	str	r7, [sp, #0]
 8003978:	4633      	mov	r3, r6
 800397a:	aa0b      	add	r2, sp, #44	; 0x2c
 800397c:	4621      	mov	r1, r4
 800397e:	4628      	mov	r0, r5
 8003980:	f000 f9da 	bl	8003d38 <_printf_common>
 8003984:	3001      	adds	r0, #1
 8003986:	f040 8090 	bne.w	8003aaa <_printf_float+0x1de>
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	b00d      	add	sp, #52	; 0x34
 8003990:	ecbd 8b02 	vpop	{d8}
 8003994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	4640      	mov	r0, r8
 800399e:	4649      	mov	r1, r9
 80039a0:	f7fd f8c4 	bl	8000b2c <__aeabi_dcmpun>
 80039a4:	b140      	cbz	r0, 80039b8 <_printf_float+0xec>
 80039a6:	464b      	mov	r3, r9
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bfbc      	itt	lt
 80039ac:	232d      	movlt	r3, #45	; 0x2d
 80039ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80039b2:	4a7f      	ldr	r2, [pc, #508]	; (8003bb0 <_printf_float+0x2e4>)
 80039b4:	4b7f      	ldr	r3, [pc, #508]	; (8003bb4 <_printf_float+0x2e8>)
 80039b6:	e7d1      	b.n	800395c <_printf_float+0x90>
 80039b8:	6863      	ldr	r3, [r4, #4]
 80039ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80039be:	9206      	str	r2, [sp, #24]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	d13f      	bne.n	8003a44 <_printf_float+0x178>
 80039c4:	2306      	movs	r3, #6
 80039c6:	6063      	str	r3, [r4, #4]
 80039c8:	9b05      	ldr	r3, [sp, #20]
 80039ca:	6861      	ldr	r1, [r4, #4]
 80039cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039d0:	2300      	movs	r3, #0
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	ab0a      	add	r3, sp, #40	; 0x28
 80039d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80039da:	ab09      	add	r3, sp, #36	; 0x24
 80039dc:	ec49 8b10 	vmov	d0, r8, r9
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6022      	str	r2, [r4, #0]
 80039e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80039e8:	4628      	mov	r0, r5
 80039ea:	f7ff fecf 	bl	800378c <__cvt>
 80039ee:	9b06      	ldr	r3, [sp, #24]
 80039f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039f2:	2b47      	cmp	r3, #71	; 0x47
 80039f4:	4680      	mov	r8, r0
 80039f6:	d108      	bne.n	8003a0a <_printf_float+0x13e>
 80039f8:	1cc8      	adds	r0, r1, #3
 80039fa:	db02      	blt.n	8003a02 <_printf_float+0x136>
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	4299      	cmp	r1, r3
 8003a00:	dd41      	ble.n	8003a86 <_printf_float+0x1ba>
 8003a02:	f1ab 0302 	sub.w	r3, fp, #2
 8003a06:	fa5f fb83 	uxtb.w	fp, r3
 8003a0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a0e:	d820      	bhi.n	8003a52 <_printf_float+0x186>
 8003a10:	3901      	subs	r1, #1
 8003a12:	465a      	mov	r2, fp
 8003a14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a18:	9109      	str	r1, [sp, #36]	; 0x24
 8003a1a:	f7ff ff19 	bl	8003850 <__exponent>
 8003a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a20:	1813      	adds	r3, r2, r0
 8003a22:	2a01      	cmp	r2, #1
 8003a24:	4681      	mov	r9, r0
 8003a26:	6123      	str	r3, [r4, #16]
 8003a28:	dc02      	bgt.n	8003a30 <_printf_float+0x164>
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	07d2      	lsls	r2, r2, #31
 8003a2e:	d501      	bpl.n	8003a34 <_printf_float+0x168>
 8003a30:	3301      	adds	r3, #1
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d09c      	beq.n	8003976 <_printf_float+0xaa>
 8003a3c:	232d      	movs	r3, #45	; 0x2d
 8003a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a42:	e798      	b.n	8003976 <_printf_float+0xaa>
 8003a44:	9a06      	ldr	r2, [sp, #24]
 8003a46:	2a47      	cmp	r2, #71	; 0x47
 8003a48:	d1be      	bne.n	80039c8 <_printf_float+0xfc>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1bc      	bne.n	80039c8 <_printf_float+0xfc>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e7b9      	b.n	80039c6 <_printf_float+0xfa>
 8003a52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003a56:	d118      	bne.n	8003a8a <_printf_float+0x1be>
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	dd0b      	ble.n	8003a76 <_printf_float+0x1aa>
 8003a5e:	6121      	str	r1, [r4, #16]
 8003a60:	b913      	cbnz	r3, 8003a68 <_printf_float+0x19c>
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	07d0      	lsls	r0, r2, #31
 8003a66:	d502      	bpl.n	8003a6e <_printf_float+0x1a2>
 8003a68:	3301      	adds	r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a70:	f04f 0900 	mov.w	r9, #0
 8003a74:	e7de      	b.n	8003a34 <_printf_float+0x168>
 8003a76:	b913      	cbnz	r3, 8003a7e <_printf_float+0x1b2>
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	07d2      	lsls	r2, r2, #31
 8003a7c:	d501      	bpl.n	8003a82 <_printf_float+0x1b6>
 8003a7e:	3302      	adds	r3, #2
 8003a80:	e7f4      	b.n	8003a6c <_printf_float+0x1a0>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e7f2      	b.n	8003a6c <_printf_float+0x1a0>
 8003a86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	db05      	blt.n	8003a9c <_printf_float+0x1d0>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	6121      	str	r1, [r4, #16]
 8003a94:	07d8      	lsls	r0, r3, #31
 8003a96:	d5ea      	bpl.n	8003a6e <_printf_float+0x1a2>
 8003a98:	1c4b      	adds	r3, r1, #1
 8003a9a:	e7e7      	b.n	8003a6c <_printf_float+0x1a0>
 8003a9c:	2900      	cmp	r1, #0
 8003a9e:	bfd4      	ite	le
 8003aa0:	f1c1 0202 	rsble	r2, r1, #2
 8003aa4:	2201      	movgt	r2, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	e7e0      	b.n	8003a6c <_printf_float+0x1a0>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	055a      	lsls	r2, r3, #21
 8003aae:	d407      	bmi.n	8003ac0 <_printf_float+0x1f4>
 8003ab0:	6923      	ldr	r3, [r4, #16]
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	47b8      	blx	r7
 8003aba:	3001      	adds	r0, #1
 8003abc:	d12c      	bne.n	8003b18 <_printf_float+0x24c>
 8003abe:	e764      	b.n	800398a <_printf_float+0xbe>
 8003ac0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ac4:	f240 80e0 	bls.w	8003c88 <_printf_float+0x3bc>
 8003ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003acc:	2200      	movs	r2, #0
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f7fc fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d034      	beq.n	8003b42 <_printf_float+0x276>
 8003ad8:	4a37      	ldr	r2, [pc, #220]	; (8003bb8 <_printf_float+0x2ec>)
 8003ada:	2301      	movs	r3, #1
 8003adc:	4631      	mov	r1, r6
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b8      	blx	r7
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	f43f af51 	beq.w	800398a <_printf_float+0xbe>
 8003ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aec:	429a      	cmp	r2, r3
 8003aee:	db02      	blt.n	8003af6 <_printf_float+0x22a>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	07d8      	lsls	r0, r3, #31
 8003af4:	d510      	bpl.n	8003b18 <_printf_float+0x24c>
 8003af6:	ee18 3a10 	vmov	r3, s16
 8003afa:	4652      	mov	r2, sl
 8003afc:	4631      	mov	r1, r6
 8003afe:	4628      	mov	r0, r5
 8003b00:	47b8      	blx	r7
 8003b02:	3001      	adds	r0, #1
 8003b04:	f43f af41 	beq.w	800398a <_printf_float+0xbe>
 8003b08:	f04f 0800 	mov.w	r8, #0
 8003b0c:	f104 091a 	add.w	r9, r4, #26
 8003b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	4543      	cmp	r3, r8
 8003b16:	dc09      	bgt.n	8003b2c <_printf_float+0x260>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	079b      	lsls	r3, r3, #30
 8003b1c:	f100 8107 	bmi.w	8003d2e <_printf_float+0x462>
 8003b20:	68e0      	ldr	r0, [r4, #12]
 8003b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b24:	4298      	cmp	r0, r3
 8003b26:	bfb8      	it	lt
 8003b28:	4618      	movlt	r0, r3
 8003b2a:	e730      	b.n	800398e <_printf_float+0xc2>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	464a      	mov	r2, r9
 8003b30:	4631      	mov	r1, r6
 8003b32:	4628      	mov	r0, r5
 8003b34:	47b8      	blx	r7
 8003b36:	3001      	adds	r0, #1
 8003b38:	f43f af27 	beq.w	800398a <_printf_float+0xbe>
 8003b3c:	f108 0801 	add.w	r8, r8, #1
 8003b40:	e7e6      	b.n	8003b10 <_printf_float+0x244>
 8003b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dc39      	bgt.n	8003bbc <_printf_float+0x2f0>
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <_printf_float+0x2ec>)
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4628      	mov	r0, r5
 8003b50:	47b8      	blx	r7
 8003b52:	3001      	adds	r0, #1
 8003b54:	f43f af19 	beq.w	800398a <_printf_float+0xbe>
 8003b58:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d102      	bne.n	8003b66 <_printf_float+0x29a>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	07d9      	lsls	r1, r3, #31
 8003b64:	d5d8      	bpl.n	8003b18 <_printf_float+0x24c>
 8003b66:	ee18 3a10 	vmov	r3, s16
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	4628      	mov	r0, r5
 8003b70:	47b8      	blx	r7
 8003b72:	3001      	adds	r0, #1
 8003b74:	f43f af09 	beq.w	800398a <_printf_float+0xbe>
 8003b78:	f04f 0900 	mov.w	r9, #0
 8003b7c:	f104 0a1a 	add.w	sl, r4, #26
 8003b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b82:	425b      	negs	r3, r3
 8003b84:	454b      	cmp	r3, r9
 8003b86:	dc01      	bgt.n	8003b8c <_printf_float+0x2c0>
 8003b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8a:	e792      	b.n	8003ab2 <_printf_float+0x1e6>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4652      	mov	r2, sl
 8003b90:	4631      	mov	r1, r6
 8003b92:	4628      	mov	r0, r5
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	f43f aef7 	beq.w	800398a <_printf_float+0xbe>
 8003b9c:	f109 0901 	add.w	r9, r9, #1
 8003ba0:	e7ee      	b.n	8003b80 <_printf_float+0x2b4>
 8003ba2:	bf00      	nop
 8003ba4:	7fefffff 	.word	0x7fefffff
 8003ba8:	0800672c 	.word	0x0800672c
 8003bac:	08006730 	.word	0x08006730
 8003bb0:	08006734 	.word	0x08006734
 8003bb4:	08006738 	.word	0x08006738
 8003bb8:	0800673c 	.word	0x0800673c
 8003bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bfa8      	it	ge
 8003bc4:	461a      	movge	r2, r3
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	4691      	mov	r9, r2
 8003bca:	dc37      	bgt.n	8003c3c <_printf_float+0x370>
 8003bcc:	f04f 0b00 	mov.w	fp, #0
 8003bd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bd4:	f104 021a 	add.w	r2, r4, #26
 8003bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bda:	9305      	str	r3, [sp, #20]
 8003bdc:	eba3 0309 	sub.w	r3, r3, r9
 8003be0:	455b      	cmp	r3, fp
 8003be2:	dc33      	bgt.n	8003c4c <_printf_float+0x380>
 8003be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003be8:	429a      	cmp	r2, r3
 8003bea:	db3b      	blt.n	8003c64 <_printf_float+0x398>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	07da      	lsls	r2, r3, #31
 8003bf0:	d438      	bmi.n	8003c64 <_printf_float+0x398>
 8003bf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003bf6:	eba2 0903 	sub.w	r9, r2, r3
 8003bfa:	9b05      	ldr	r3, [sp, #20]
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	4591      	cmp	r9, r2
 8003c00:	bfa8      	it	ge
 8003c02:	4691      	movge	r9, r2
 8003c04:	f1b9 0f00 	cmp.w	r9, #0
 8003c08:	dc35      	bgt.n	8003c76 <_printf_float+0x3aa>
 8003c0a:	f04f 0800 	mov.w	r8, #0
 8003c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c12:	f104 0a1a 	add.w	sl, r4, #26
 8003c16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	eba3 0309 	sub.w	r3, r3, r9
 8003c20:	4543      	cmp	r3, r8
 8003c22:	f77f af79 	ble.w	8003b18 <_printf_float+0x24c>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4652      	mov	r2, sl
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b8      	blx	r7
 8003c30:	3001      	adds	r0, #1
 8003c32:	f43f aeaa 	beq.w	800398a <_printf_float+0xbe>
 8003c36:	f108 0801 	add.w	r8, r8, #1
 8003c3a:	e7ec      	b.n	8003c16 <_printf_float+0x34a>
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	4631      	mov	r1, r6
 8003c40:	4642      	mov	r2, r8
 8003c42:	4628      	mov	r0, r5
 8003c44:	47b8      	blx	r7
 8003c46:	3001      	adds	r0, #1
 8003c48:	d1c0      	bne.n	8003bcc <_printf_float+0x300>
 8003c4a:	e69e      	b.n	800398a <_printf_float+0xbe>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	9205      	str	r2, [sp, #20]
 8003c54:	47b8      	blx	r7
 8003c56:	3001      	adds	r0, #1
 8003c58:	f43f ae97 	beq.w	800398a <_printf_float+0xbe>
 8003c5c:	9a05      	ldr	r2, [sp, #20]
 8003c5e:	f10b 0b01 	add.w	fp, fp, #1
 8003c62:	e7b9      	b.n	8003bd8 <_printf_float+0x30c>
 8003c64:	ee18 3a10 	vmov	r3, s16
 8003c68:	4652      	mov	r2, sl
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	d1be      	bne.n	8003bf2 <_printf_float+0x326>
 8003c74:	e689      	b.n	800398a <_printf_float+0xbe>
 8003c76:	9a05      	ldr	r2, [sp, #20]
 8003c78:	464b      	mov	r3, r9
 8003c7a:	4442      	add	r2, r8
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4628      	mov	r0, r5
 8003c80:	47b8      	blx	r7
 8003c82:	3001      	adds	r0, #1
 8003c84:	d1c1      	bne.n	8003c0a <_printf_float+0x33e>
 8003c86:	e680      	b.n	800398a <_printf_float+0xbe>
 8003c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c8a:	2a01      	cmp	r2, #1
 8003c8c:	dc01      	bgt.n	8003c92 <_printf_float+0x3c6>
 8003c8e:	07db      	lsls	r3, r3, #31
 8003c90:	d53a      	bpl.n	8003d08 <_printf_float+0x43c>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4642      	mov	r2, r8
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f ae74 	beq.w	800398a <_printf_float+0xbe>
 8003ca2:	ee18 3a10 	vmov	r3, s16
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f ae6b 	beq.w	800398a <_printf_float+0xbe>
 8003cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003cc0:	f7fc ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cc4:	b9d8      	cbnz	r0, 8003cfe <_printf_float+0x432>
 8003cc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003cca:	f108 0201 	add.w	r2, r8, #1
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d10e      	bne.n	8003cf6 <_printf_float+0x42a>
 8003cd8:	e657      	b.n	800398a <_printf_float+0xbe>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4652      	mov	r2, sl
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f ae50 	beq.w	800398a <_printf_float+0xbe>
 8003cea:	f108 0801 	add.w	r8, r8, #1
 8003cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	4543      	cmp	r3, r8
 8003cf4:	dcf1      	bgt.n	8003cda <_printf_float+0x40e>
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cfc:	e6da      	b.n	8003ab4 <_printf_float+0x1e8>
 8003cfe:	f04f 0800 	mov.w	r8, #0
 8003d02:	f104 0a1a 	add.w	sl, r4, #26
 8003d06:	e7f2      	b.n	8003cee <_printf_float+0x422>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	e7df      	b.n	8003cce <_printf_float+0x402>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	464a      	mov	r2, r9
 8003d12:	4631      	mov	r1, r6
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b8      	blx	r7
 8003d18:	3001      	adds	r0, #1
 8003d1a:	f43f ae36 	beq.w	800398a <_printf_float+0xbe>
 8003d1e:	f108 0801 	add.w	r8, r8, #1
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d26:	1a5b      	subs	r3, r3, r1
 8003d28:	4543      	cmp	r3, r8
 8003d2a:	dcf0      	bgt.n	8003d0e <_printf_float+0x442>
 8003d2c:	e6f8      	b.n	8003b20 <_printf_float+0x254>
 8003d2e:	f04f 0800 	mov.w	r8, #0
 8003d32:	f104 0919 	add.w	r9, r4, #25
 8003d36:	e7f4      	b.n	8003d22 <_printf_float+0x456>

08003d38 <_printf_common>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	4699      	mov	r9, r3
 8003d40:	688a      	ldr	r2, [r1, #8]
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bfb8      	it	lt
 8003d4c:	4613      	movlt	r3, r2
 8003d4e:	6033      	str	r3, [r6, #0]
 8003d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d54:	4607      	mov	r7, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	b10a      	cbz	r2, 8003d5e <_printf_common+0x26>
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	0699      	lsls	r1, r3, #26
 8003d62:	bf42      	ittt	mi
 8003d64:	6833      	ldrmi	r3, [r6, #0]
 8003d66:	3302      	addmi	r3, #2
 8003d68:	6033      	strmi	r3, [r6, #0]
 8003d6a:	6825      	ldr	r5, [r4, #0]
 8003d6c:	f015 0506 	ands.w	r5, r5, #6
 8003d70:	d106      	bne.n	8003d80 <_printf_common+0x48>
 8003d72:	f104 0a19 	add.w	sl, r4, #25
 8003d76:	68e3      	ldr	r3, [r4, #12]
 8003d78:	6832      	ldr	r2, [r6, #0]
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	42ab      	cmp	r3, r5
 8003d7e:	dc26      	bgt.n	8003dce <_printf_common+0x96>
 8003d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d84:	1e13      	subs	r3, r2, #0
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	bf18      	it	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	0692      	lsls	r2, r2, #26
 8003d8e:	d42b      	bmi.n	8003de8 <_printf_common+0xb0>
 8003d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d94:	4649      	mov	r1, r9
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d01e      	beq.n	8003ddc <_printf_common+0xa4>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	6922      	ldr	r2, [r4, #16]
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf02      	ittt	eq
 8003daa:	68e5      	ldreq	r5, [r4, #12]
 8003dac:	6833      	ldreq	r3, [r6, #0]
 8003dae:	1aed      	subeq	r5, r5, r3
 8003db0:	68a3      	ldr	r3, [r4, #8]
 8003db2:	bf0c      	ite	eq
 8003db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db8:	2500      	movne	r5, #0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfc4      	itt	gt
 8003dbe:	1a9b      	subgt	r3, r3, r2
 8003dc0:	18ed      	addgt	r5, r5, r3
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	341a      	adds	r4, #26
 8003dc6:	42b5      	cmp	r5, r6
 8003dc8:	d11a      	bne.n	8003e00 <_printf_common+0xc8>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e008      	b.n	8003de0 <_printf_common+0xa8>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	47c0      	blx	r8
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d103      	bne.n	8003de4 <_printf_common+0xac>
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	3501      	adds	r5, #1
 8003de6:	e7c6      	b.n	8003d76 <_printf_common+0x3e>
 8003de8:	18e1      	adds	r1, r4, r3
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	2030      	movs	r0, #48	; 0x30
 8003dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003df2:	4422      	add	r2, r4
 8003df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	e7c7      	b.n	8003d90 <_printf_common+0x58>
 8003e00:	2301      	movs	r3, #1
 8003e02:	4622      	mov	r2, r4
 8003e04:	4649      	mov	r1, r9
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c0      	blx	r8
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d0e6      	beq.n	8003ddc <_printf_common+0xa4>
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7d9      	b.n	8003dc6 <_printf_common+0x8e>
	...

08003e14 <_printf_i>:
 8003e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	7e0f      	ldrb	r7, [r1, #24]
 8003e1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e1c:	2f78      	cmp	r7, #120	; 0x78
 8003e1e:	4691      	mov	r9, r2
 8003e20:	4680      	mov	r8, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	469a      	mov	sl, r3
 8003e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e2a:	d807      	bhi.n	8003e3c <_printf_i+0x28>
 8003e2c:	2f62      	cmp	r7, #98	; 0x62
 8003e2e:	d80a      	bhi.n	8003e46 <_printf_i+0x32>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	f000 80d4 	beq.w	8003fde <_printf_i+0x1ca>
 8003e36:	2f58      	cmp	r7, #88	; 0x58
 8003e38:	f000 80c0 	beq.w	8003fbc <_printf_i+0x1a8>
 8003e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e44:	e03a      	b.n	8003ebc <_printf_i+0xa8>
 8003e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e4a:	2b15      	cmp	r3, #21
 8003e4c:	d8f6      	bhi.n	8003e3c <_printf_i+0x28>
 8003e4e:	a101      	add	r1, pc, #4	; (adr r1, 8003e54 <_printf_i+0x40>)
 8003e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003ec1 	.word	0x08003ec1
 8003e5c:	08003e3d 	.word	0x08003e3d
 8003e60:	08003e3d 	.word	0x08003e3d
 8003e64:	08003e3d 	.word	0x08003e3d
 8003e68:	08003e3d 	.word	0x08003e3d
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003e3d 	.word	0x08003e3d
 8003e74:	08003e3d 	.word	0x08003e3d
 8003e78:	08003e3d 	.word	0x08003e3d
 8003e7c:	08003e3d 	.word	0x08003e3d
 8003e80:	08003fc5 	.word	0x08003fc5
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003f7f 	.word	0x08003f7f
 8003e8c:	08003e3d 	.word	0x08003e3d
 8003e90:	08003e3d 	.word	0x08003e3d
 8003e94:	08003fe7 	.word	0x08003fe7
 8003e98:	08003e3d 	.word	0x08003e3d
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003e3d 	.word	0x08003e3d
 8003ea4:	08003e3d 	.word	0x08003e3d
 8003ea8:	08003f87 	.word	0x08003f87
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	602a      	str	r2, [r5, #0]
 8003eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e09f      	b.n	8004000 <_printf_i+0x1ec>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	0607      	lsls	r7, r0, #24
 8003ec6:	f103 0104 	add.w	r1, r3, #4
 8003eca:	6029      	str	r1, [r5, #0]
 8003ecc:	d501      	bpl.n	8003ed2 <_printf_i+0xbe>
 8003ece:	681e      	ldr	r6, [r3, #0]
 8003ed0:	e003      	b.n	8003eda <_printf_i+0xc6>
 8003ed2:	0646      	lsls	r6, r0, #25
 8003ed4:	d5fb      	bpl.n	8003ece <_printf_i+0xba>
 8003ed6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003eda:	2e00      	cmp	r6, #0
 8003edc:	da03      	bge.n	8003ee6 <_printf_i+0xd2>
 8003ede:	232d      	movs	r3, #45	; 0x2d
 8003ee0:	4276      	negs	r6, r6
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee6:	485a      	ldr	r0, [pc, #360]	; (8004050 <_printf_i+0x23c>)
 8003ee8:	230a      	movs	r3, #10
 8003eea:	e012      	b.n	8003f12 <_printf_i+0xfe>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	6029      	str	r1, [r5, #0]
 8003ef4:	0605      	lsls	r5, r0, #24
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0xe8>
 8003ef8:	681e      	ldr	r6, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0xee>
 8003efc:	0641      	lsls	r1, r0, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0xe4>
 8003f00:	881e      	ldrh	r6, [r3, #0]
 8003f02:	4853      	ldr	r0, [pc, #332]	; (8004050 <_printf_i+0x23c>)
 8003f04:	2f6f      	cmp	r7, #111	; 0x6f
 8003f06:	bf0c      	ite	eq
 8003f08:	2308      	moveq	r3, #8
 8003f0a:	230a      	movne	r3, #10
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f12:	6865      	ldr	r5, [r4, #4]
 8003f14:	60a5      	str	r5, [r4, #8]
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	bfa2      	ittt	ge
 8003f1a:	6821      	ldrge	r1, [r4, #0]
 8003f1c:	f021 0104 	bicge.w	r1, r1, #4
 8003f20:	6021      	strge	r1, [r4, #0]
 8003f22:	b90e      	cbnz	r6, 8003f28 <_printf_i+0x114>
 8003f24:	2d00      	cmp	r5, #0
 8003f26:	d04b      	beq.n	8003fc0 <_printf_i+0x1ac>
 8003f28:	4615      	mov	r5, r2
 8003f2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f2e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f32:	5dc7      	ldrb	r7, [r0, r7]
 8003f34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f38:	4637      	mov	r7, r6
 8003f3a:	42bb      	cmp	r3, r7
 8003f3c:	460e      	mov	r6, r1
 8003f3e:	d9f4      	bls.n	8003f2a <_printf_i+0x116>
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d10b      	bne.n	8003f5c <_printf_i+0x148>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07de      	lsls	r6, r3, #31
 8003f48:	d508      	bpl.n	8003f5c <_printf_i+0x148>
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	6861      	ldr	r1, [r4, #4]
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	bfde      	ittt	le
 8003f52:	2330      	movle	r3, #48	; 0x30
 8003f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f5c:	1b52      	subs	r2, r2, r5
 8003f5e:	6122      	str	r2, [r4, #16]
 8003f60:	f8cd a000 	str.w	sl, [sp]
 8003f64:	464b      	mov	r3, r9
 8003f66:	aa03      	add	r2, sp, #12
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f7ff fee4 	bl	8003d38 <_printf_common>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d14a      	bne.n	800400a <_printf_i+0x1f6>
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	b004      	add	sp, #16
 8003f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	f043 0320 	orr.w	r3, r3, #32
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	4833      	ldr	r0, [pc, #204]	; (8004054 <_printf_i+0x240>)
 8003f88:	2778      	movs	r7, #120	; 0x78
 8003f8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	6829      	ldr	r1, [r5, #0]
 8003f92:	061f      	lsls	r7, r3, #24
 8003f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f98:	d402      	bmi.n	8003fa0 <_printf_i+0x18c>
 8003f9a:	065f      	lsls	r7, r3, #25
 8003f9c:	bf48      	it	mi
 8003f9e:	b2b6      	uxthmi	r6, r6
 8003fa0:	07df      	lsls	r7, r3, #31
 8003fa2:	bf48      	it	mi
 8003fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa8:	6029      	str	r1, [r5, #0]
 8003faa:	bf48      	it	mi
 8003fac:	6023      	strmi	r3, [r4, #0]
 8003fae:	b91e      	cbnz	r6, 8003fb8 <_printf_i+0x1a4>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	f023 0320 	bic.w	r3, r3, #32
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	2310      	movs	r3, #16
 8003fba:	e7a7      	b.n	8003f0c <_printf_i+0xf8>
 8003fbc:	4824      	ldr	r0, [pc, #144]	; (8004050 <_printf_i+0x23c>)
 8003fbe:	e7e4      	b.n	8003f8a <_printf_i+0x176>
 8003fc0:	4615      	mov	r5, r2
 8003fc2:	e7bd      	b.n	8003f40 <_printf_i+0x12c>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	6826      	ldr	r6, [r4, #0]
 8003fc8:	6961      	ldr	r1, [r4, #20]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6028      	str	r0, [r5, #0]
 8003fce:	0635      	lsls	r5, r6, #24
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	d501      	bpl.n	8003fd8 <_printf_i+0x1c4>
 8003fd4:	6019      	str	r1, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <_printf_i+0x1ca>
 8003fd8:	0670      	lsls	r0, r6, #25
 8003fda:	d5fb      	bpl.n	8003fd4 <_printf_i+0x1c0>
 8003fdc:	8019      	strh	r1, [r3, #0]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	4615      	mov	r5, r2
 8003fe4:	e7bc      	b.n	8003f60 <_printf_i+0x14c>
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	602a      	str	r2, [r5, #0]
 8003fec:	681d      	ldr	r5, [r3, #0]
 8003fee:	6862      	ldr	r2, [r4, #4]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f7fc f8ec 	bl	80001d0 <memchr>
 8003ff8:	b108      	cbz	r0, 8003ffe <_printf_i+0x1ea>
 8003ffa:	1b40      	subs	r0, r0, r5
 8003ffc:	6060      	str	r0, [r4, #4]
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	6123      	str	r3, [r4, #16]
 8004002:	2300      	movs	r3, #0
 8004004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004008:	e7aa      	b.n	8003f60 <_printf_i+0x14c>
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	462a      	mov	r2, r5
 800400e:	4649      	mov	r1, r9
 8004010:	4640      	mov	r0, r8
 8004012:	47d0      	blx	sl
 8004014:	3001      	adds	r0, #1
 8004016:	d0ad      	beq.n	8003f74 <_printf_i+0x160>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	079b      	lsls	r3, r3, #30
 800401c:	d413      	bmi.n	8004046 <_printf_i+0x232>
 800401e:	68e0      	ldr	r0, [r4, #12]
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	4298      	cmp	r0, r3
 8004024:	bfb8      	it	lt
 8004026:	4618      	movlt	r0, r3
 8004028:	e7a6      	b.n	8003f78 <_printf_i+0x164>
 800402a:	2301      	movs	r3, #1
 800402c:	4632      	mov	r2, r6
 800402e:	4649      	mov	r1, r9
 8004030:	4640      	mov	r0, r8
 8004032:	47d0      	blx	sl
 8004034:	3001      	adds	r0, #1
 8004036:	d09d      	beq.n	8003f74 <_printf_i+0x160>
 8004038:	3501      	adds	r5, #1
 800403a:	68e3      	ldr	r3, [r4, #12]
 800403c:	9903      	ldr	r1, [sp, #12]
 800403e:	1a5b      	subs	r3, r3, r1
 8004040:	42ab      	cmp	r3, r5
 8004042:	dcf2      	bgt.n	800402a <_printf_i+0x216>
 8004044:	e7eb      	b.n	800401e <_printf_i+0x20a>
 8004046:	2500      	movs	r5, #0
 8004048:	f104 0619 	add.w	r6, r4, #25
 800404c:	e7f5      	b.n	800403a <_printf_i+0x226>
 800404e:	bf00      	nop
 8004050:	0800673e 	.word	0x0800673e
 8004054:	0800674f 	.word	0x0800674f

08004058 <std>:
 8004058:	2300      	movs	r3, #0
 800405a:	b510      	push	{r4, lr}
 800405c:	4604      	mov	r4, r0
 800405e:	e9c0 3300 	strd	r3, r3, [r0]
 8004062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004066:	6083      	str	r3, [r0, #8]
 8004068:	8181      	strh	r1, [r0, #12]
 800406a:	6643      	str	r3, [r0, #100]	; 0x64
 800406c:	81c2      	strh	r2, [r0, #14]
 800406e:	6183      	str	r3, [r0, #24]
 8004070:	4619      	mov	r1, r3
 8004072:	2208      	movs	r2, #8
 8004074:	305c      	adds	r0, #92	; 0x5c
 8004076:	f000 f9f7 	bl	8004468 <memset>
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <std+0x58>)
 800407c:	6263      	str	r3, [r4, #36]	; 0x24
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <std+0x5c>)
 8004080:	62a3      	str	r3, [r4, #40]	; 0x28
 8004082:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <std+0x60>)
 8004084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <std+0x64>)
 8004088:	6323      	str	r3, [r4, #48]	; 0x30
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <std+0x68>)
 800408c:	6224      	str	r4, [r4, #32]
 800408e:	429c      	cmp	r4, r3
 8004090:	d006      	beq.n	80040a0 <std+0x48>
 8004092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004096:	4294      	cmp	r4, r2
 8004098:	d002      	beq.n	80040a0 <std+0x48>
 800409a:	33d0      	adds	r3, #208	; 0xd0
 800409c:	429c      	cmp	r4, r3
 800409e:	d105      	bne.n	80040ac <std+0x54>
 80040a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a8:	f000 ba5a 	b.w	8004560 <__retarget_lock_init_recursive>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	080042b9 	.word	0x080042b9
 80040b4:	080042db 	.word	0x080042db
 80040b8:	08004313 	.word	0x08004313
 80040bc:	08004337 	.word	0x08004337
 80040c0:	200002a8 	.word	0x200002a8

080040c4 <stdio_exit_handler>:
 80040c4:	4a02      	ldr	r2, [pc, #8]	; (80040d0 <stdio_exit_handler+0xc>)
 80040c6:	4903      	ldr	r1, [pc, #12]	; (80040d4 <stdio_exit_handler+0x10>)
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <stdio_exit_handler+0x14>)
 80040ca:	f000 b869 	b.w	80041a0 <_fwalk_sglue>
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	08005ee9 	.word	0x08005ee9
 80040d8:	20000018 	.word	0x20000018

080040dc <cleanup_stdio>:
 80040dc:	6841      	ldr	r1, [r0, #4]
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <cleanup_stdio+0x34>)
 80040e0:	4299      	cmp	r1, r3
 80040e2:	b510      	push	{r4, lr}
 80040e4:	4604      	mov	r4, r0
 80040e6:	d001      	beq.n	80040ec <cleanup_stdio+0x10>
 80040e8:	f001 fefe 	bl	8005ee8 <_fflush_r>
 80040ec:	68a1      	ldr	r1, [r4, #8]
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <cleanup_stdio+0x38>)
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d002      	beq.n	80040fa <cleanup_stdio+0x1e>
 80040f4:	4620      	mov	r0, r4
 80040f6:	f001 fef7 	bl	8005ee8 <_fflush_r>
 80040fa:	68e1      	ldr	r1, [r4, #12]
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <cleanup_stdio+0x3c>)
 80040fe:	4299      	cmp	r1, r3
 8004100:	d004      	beq.n	800410c <cleanup_stdio+0x30>
 8004102:	4620      	mov	r0, r4
 8004104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004108:	f001 beee 	b.w	8005ee8 <_fflush_r>
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	200002a8 	.word	0x200002a8
 8004114:	20000310 	.word	0x20000310
 8004118:	20000378 	.word	0x20000378

0800411c <global_stdio_init.part.0>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <global_stdio_init.part.0+0x30>)
 8004120:	4c0b      	ldr	r4, [pc, #44]	; (8004150 <global_stdio_init.part.0+0x34>)
 8004122:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <global_stdio_init.part.0+0x38>)
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	4620      	mov	r0, r4
 8004128:	2200      	movs	r2, #0
 800412a:	2104      	movs	r1, #4
 800412c:	f7ff ff94 	bl	8004058 <std>
 8004130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004134:	2201      	movs	r2, #1
 8004136:	2109      	movs	r1, #9
 8004138:	f7ff ff8e 	bl	8004058 <std>
 800413c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004140:	2202      	movs	r2, #2
 8004142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004146:	2112      	movs	r1, #18
 8004148:	f7ff bf86 	b.w	8004058 <std>
 800414c:	200003e0 	.word	0x200003e0
 8004150:	200002a8 	.word	0x200002a8
 8004154:	080040c5 	.word	0x080040c5

08004158 <__sfp_lock_acquire>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__sfp_lock_acquire+0x8>)
 800415a:	f000 ba02 	b.w	8004562 <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	200003e9 	.word	0x200003e9

08004164 <__sfp_lock_release>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__sfp_lock_release+0x8>)
 8004166:	f000 b9fd 	b.w	8004564 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	200003e9 	.word	0x200003e9

08004170 <__sinit>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	f7ff fff0 	bl	8004158 <__sfp_lock_acquire>
 8004178:	6a23      	ldr	r3, [r4, #32]
 800417a:	b11b      	cbz	r3, 8004184 <__sinit+0x14>
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f7ff bff0 	b.w	8004164 <__sfp_lock_release>
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <__sinit+0x28>)
 8004186:	6223      	str	r3, [r4, #32]
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__sinit+0x2c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f5      	bne.n	800417c <__sinit+0xc>
 8004190:	f7ff ffc4 	bl	800411c <global_stdio_init.part.0>
 8004194:	e7f2      	b.n	800417c <__sinit+0xc>
 8004196:	bf00      	nop
 8004198:	080040dd 	.word	0x080040dd
 800419c:	200003e0 	.word	0x200003e0

080041a0 <_fwalk_sglue>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4607      	mov	r7, r0
 80041a6:	4688      	mov	r8, r1
 80041a8:	4614      	mov	r4, r2
 80041aa:	2600      	movs	r6, #0
 80041ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b0:	f1b9 0901 	subs.w	r9, r9, #1
 80041b4:	d505      	bpl.n	80041c2 <_fwalk_sglue+0x22>
 80041b6:	6824      	ldr	r4, [r4, #0]
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d1f7      	bne.n	80041ac <_fwalk_sglue+0xc>
 80041bc:	4630      	mov	r0, r6
 80041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d907      	bls.n	80041d8 <_fwalk_sglue+0x38>
 80041c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041cc:	3301      	adds	r3, #1
 80041ce:	d003      	beq.n	80041d8 <_fwalk_sglue+0x38>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	4306      	orrs	r6, r0
 80041d8:	3568      	adds	r5, #104	; 0x68
 80041da:	e7e9      	b.n	80041b0 <_fwalk_sglue+0x10>

080041dc <iprintf>:
 80041dc:	b40f      	push	{r0, r1, r2, r3}
 80041de:	b507      	push	{r0, r1, r2, lr}
 80041e0:	4906      	ldr	r1, [pc, #24]	; (80041fc <iprintf+0x20>)
 80041e2:	ab04      	add	r3, sp, #16
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ea:	6881      	ldr	r1, [r0, #8]
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	f001 fcdb 	bl	8005ba8 <_vfiprintf_r>
 80041f2:	b003      	add	sp, #12
 80041f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f8:	b004      	add	sp, #16
 80041fa:	4770      	bx	lr
 80041fc:	20000064 	.word	0x20000064

08004200 <_puts_r>:
 8004200:	6a03      	ldr	r3, [r0, #32]
 8004202:	b570      	push	{r4, r5, r6, lr}
 8004204:	6884      	ldr	r4, [r0, #8]
 8004206:	4605      	mov	r5, r0
 8004208:	460e      	mov	r6, r1
 800420a:	b90b      	cbnz	r3, 8004210 <_puts_r+0x10>
 800420c:	f7ff ffb0 	bl	8004170 <__sinit>
 8004210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004212:	07db      	lsls	r3, r3, #31
 8004214:	d405      	bmi.n	8004222 <_puts_r+0x22>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	0598      	lsls	r0, r3, #22
 800421a:	d402      	bmi.n	8004222 <_puts_r+0x22>
 800421c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421e:	f000 f9a0 	bl	8004562 <__retarget_lock_acquire_recursive>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	0719      	lsls	r1, r3, #28
 8004226:	d513      	bpl.n	8004250 <_puts_r+0x50>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b18b      	cbz	r3, 8004250 <_puts_r+0x50>
 800422c:	3e01      	subs	r6, #1
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004234:	3b01      	subs	r3, #1
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	b9e9      	cbnz	r1, 8004276 <_puts_r+0x76>
 800423a:	2b00      	cmp	r3, #0
 800423c:	da2e      	bge.n	800429c <_puts_r+0x9c>
 800423e:	4622      	mov	r2, r4
 8004240:	210a      	movs	r1, #10
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f87b 	bl	800433e <__swbuf_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d007      	beq.n	800425c <_puts_r+0x5c>
 800424c:	250a      	movs	r5, #10
 800424e:	e007      	b.n	8004260 <_puts_r+0x60>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f8b0 	bl	80043b8 <__swsetup_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0e7      	beq.n	800422c <_puts_r+0x2c>
 800425c:	f04f 35ff 	mov.w	r5, #4294967295
 8004260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004262:	07da      	lsls	r2, r3, #31
 8004264:	d405      	bmi.n	8004272 <_puts_r+0x72>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	059b      	lsls	r3, r3, #22
 800426a:	d402      	bmi.n	8004272 <_puts_r+0x72>
 800426c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800426e:	f000 f979 	bl	8004564 <__retarget_lock_release_recursive>
 8004272:	4628      	mov	r0, r5
 8004274:	bd70      	pop	{r4, r5, r6, pc}
 8004276:	2b00      	cmp	r3, #0
 8004278:	da04      	bge.n	8004284 <_puts_r+0x84>
 800427a:	69a2      	ldr	r2, [r4, #24]
 800427c:	429a      	cmp	r2, r3
 800427e:	dc06      	bgt.n	800428e <_puts_r+0x8e>
 8004280:	290a      	cmp	r1, #10
 8004282:	d004      	beq.n	800428e <_puts_r+0x8e>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	7019      	strb	r1, [r3, #0]
 800428c:	e7cf      	b.n	800422e <_puts_r+0x2e>
 800428e:	4622      	mov	r2, r4
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f854 	bl	800433e <__swbuf_r>
 8004296:	3001      	adds	r0, #1
 8004298:	d1c9      	bne.n	800422e <_puts_r+0x2e>
 800429a:	e7df      	b.n	800425c <_puts_r+0x5c>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	250a      	movs	r5, #10
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	6022      	str	r2, [r4, #0]
 80042a4:	701d      	strb	r5, [r3, #0]
 80042a6:	e7db      	b.n	8004260 <_puts_r+0x60>

080042a8 <puts>:
 80042a8:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <puts+0xc>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f7ff bfa7 	b.w	8004200 <_puts_r>
 80042b2:	bf00      	nop
 80042b4:	20000064 	.word	0x20000064

080042b8 <__sread>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	f000 f900 	bl	80044c4 <_read_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	bfab      	itete	ge
 80042c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ca:	89a3      	ldrhlt	r3, [r4, #12]
 80042cc:	181b      	addge	r3, r3, r0
 80042ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042d2:	bfac      	ite	ge
 80042d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80042d6:	81a3      	strhlt	r3, [r4, #12]
 80042d8:	bd10      	pop	{r4, pc}

080042da <__swrite>:
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	461f      	mov	r7, r3
 80042e0:	898b      	ldrh	r3, [r1, #12]
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	4605      	mov	r5, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	4616      	mov	r6, r2
 80042ea:	d505      	bpl.n	80042f8 <__swrite+0x1e>
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	2302      	movs	r3, #2
 80042f2:	2200      	movs	r2, #0
 80042f4:	f000 f8d4 	bl	80044a0 <_lseek_r>
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	4628      	mov	r0, r5
 800430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	f000 b8eb 	b.w	80044e8 <_write_r>

08004312 <__sseek>:
 8004312:	b510      	push	{r4, lr}
 8004314:	460c      	mov	r4, r1
 8004316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431a:	f000 f8c1 	bl	80044a0 <_lseek_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	bf15      	itete	ne
 8004324:	6560      	strne	r0, [r4, #84]	; 0x54
 8004326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800432a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800432e:	81a3      	strheq	r3, [r4, #12]
 8004330:	bf18      	it	ne
 8004332:	81a3      	strhne	r3, [r4, #12]
 8004334:	bd10      	pop	{r4, pc}

08004336 <__sclose>:
 8004336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433a:	f000 b8a1 	b.w	8004480 <_close_r>

0800433e <__swbuf_r>:
 800433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004340:	460e      	mov	r6, r1
 8004342:	4614      	mov	r4, r2
 8004344:	4605      	mov	r5, r0
 8004346:	b118      	cbz	r0, 8004350 <__swbuf_r+0x12>
 8004348:	6a03      	ldr	r3, [r0, #32]
 800434a:	b90b      	cbnz	r3, 8004350 <__swbuf_r+0x12>
 800434c:	f7ff ff10 	bl	8004170 <__sinit>
 8004350:	69a3      	ldr	r3, [r4, #24]
 8004352:	60a3      	str	r3, [r4, #8]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	071a      	lsls	r2, r3, #28
 8004358:	d525      	bpl.n	80043a6 <__swbuf_r+0x68>
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	b31b      	cbz	r3, 80043a6 <__swbuf_r+0x68>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	1a98      	subs	r0, r3, r2
 8004364:	6963      	ldr	r3, [r4, #20]
 8004366:	b2f6      	uxtb	r6, r6
 8004368:	4283      	cmp	r3, r0
 800436a:	4637      	mov	r7, r6
 800436c:	dc04      	bgt.n	8004378 <__swbuf_r+0x3a>
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f001 fdb9 	bl	8005ee8 <_fflush_r>
 8004376:	b9e0      	cbnz	r0, 80043b2 <__swbuf_r+0x74>
 8004378:	68a3      	ldr	r3, [r4, #8]
 800437a:	3b01      	subs	r3, #1
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	6022      	str	r2, [r4, #0]
 8004384:	701e      	strb	r6, [r3, #0]
 8004386:	6962      	ldr	r2, [r4, #20]
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	429a      	cmp	r2, r3
 800438c:	d004      	beq.n	8004398 <__swbuf_r+0x5a>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	07db      	lsls	r3, r3, #31
 8004392:	d506      	bpl.n	80043a2 <__swbuf_r+0x64>
 8004394:	2e0a      	cmp	r6, #10
 8004396:	d104      	bne.n	80043a2 <__swbuf_r+0x64>
 8004398:	4621      	mov	r1, r4
 800439a:	4628      	mov	r0, r5
 800439c:	f001 fda4 	bl	8005ee8 <_fflush_r>
 80043a0:	b938      	cbnz	r0, 80043b2 <__swbuf_r+0x74>
 80043a2:	4638      	mov	r0, r7
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	4621      	mov	r1, r4
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f805 	bl	80043b8 <__swsetup_r>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d0d5      	beq.n	800435e <__swbuf_r+0x20>
 80043b2:	f04f 37ff 	mov.w	r7, #4294967295
 80043b6:	e7f4      	b.n	80043a2 <__swbuf_r+0x64>

080043b8 <__swsetup_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <__swsetup_r+0xac>)
 80043bc:	4605      	mov	r5, r0
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	460c      	mov	r4, r1
 80043c2:	b118      	cbz	r0, 80043cc <__swsetup_r+0x14>
 80043c4:	6a03      	ldr	r3, [r0, #32]
 80043c6:	b90b      	cbnz	r3, 80043cc <__swsetup_r+0x14>
 80043c8:	f7ff fed2 	bl	8004170 <__sinit>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043d2:	0718      	lsls	r0, r3, #28
 80043d4:	d422      	bmi.n	800441c <__swsetup_r+0x64>
 80043d6:	06d9      	lsls	r1, r3, #27
 80043d8:	d407      	bmi.n	80043ea <__swsetup_r+0x32>
 80043da:	2309      	movs	r3, #9
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	e034      	b.n	8004454 <__swsetup_r+0x9c>
 80043ea:	0758      	lsls	r0, r3, #29
 80043ec:	d512      	bpl.n	8004414 <__swsetup_r+0x5c>
 80043ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f0:	b141      	cbz	r1, 8004404 <__swsetup_r+0x4c>
 80043f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f6:	4299      	cmp	r1, r3
 80043f8:	d002      	beq.n	8004400 <__swsetup_r+0x48>
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 ff2e 	bl	800525c <_free_r>
 8004400:	2300      	movs	r3, #0
 8004402:	6363      	str	r3, [r4, #52]	; 0x34
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f043 0308 	orr.w	r3, r3, #8
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	b94b      	cbnz	r3, 8004434 <__swsetup_r+0x7c>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442a:	d003      	beq.n	8004434 <__swsetup_r+0x7c>
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f001 fda8 	bl	8005f84 <__smakebuf_r>
 8004434:	89a0      	ldrh	r0, [r4, #12]
 8004436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800443a:	f010 0301 	ands.w	r3, r0, #1
 800443e:	d00a      	beq.n	8004456 <__swsetup_r+0x9e>
 8004440:	2300      	movs	r3, #0
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	6963      	ldr	r3, [r4, #20]
 8004446:	425b      	negs	r3, r3
 8004448:	61a3      	str	r3, [r4, #24]
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	b943      	cbnz	r3, 8004460 <__swsetup_r+0xa8>
 800444e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004452:	d1c4      	bne.n	80043de <__swsetup_r+0x26>
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	0781      	lsls	r1, r0, #30
 8004458:	bf58      	it	pl
 800445a:	6963      	ldrpl	r3, [r4, #20]
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	e7f4      	b.n	800444a <__swsetup_r+0x92>
 8004460:	2000      	movs	r0, #0
 8004462:	e7f7      	b.n	8004454 <__swsetup_r+0x9c>
 8004464:	20000064 	.word	0x20000064

08004468 <memset>:
 8004468:	4402      	add	r2, r0
 800446a:	4603      	mov	r3, r0
 800446c:	4293      	cmp	r3, r2
 800446e:	d100      	bne.n	8004472 <memset+0xa>
 8004470:	4770      	bx	lr
 8004472:	f803 1b01 	strb.w	r1, [r3], #1
 8004476:	e7f9      	b.n	800446c <memset+0x4>

08004478 <_localeconv_r>:
 8004478:	4800      	ldr	r0, [pc, #0]	; (800447c <_localeconv_r+0x4>)
 800447a:	4770      	bx	lr
 800447c:	20000158 	.word	0x20000158

08004480 <_close_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d06      	ldr	r5, [pc, #24]	; (800449c <_close_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	f7fd fb6b 	bl	8001b66 <_close>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_close_r+0x1a>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_close_r+0x1a>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	200003e4 	.word	0x200003e4

080044a0 <_lseek_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d07      	ldr	r5, [pc, #28]	; (80044c0 <_lseek_r+0x20>)
 80044a4:	4604      	mov	r4, r0
 80044a6:	4608      	mov	r0, r1
 80044a8:	4611      	mov	r1, r2
 80044aa:	2200      	movs	r2, #0
 80044ac:	602a      	str	r2, [r5, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f7fd fb80 	bl	8001bb4 <_lseek>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_lseek_r+0x1e>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_lseek_r+0x1e>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	200003e4 	.word	0x200003e4

080044c4 <_read_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4d07      	ldr	r5, [pc, #28]	; (80044e4 <_read_r+0x20>)
 80044c8:	4604      	mov	r4, r0
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	2200      	movs	r2, #0
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f7fd fb2a 	bl	8001b2c <_read>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_read_r+0x1e>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_read_r+0x1e>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	200003e4 	.word	0x200003e4

080044e8 <_write_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4d07      	ldr	r5, [pc, #28]	; (8004508 <_write_r+0x20>)
 80044ec:	4604      	mov	r4, r0
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	602a      	str	r2, [r5, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7fd f9ac 	bl	8001854 <_write>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_write_r+0x1e>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_write_r+0x1e>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	200003e4 	.word	0x200003e4

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	; (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000064 	.word	0x20000064

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4d0d      	ldr	r5, [pc, #52]	; (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2600      	movs	r6, #0
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4d0b      	ldr	r5, [pc, #44]	; (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	; (800455c <__libc_init_array+0x44>)
 800452c:	f002 f8ce 	bl	80066cc <_init>
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2600      	movs	r6, #0
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08006b18 	.word	0x08006b18
 8004554:	08006b18 	.word	0x08006b18
 8004558:	08006b18 	.word	0x08006b18
 800455c:	08006b1c 	.word	0x08006b1c

08004560 <__retarget_lock_init_recursive>:
 8004560:	4770      	bx	lr

08004562 <__retarget_lock_acquire_recursive>:
 8004562:	4770      	bx	lr

08004564 <__retarget_lock_release_recursive>:
 8004564:	4770      	bx	lr

08004566 <quorem>:
 8004566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6903      	ldr	r3, [r0, #16]
 800456c:	690c      	ldr	r4, [r1, #16]
 800456e:	42a3      	cmp	r3, r4
 8004570:	4607      	mov	r7, r0
 8004572:	db7e      	blt.n	8004672 <quorem+0x10c>
 8004574:	3c01      	subs	r4, #1
 8004576:	f101 0814 	add.w	r8, r1, #20
 800457a:	f100 0514 	add.w	r5, r0, #20
 800457e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800458c:	3301      	adds	r3, #1
 800458e:	429a      	cmp	r2, r3
 8004590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004598:	fbb2 f6f3 	udiv	r6, r2, r3
 800459c:	d331      	bcc.n	8004602 <quorem+0x9c>
 800459e:	f04f 0e00 	mov.w	lr, #0
 80045a2:	4640      	mov	r0, r8
 80045a4:	46ac      	mov	ip, r5
 80045a6:	46f2      	mov	sl, lr
 80045a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80045ac:	b293      	uxth	r3, r2
 80045ae:	fb06 e303 	mla	r3, r6, r3, lr
 80045b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045b6:	0c1a      	lsrs	r2, r3, #16
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	ebaa 0303 	sub.w	r3, sl, r3
 80045be:	f8dc a000 	ldr.w	sl, [ip]
 80045c2:	fa13 f38a 	uxtah	r3, r3, sl
 80045c6:	fb06 220e 	mla	r2, r6, lr, r2
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	9b00      	ldr	r3, [sp, #0]
 80045ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045d2:	b292      	uxth	r2, r2
 80045d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80045e0:	4581      	cmp	r9, r0
 80045e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045e6:	f84c 3b04 	str.w	r3, [ip], #4
 80045ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045ee:	d2db      	bcs.n	80045a8 <quorem+0x42>
 80045f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80045f4:	b92b      	cbnz	r3, 8004602 <quorem+0x9c>
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	3b04      	subs	r3, #4
 80045fa:	429d      	cmp	r5, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	d32c      	bcc.n	800465a <quorem+0xf4>
 8004600:	613c      	str	r4, [r7, #16]
 8004602:	4638      	mov	r0, r7
 8004604:	f001 f9a6 	bl	8005954 <__mcmp>
 8004608:	2800      	cmp	r0, #0
 800460a:	db22      	blt.n	8004652 <quorem+0xec>
 800460c:	3601      	adds	r6, #1
 800460e:	4629      	mov	r1, r5
 8004610:	2000      	movs	r0, #0
 8004612:	f858 2b04 	ldr.w	r2, [r8], #4
 8004616:	f8d1 c000 	ldr.w	ip, [r1]
 800461a:	b293      	uxth	r3, r2
 800461c:	1ac3      	subs	r3, r0, r3
 800461e:	0c12      	lsrs	r2, r2, #16
 8004620:	fa13 f38c 	uxtah	r3, r3, ip
 8004624:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800462c:	b29b      	uxth	r3, r3
 800462e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004632:	45c1      	cmp	r9, r8
 8004634:	f841 3b04 	str.w	r3, [r1], #4
 8004638:	ea4f 4022 	mov.w	r0, r2, asr #16
 800463c:	d2e9      	bcs.n	8004612 <quorem+0xac>
 800463e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004646:	b922      	cbnz	r2, 8004652 <quorem+0xec>
 8004648:	3b04      	subs	r3, #4
 800464a:	429d      	cmp	r5, r3
 800464c:	461a      	mov	r2, r3
 800464e:	d30a      	bcc.n	8004666 <quorem+0x100>
 8004650:	613c      	str	r4, [r7, #16]
 8004652:	4630      	mov	r0, r6
 8004654:	b003      	add	sp, #12
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	3b04      	subs	r3, #4
 800465e:	2a00      	cmp	r2, #0
 8004660:	d1ce      	bne.n	8004600 <quorem+0x9a>
 8004662:	3c01      	subs	r4, #1
 8004664:	e7c9      	b.n	80045fa <quorem+0x94>
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	3b04      	subs	r3, #4
 800466a:	2a00      	cmp	r2, #0
 800466c:	d1f0      	bne.n	8004650 <quorem+0xea>
 800466e:	3c01      	subs	r4, #1
 8004670:	e7eb      	b.n	800464a <quorem+0xe4>
 8004672:	2000      	movs	r0, #0
 8004674:	e7ee      	b.n	8004654 <quorem+0xee>
	...

08004678 <_dtoa_r>:
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	ed2d 8b04 	vpush	{d8-d9}
 8004680:	69c5      	ldr	r5, [r0, #28]
 8004682:	b093      	sub	sp, #76	; 0x4c
 8004684:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004688:	ec57 6b10 	vmov	r6, r7, d0
 800468c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004690:	9107      	str	r1, [sp, #28]
 8004692:	4604      	mov	r4, r0
 8004694:	920a      	str	r2, [sp, #40]	; 0x28
 8004696:	930d      	str	r3, [sp, #52]	; 0x34
 8004698:	b975      	cbnz	r5, 80046b8 <_dtoa_r+0x40>
 800469a:	2010      	movs	r0, #16
 800469c:	f000 fe2a 	bl	80052f4 <malloc>
 80046a0:	4602      	mov	r2, r0
 80046a2:	61e0      	str	r0, [r4, #28]
 80046a4:	b920      	cbnz	r0, 80046b0 <_dtoa_r+0x38>
 80046a6:	4bae      	ldr	r3, [pc, #696]	; (8004960 <_dtoa_r+0x2e8>)
 80046a8:	21ef      	movs	r1, #239	; 0xef
 80046aa:	48ae      	ldr	r0, [pc, #696]	; (8004964 <_dtoa_r+0x2ec>)
 80046ac:	f001 fce6 	bl	800607c <__assert_func>
 80046b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80046b4:	6005      	str	r5, [r0, #0]
 80046b6:	60c5      	str	r5, [r0, #12]
 80046b8:	69e3      	ldr	r3, [r4, #28]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	b151      	cbz	r1, 80046d4 <_dtoa_r+0x5c>
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	604a      	str	r2, [r1, #4]
 80046c2:	2301      	movs	r3, #1
 80046c4:	4093      	lsls	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 ff07 	bl	80054dc <_Bfree>
 80046ce:	69e3      	ldr	r3, [r4, #28]
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	1e3b      	subs	r3, r7, #0
 80046d6:	bfbb      	ittet	lt
 80046d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	9303      	strlt	r3, [sp, #12]
 80046de:	2300      	movge	r3, #0
 80046e0:	2201      	movlt	r2, #1
 80046e2:	bfac      	ite	ge
 80046e4:	f8c8 3000 	strge.w	r3, [r8]
 80046e8:	f8c8 2000 	strlt.w	r2, [r8]
 80046ec:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <_dtoa_r+0x2f0>)
 80046ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80046f2:	ea33 0308 	bics.w	r3, r3, r8
 80046f6:	d11b      	bne.n	8004730 <_dtoa_r+0xb8>
 80046f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004704:	4333      	orrs	r3, r6
 8004706:	f000 8593 	beq.w	8005230 <_dtoa_r+0xbb8>
 800470a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800470c:	b963      	cbnz	r3, 8004728 <_dtoa_r+0xb0>
 800470e:	4b97      	ldr	r3, [pc, #604]	; (800496c <_dtoa_r+0x2f4>)
 8004710:	e027      	b.n	8004762 <_dtoa_r+0xea>
 8004712:	4b97      	ldr	r3, [pc, #604]	; (8004970 <_dtoa_r+0x2f8>)
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	9800      	ldr	r0, [sp, #0]
 800471e:	b013      	add	sp, #76	; 0x4c
 8004720:	ecbd 8b04 	vpop	{d8-d9}
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	4b90      	ldr	r3, [pc, #576]	; (800496c <_dtoa_r+0x2f4>)
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	3303      	adds	r3, #3
 800472e:	e7f3      	b.n	8004718 <_dtoa_r+0xa0>
 8004730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004734:	2200      	movs	r2, #0
 8004736:	ec51 0b17 	vmov	r0, r1, d7
 800473a:	eeb0 8a47 	vmov.f32	s16, s14
 800473e:	eef0 8a67 	vmov.f32	s17, s15
 8004742:	2300      	movs	r3, #0
 8004744:	f7fc f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004748:	4681      	mov	r9, r0
 800474a:	b160      	cbz	r0, 8004766 <_dtoa_r+0xee>
 800474c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800474e:	2301      	movs	r3, #1
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8568 	beq.w	800522a <_dtoa_r+0xbb2>
 800475a:	4b86      	ldr	r3, [pc, #536]	; (8004974 <_dtoa_r+0x2fc>)
 800475c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	e7da      	b.n	800471c <_dtoa_r+0xa4>
 8004766:	aa10      	add	r2, sp, #64	; 0x40
 8004768:	a911      	add	r1, sp, #68	; 0x44
 800476a:	4620      	mov	r0, r4
 800476c:	eeb0 0a48 	vmov.f32	s0, s16
 8004770:	eef0 0a68 	vmov.f32	s1, s17
 8004774:	f001 f994 	bl	8005aa0 <__d2b>
 8004778:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800477c:	4682      	mov	sl, r0
 800477e:	2d00      	cmp	r5, #0
 8004780:	d07f      	beq.n	8004882 <_dtoa_r+0x20a>
 8004782:	ee18 3a90 	vmov	r3, s17
 8004786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800478e:	ec51 0b18 	vmov	r0, r1, d8
 8004792:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800479a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800479e:	4619      	mov	r1, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b75      	ldr	r3, [pc, #468]	; (8004978 <_dtoa_r+0x300>)
 80047a4:	f7fb fd70 	bl	8000288 <__aeabi_dsub>
 80047a8:	a367      	add	r3, pc, #412	; (adr r3, 8004948 <_dtoa_r+0x2d0>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb ff23 	bl	80005f8 <__aeabi_dmul>
 80047b2:	a367      	add	r3, pc, #412	; (adr r3, 8004950 <_dtoa_r+0x2d8>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fd68 	bl	800028c <__adddf3>
 80047bc:	4606      	mov	r6, r0
 80047be:	4628      	mov	r0, r5
 80047c0:	460f      	mov	r7, r1
 80047c2:	f7fb feaf 	bl	8000524 <__aeabi_i2d>
 80047c6:	a364      	add	r3, pc, #400	; (adr r3, 8004958 <_dtoa_r+0x2e0>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb ff14 	bl	80005f8 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4630      	mov	r0, r6
 80047d6:	4639      	mov	r1, r7
 80047d8:	f7fb fd58 	bl	800028c <__adddf3>
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	f7fc f9ba 	bl	8000b58 <__aeabi_d2iz>
 80047e4:	2200      	movs	r2, #0
 80047e6:	4683      	mov	fp, r0
 80047e8:	2300      	movs	r3, #0
 80047ea:	4630      	mov	r0, r6
 80047ec:	4639      	mov	r1, r7
 80047ee:	f7fc f975 	bl	8000adc <__aeabi_dcmplt>
 80047f2:	b148      	cbz	r0, 8004808 <_dtoa_r+0x190>
 80047f4:	4658      	mov	r0, fp
 80047f6:	f7fb fe95 	bl	8000524 <__aeabi_i2d>
 80047fa:	4632      	mov	r2, r6
 80047fc:	463b      	mov	r3, r7
 80047fe:	f7fc f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8004802:	b908      	cbnz	r0, 8004808 <_dtoa_r+0x190>
 8004804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004808:	f1bb 0f16 	cmp.w	fp, #22
 800480c:	d857      	bhi.n	80048be <_dtoa_r+0x246>
 800480e:	4b5b      	ldr	r3, [pc, #364]	; (800497c <_dtoa_r+0x304>)
 8004810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	ec51 0b18 	vmov	r0, r1, d8
 800481c:	f7fc f95e 	bl	8000adc <__aeabi_dcmplt>
 8004820:	2800      	cmp	r0, #0
 8004822:	d04e      	beq.n	80048c2 <_dtoa_r+0x24a>
 8004824:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004828:	2300      	movs	r3, #0
 800482a:	930c      	str	r3, [sp, #48]	; 0x30
 800482c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800482e:	1b5b      	subs	r3, r3, r5
 8004830:	1e5a      	subs	r2, r3, #1
 8004832:	bf45      	ittet	mi
 8004834:	f1c3 0301 	rsbmi	r3, r3, #1
 8004838:	9305      	strmi	r3, [sp, #20]
 800483a:	2300      	movpl	r3, #0
 800483c:	2300      	movmi	r3, #0
 800483e:	9206      	str	r2, [sp, #24]
 8004840:	bf54      	ite	pl
 8004842:	9305      	strpl	r3, [sp, #20]
 8004844:	9306      	strmi	r3, [sp, #24]
 8004846:	f1bb 0f00 	cmp.w	fp, #0
 800484a:	db3c      	blt.n	80048c6 <_dtoa_r+0x24e>
 800484c:	9b06      	ldr	r3, [sp, #24]
 800484e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004852:	445b      	add	r3, fp
 8004854:	9306      	str	r3, [sp, #24]
 8004856:	2300      	movs	r3, #0
 8004858:	9308      	str	r3, [sp, #32]
 800485a:	9b07      	ldr	r3, [sp, #28]
 800485c:	2b09      	cmp	r3, #9
 800485e:	d868      	bhi.n	8004932 <_dtoa_r+0x2ba>
 8004860:	2b05      	cmp	r3, #5
 8004862:	bfc4      	itt	gt
 8004864:	3b04      	subgt	r3, #4
 8004866:	9307      	strgt	r3, [sp, #28]
 8004868:	9b07      	ldr	r3, [sp, #28]
 800486a:	f1a3 0302 	sub.w	r3, r3, #2
 800486e:	bfcc      	ite	gt
 8004870:	2500      	movgt	r5, #0
 8004872:	2501      	movle	r5, #1
 8004874:	2b03      	cmp	r3, #3
 8004876:	f200 8085 	bhi.w	8004984 <_dtoa_r+0x30c>
 800487a:	e8df f003 	tbb	[pc, r3]
 800487e:	3b2e      	.short	0x3b2e
 8004880:	5839      	.short	0x5839
 8004882:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004886:	441d      	add	r5, r3
 8004888:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800488c:	2b20      	cmp	r3, #32
 800488e:	bfc1      	itttt	gt
 8004890:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004894:	fa08 f803 	lslgt.w	r8, r8, r3
 8004898:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800489c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80048a0:	bfd6      	itet	le
 80048a2:	f1c3 0320 	rsble	r3, r3, #32
 80048a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80048aa:	fa06 f003 	lslle.w	r0, r6, r3
 80048ae:	f7fb fe29 	bl	8000504 <__aeabi_ui2d>
 80048b2:	2201      	movs	r2, #1
 80048b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80048b8:	3d01      	subs	r5, #1
 80048ba:	920e      	str	r2, [sp, #56]	; 0x38
 80048bc:	e76f      	b.n	800479e <_dtoa_r+0x126>
 80048be:	2301      	movs	r3, #1
 80048c0:	e7b3      	b.n	800482a <_dtoa_r+0x1b2>
 80048c2:	900c      	str	r0, [sp, #48]	; 0x30
 80048c4:	e7b2      	b.n	800482c <_dtoa_r+0x1b4>
 80048c6:	9b05      	ldr	r3, [sp, #20]
 80048c8:	eba3 030b 	sub.w	r3, r3, fp
 80048cc:	9305      	str	r3, [sp, #20]
 80048ce:	f1cb 0300 	rsb	r3, fp, #0
 80048d2:	9308      	str	r3, [sp, #32]
 80048d4:	2300      	movs	r3, #0
 80048d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048d8:	e7bf      	b.n	800485a <_dtoa_r+0x1e2>
 80048da:	2300      	movs	r3, #0
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc52      	bgt.n	800498a <_dtoa_r+0x312>
 80048e4:	2301      	movs	r3, #1
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	461a      	mov	r2, r3
 80048ec:	920a      	str	r2, [sp, #40]	; 0x28
 80048ee:	e00b      	b.n	8004908 <_dtoa_r+0x290>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e7f3      	b.n	80048dc <_dtoa_r+0x264>
 80048f4:	2300      	movs	r3, #0
 80048f6:	9309      	str	r3, [sp, #36]	; 0x24
 80048f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fa:	445b      	add	r3, fp
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	3301      	adds	r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	bfb8      	it	lt
 8004906:	2301      	movlt	r3, #1
 8004908:	69e0      	ldr	r0, [r4, #28]
 800490a:	2100      	movs	r1, #0
 800490c:	2204      	movs	r2, #4
 800490e:	f102 0614 	add.w	r6, r2, #20
 8004912:	429e      	cmp	r6, r3
 8004914:	d93d      	bls.n	8004992 <_dtoa_r+0x31a>
 8004916:	6041      	str	r1, [r0, #4]
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fd9f 	bl	800545c <_Balloc>
 800491e:	9000      	str	r0, [sp, #0]
 8004920:	2800      	cmp	r0, #0
 8004922:	d139      	bne.n	8004998 <_dtoa_r+0x320>
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <_dtoa_r+0x308>)
 8004926:	4602      	mov	r2, r0
 8004928:	f240 11af 	movw	r1, #431	; 0x1af
 800492c:	e6bd      	b.n	80046aa <_dtoa_r+0x32>
 800492e:	2301      	movs	r3, #1
 8004930:	e7e1      	b.n	80048f6 <_dtoa_r+0x27e>
 8004932:	2501      	movs	r5, #1
 8004934:	2300      	movs	r3, #0
 8004936:	9307      	str	r3, [sp, #28]
 8004938:	9509      	str	r5, [sp, #36]	; 0x24
 800493a:	f04f 33ff 	mov.w	r3, #4294967295
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	9304      	str	r3, [sp, #16]
 8004942:	2200      	movs	r2, #0
 8004944:	2312      	movs	r3, #18
 8004946:	e7d1      	b.n	80048ec <_dtoa_r+0x274>
 8004948:	636f4361 	.word	0x636f4361
 800494c:	3fd287a7 	.word	0x3fd287a7
 8004950:	8b60c8b3 	.word	0x8b60c8b3
 8004954:	3fc68a28 	.word	0x3fc68a28
 8004958:	509f79fb 	.word	0x509f79fb
 800495c:	3fd34413 	.word	0x3fd34413
 8004960:	0800676d 	.word	0x0800676d
 8004964:	08006784 	.word	0x08006784
 8004968:	7ff00000 	.word	0x7ff00000
 800496c:	08006769 	.word	0x08006769
 8004970:	08006760 	.word	0x08006760
 8004974:	0800673d 	.word	0x0800673d
 8004978:	3ff80000 	.word	0x3ff80000
 800497c:	08006870 	.word	0x08006870
 8004980:	080067dc 	.word	0x080067dc
 8004984:	2301      	movs	r3, #1
 8004986:	9309      	str	r3, [sp, #36]	; 0x24
 8004988:	e7d7      	b.n	800493a <_dtoa_r+0x2c2>
 800498a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	e7ba      	b.n	8004908 <_dtoa_r+0x290>
 8004992:	3101      	adds	r1, #1
 8004994:	0052      	lsls	r2, r2, #1
 8004996:	e7ba      	b.n	800490e <_dtoa_r+0x296>
 8004998:	69e3      	ldr	r3, [r4, #28]
 800499a:	9a00      	ldr	r2, [sp, #0]
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	2b0e      	cmp	r3, #14
 80049a2:	f200 80a8 	bhi.w	8004af6 <_dtoa_r+0x47e>
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	f000 80a5 	beq.w	8004af6 <_dtoa_r+0x47e>
 80049ac:	f1bb 0f00 	cmp.w	fp, #0
 80049b0:	dd38      	ble.n	8004a24 <_dtoa_r+0x3ac>
 80049b2:	4bc0      	ldr	r3, [pc, #768]	; (8004cb4 <_dtoa_r+0x63c>)
 80049b4:	f00b 020f 	and.w	r2, fp, #15
 80049b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80049c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80049c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80049c8:	d019      	beq.n	80049fe <_dtoa_r+0x386>
 80049ca:	4bbb      	ldr	r3, [pc, #748]	; (8004cb8 <_dtoa_r+0x640>)
 80049cc:	ec51 0b18 	vmov	r0, r1, d8
 80049d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049d4:	f7fb ff3a 	bl	800084c <__aeabi_ddiv>
 80049d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049dc:	f008 080f 	and.w	r8, r8, #15
 80049e0:	2503      	movs	r5, #3
 80049e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004cb8 <_dtoa_r+0x640>
 80049e6:	f1b8 0f00 	cmp.w	r8, #0
 80049ea:	d10a      	bne.n	8004a02 <_dtoa_r+0x38a>
 80049ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049f0:	4632      	mov	r2, r6
 80049f2:	463b      	mov	r3, r7
 80049f4:	f7fb ff2a 	bl	800084c <__aeabi_ddiv>
 80049f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049fc:	e02b      	b.n	8004a56 <_dtoa_r+0x3de>
 80049fe:	2502      	movs	r5, #2
 8004a00:	e7ef      	b.n	80049e2 <_dtoa_r+0x36a>
 8004a02:	f018 0f01 	tst.w	r8, #1
 8004a06:	d008      	beq.n	8004a1a <_dtoa_r+0x3a2>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004a10:	f7fb fdf2 	bl	80005f8 <__aeabi_dmul>
 8004a14:	3501      	adds	r5, #1
 8004a16:	4606      	mov	r6, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a1e:	f109 0908 	add.w	r9, r9, #8
 8004a22:	e7e0      	b.n	80049e6 <_dtoa_r+0x36e>
 8004a24:	f000 809f 	beq.w	8004b66 <_dtoa_r+0x4ee>
 8004a28:	f1cb 0600 	rsb	r6, fp, #0
 8004a2c:	4ba1      	ldr	r3, [pc, #644]	; (8004cb4 <_dtoa_r+0x63c>)
 8004a2e:	4fa2      	ldr	r7, [pc, #648]	; (8004cb8 <_dtoa_r+0x640>)
 8004a30:	f006 020f 	and.w	r2, r6, #15
 8004a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	ec51 0b18 	vmov	r0, r1, d8
 8004a40:	f7fb fdda 	bl	80005f8 <__aeabi_dmul>
 8004a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a48:	1136      	asrs	r6, r6, #4
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2502      	movs	r5, #2
 8004a4e:	2e00      	cmp	r6, #0
 8004a50:	d17e      	bne.n	8004b50 <_dtoa_r+0x4d8>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d0      	bne.n	80049f8 <_dtoa_r+0x380>
 8004a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8084 	beq.w	8004b6a <_dtoa_r+0x4f2>
 8004a62:	4b96      	ldr	r3, [pc, #600]	; (8004cbc <_dtoa_r+0x644>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	f7fc f837 	bl	8000adc <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d07b      	beq.n	8004b6a <_dtoa_r+0x4f2>
 8004a72:	9b04      	ldr	r3, [sp, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d078      	beq.n	8004b6a <_dtoa_r+0x4f2>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dd39      	ble.n	8004af2 <_dtoa_r+0x47a>
 8004a7e:	4b90      	ldr	r3, [pc, #576]	; (8004cc0 <_dtoa_r+0x648>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	f7fb fdb7 	bl	80005f8 <__aeabi_dmul>
 8004a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a8e:	9e01      	ldr	r6, [sp, #4]
 8004a90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004a94:	3501      	adds	r5, #1
 8004a96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7fb fd42 	bl	8000524 <__aeabi_i2d>
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	f7fb fda8 	bl	80005f8 <__aeabi_dmul>
 8004aa8:	4b86      	ldr	r3, [pc, #536]	; (8004cc4 <_dtoa_r+0x64c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f7fb fbee 	bl	800028c <__adddf3>
 8004ab0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	d158      	bne.n	8004b70 <_dtoa_r+0x4f8>
 8004abe:	4b82      	ldr	r3, [pc, #520]	; (8004cc8 <_dtoa_r+0x650>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb fbdf 	bl	8000288 <__aeabi_dsub>
 8004aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ace:	4680      	mov	r8, r0
 8004ad0:	4689      	mov	r9, r1
 8004ad2:	f7fc f821 	bl	8000b18 <__aeabi_dcmpgt>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	f040 8296 	bne.w	8005008 <_dtoa_r+0x990>
 8004adc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	f7fb fff8 	bl	8000adc <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f040 8289 	bne.w	8005004 <_dtoa_r+0x98c>
 8004af2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f2c0 814e 	blt.w	8004d9a <_dtoa_r+0x722>
 8004afe:	f1bb 0f0e 	cmp.w	fp, #14
 8004b02:	f300 814a 	bgt.w	8004d9a <_dtoa_r+0x722>
 8004b06:	4b6b      	ldr	r3, [pc, #428]	; (8004cb4 <_dtoa_r+0x63c>)
 8004b08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f280 80dc 	bge.w	8004cd0 <_dtoa_r+0x658>
 8004b18:	9b04      	ldr	r3, [sp, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f300 80d8 	bgt.w	8004cd0 <_dtoa_r+0x658>
 8004b20:	f040 826f 	bne.w	8005002 <_dtoa_r+0x98a>
 8004b24:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <_dtoa_r+0x650>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	f7fb fd64 	bl	80005f8 <__aeabi_dmul>
 8004b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b34:	f7fb ffe6 	bl	8000b04 <__aeabi_dcmpge>
 8004b38:	9e04      	ldr	r6, [sp, #16]
 8004b3a:	4637      	mov	r7, r6
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f040 8245 	bne.w	8004fcc <_dtoa_r+0x954>
 8004b42:	9d00      	ldr	r5, [sp, #0]
 8004b44:	2331      	movs	r3, #49	; 0x31
 8004b46:	f805 3b01 	strb.w	r3, [r5], #1
 8004b4a:	f10b 0b01 	add.w	fp, fp, #1
 8004b4e:	e241      	b.n	8004fd4 <_dtoa_r+0x95c>
 8004b50:	07f2      	lsls	r2, r6, #31
 8004b52:	d505      	bpl.n	8004b60 <_dtoa_r+0x4e8>
 8004b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b58:	f7fb fd4e 	bl	80005f8 <__aeabi_dmul>
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	2301      	movs	r3, #1
 8004b60:	1076      	asrs	r6, r6, #1
 8004b62:	3708      	adds	r7, #8
 8004b64:	e773      	b.n	8004a4e <_dtoa_r+0x3d6>
 8004b66:	2502      	movs	r5, #2
 8004b68:	e775      	b.n	8004a56 <_dtoa_r+0x3de>
 8004b6a:	9e04      	ldr	r6, [sp, #16]
 8004b6c:	465f      	mov	r7, fp
 8004b6e:	e792      	b.n	8004a96 <_dtoa_r+0x41e>
 8004b70:	9900      	ldr	r1, [sp, #0]
 8004b72:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <_dtoa_r+0x63c>)
 8004b74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b78:	4431      	add	r1, r6
 8004b7a:	9102      	str	r1, [sp, #8]
 8004b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b7e:	eeb0 9a47 	vmov.f32	s18, s14
 8004b82:	eef0 9a67 	vmov.f32	s19, s15
 8004b86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d044      	beq.n	8004c1c <_dtoa_r+0x5a4>
 8004b92:	494e      	ldr	r1, [pc, #312]	; (8004ccc <_dtoa_r+0x654>)
 8004b94:	2000      	movs	r0, #0
 8004b96:	f7fb fe59 	bl	800084c <__aeabi_ddiv>
 8004b9a:	ec53 2b19 	vmov	r2, r3, d9
 8004b9e:	f7fb fb73 	bl	8000288 <__aeabi_dsub>
 8004ba2:	9d00      	ldr	r5, [sp, #0]
 8004ba4:	ec41 0b19 	vmov	d9, r0, r1
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4640      	mov	r0, r8
 8004bac:	f7fb ffd4 	bl	8000b58 <__aeabi_d2iz>
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	f7fb fcb7 	bl	8000524 <__aeabi_i2d>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb fb63 	bl	8000288 <__aeabi_dsub>
 8004bc2:	3630      	adds	r6, #48	; 0x30
 8004bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8004bc8:	ec53 2b19 	vmov	r2, r3, d9
 8004bcc:	4680      	mov	r8, r0
 8004bce:	4689      	mov	r9, r1
 8004bd0:	f7fb ff84 	bl	8000adc <__aeabi_dcmplt>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d164      	bne.n	8004ca2 <_dtoa_r+0x62a>
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	4937      	ldr	r1, [pc, #220]	; (8004cbc <_dtoa_r+0x644>)
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fb fb52 	bl	8000288 <__aeabi_dsub>
 8004be4:	ec53 2b19 	vmov	r2, r3, d9
 8004be8:	f7fb ff78 	bl	8000adc <__aeabi_dcmplt>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f040 80b6 	bne.w	8004d5e <_dtoa_r+0x6e6>
 8004bf2:	9b02      	ldr	r3, [sp, #8]
 8004bf4:	429d      	cmp	r5, r3
 8004bf6:	f43f af7c 	beq.w	8004af2 <_dtoa_r+0x47a>
 8004bfa:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <_dtoa_r+0x648>)
 8004bfc:	ec51 0b19 	vmov	r0, r1, d9
 8004c00:	2200      	movs	r2, #0
 8004c02:	f7fb fcf9 	bl	80005f8 <__aeabi_dmul>
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <_dtoa_r+0x648>)
 8004c08:	ec41 0b19 	vmov	d9, r0, r1
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4649      	mov	r1, r9
 8004c12:	f7fb fcf1 	bl	80005f8 <__aeabi_dmul>
 8004c16:	4680      	mov	r8, r0
 8004c18:	4689      	mov	r9, r1
 8004c1a:	e7c5      	b.n	8004ba8 <_dtoa_r+0x530>
 8004c1c:	ec51 0b17 	vmov	r0, r1, d7
 8004c20:	f7fb fcea 	bl	80005f8 <__aeabi_dmul>
 8004c24:	9b02      	ldr	r3, [sp, #8]
 8004c26:	9d00      	ldr	r5, [sp, #0]
 8004c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c2a:	ec41 0b19 	vmov	d9, r0, r1
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7fb ff91 	bl	8000b58 <__aeabi_d2iz>
 8004c36:	4606      	mov	r6, r0
 8004c38:	f7fb fc74 	bl	8000524 <__aeabi_i2d>
 8004c3c:	3630      	adds	r6, #48	; 0x30
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb fb1f 	bl	8000288 <__aeabi_dsub>
 8004c4a:	f805 6b01 	strb.w	r6, [r5], #1
 8004c4e:	9b02      	ldr	r3, [sp, #8]
 8004c50:	429d      	cmp	r5, r3
 8004c52:	4680      	mov	r8, r0
 8004c54:	4689      	mov	r9, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	d124      	bne.n	8004ca6 <_dtoa_r+0x62e>
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <_dtoa_r+0x654>)
 8004c5e:	ec51 0b19 	vmov	r0, r1, d9
 8004c62:	f7fb fb13 	bl	800028c <__adddf3>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	f7fb ff53 	bl	8000b18 <__aeabi_dcmpgt>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d173      	bne.n	8004d5e <_dtoa_r+0x6e6>
 8004c76:	ec53 2b19 	vmov	r2, r3, d9
 8004c7a:	4914      	ldr	r1, [pc, #80]	; (8004ccc <_dtoa_r+0x654>)
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fb fb03 	bl	8000288 <__aeabi_dsub>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4640      	mov	r0, r8
 8004c88:	4649      	mov	r1, r9
 8004c8a:	f7fb ff27 	bl	8000adc <__aeabi_dcmplt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	f43f af2f 	beq.w	8004af2 <_dtoa_r+0x47a>
 8004c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004c96:	1e6b      	subs	r3, r5, #1
 8004c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c9e:	2b30      	cmp	r3, #48	; 0x30
 8004ca0:	d0f8      	beq.n	8004c94 <_dtoa_r+0x61c>
 8004ca2:	46bb      	mov	fp, r7
 8004ca4:	e04a      	b.n	8004d3c <_dtoa_r+0x6c4>
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <_dtoa_r+0x648>)
 8004ca8:	f7fb fca6 	bl	80005f8 <__aeabi_dmul>
 8004cac:	4680      	mov	r8, r0
 8004cae:	4689      	mov	r9, r1
 8004cb0:	e7bd      	b.n	8004c2e <_dtoa_r+0x5b6>
 8004cb2:	bf00      	nop
 8004cb4:	08006870 	.word	0x08006870
 8004cb8:	08006848 	.word	0x08006848
 8004cbc:	3ff00000 	.word	0x3ff00000
 8004cc0:	40240000 	.word	0x40240000
 8004cc4:	401c0000 	.word	0x401c0000
 8004cc8:	40140000 	.word	0x40140000
 8004ccc:	3fe00000 	.word	0x3fe00000
 8004cd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cd4:	9d00      	ldr	r5, [sp, #0]
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	464b      	mov	r3, r9
 8004cda:	4630      	mov	r0, r6
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fdb5 	bl	800084c <__aeabi_ddiv>
 8004ce2:	f7fb ff39 	bl	8000b58 <__aeabi_d2iz>
 8004ce6:	9001      	str	r0, [sp, #4]
 8004ce8:	f7fb fc1c 	bl	8000524 <__aeabi_i2d>
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	f7fb fc82 	bl	80005f8 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fac4 	bl	8000288 <__aeabi_dsub>
 8004d00:	9e01      	ldr	r6, [sp, #4]
 8004d02:	9f04      	ldr	r7, [sp, #16]
 8004d04:	3630      	adds	r6, #48	; 0x30
 8004d06:	f805 6b01 	strb.w	r6, [r5], #1
 8004d0a:	9e00      	ldr	r6, [sp, #0]
 8004d0c:	1bae      	subs	r6, r5, r6
 8004d0e:	42b7      	cmp	r7, r6
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	d134      	bne.n	8004d80 <_dtoa_r+0x708>
 8004d16:	f7fb fab9 	bl	800028c <__adddf3>
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	4606      	mov	r6, r0
 8004d20:	460f      	mov	r7, r1
 8004d22:	f7fb fef9 	bl	8000b18 <__aeabi_dcmpgt>
 8004d26:	b9c8      	cbnz	r0, 8004d5c <_dtoa_r+0x6e4>
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d34:	b110      	cbz	r0, 8004d3c <_dtoa_r+0x6c4>
 8004d36:	9b01      	ldr	r3, [sp, #4]
 8004d38:	07db      	lsls	r3, r3, #31
 8004d3a:	d40f      	bmi.n	8004d5c <_dtoa_r+0x6e4>
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 fbcc 	bl	80054dc <_Bfree>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d48:	702b      	strb	r3, [r5, #0]
 8004d4a:	f10b 0301 	add.w	r3, fp, #1
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f43f ace2 	beq.w	800471c <_dtoa_r+0xa4>
 8004d58:	601d      	str	r5, [r3, #0]
 8004d5a:	e4df      	b.n	800471c <_dtoa_r+0xa4>
 8004d5c:	465f      	mov	r7, fp
 8004d5e:	462b      	mov	r3, r5
 8004d60:	461d      	mov	r5, r3
 8004d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d66:	2a39      	cmp	r2, #57	; 0x39
 8004d68:	d106      	bne.n	8004d78 <_dtoa_r+0x700>
 8004d6a:	9a00      	ldr	r2, [sp, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1f7      	bne.n	8004d60 <_dtoa_r+0x6e8>
 8004d70:	9900      	ldr	r1, [sp, #0]
 8004d72:	2230      	movs	r2, #48	; 0x30
 8004d74:	3701      	adds	r7, #1
 8004d76:	700a      	strb	r2, [r1, #0]
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	3201      	adds	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e790      	b.n	8004ca2 <_dtoa_r+0x62a>
 8004d80:	4ba3      	ldr	r3, [pc, #652]	; (8005010 <_dtoa_r+0x998>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	f7fb fc38 	bl	80005f8 <__aeabi_dmul>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	460f      	mov	r7, r1
 8004d90:	f7fb fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d09e      	beq.n	8004cd6 <_dtoa_r+0x65e>
 8004d98:	e7d0      	b.n	8004d3c <_dtoa_r+0x6c4>
 8004d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d9c:	2a00      	cmp	r2, #0
 8004d9e:	f000 80ca 	beq.w	8004f36 <_dtoa_r+0x8be>
 8004da2:	9a07      	ldr	r2, [sp, #28]
 8004da4:	2a01      	cmp	r2, #1
 8004da6:	f300 80ad 	bgt.w	8004f04 <_dtoa_r+0x88c>
 8004daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	f000 80a5 	beq.w	8004efc <_dtoa_r+0x884>
 8004db2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004db6:	9e08      	ldr	r6, [sp, #32]
 8004db8:	9d05      	ldr	r5, [sp, #20]
 8004dba:	9a05      	ldr	r2, [sp, #20]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	9205      	str	r2, [sp, #20]
 8004dc0:	9a06      	ldr	r2, [sp, #24]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	441a      	add	r2, r3
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	9206      	str	r2, [sp, #24]
 8004dca:	f000 fc3d 	bl	8005648 <__i2b>
 8004dce:	4607      	mov	r7, r0
 8004dd0:	b165      	cbz	r5, 8004dec <_dtoa_r+0x774>
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	dd09      	ble.n	8004dec <_dtoa_r+0x774>
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	9a05      	ldr	r2, [sp, #20]
 8004ddc:	bfa8      	it	ge
 8004dde:	462b      	movge	r3, r5
 8004de0:	1ad2      	subs	r2, r2, r3
 8004de2:	9205      	str	r2, [sp, #20]
 8004de4:	9a06      	ldr	r2, [sp, #24]
 8004de6:	1aed      	subs	r5, r5, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	9306      	str	r3, [sp, #24]
 8004dec:	9b08      	ldr	r3, [sp, #32]
 8004dee:	b1f3      	cbz	r3, 8004e2e <_dtoa_r+0x7b6>
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a3 	beq.w	8004f3e <_dtoa_r+0x8c6>
 8004df8:	2e00      	cmp	r6, #0
 8004dfa:	dd10      	ble.n	8004e1e <_dtoa_r+0x7a6>
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	4632      	mov	r2, r6
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 fce1 	bl	80057c8 <__pow5mult>
 8004e06:	4652      	mov	r2, sl
 8004e08:	4601      	mov	r1, r0
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 fc31 	bl	8005674 <__multiply>
 8004e12:	4651      	mov	r1, sl
 8004e14:	4680      	mov	r8, r0
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 fb60 	bl	80054dc <_Bfree>
 8004e1c:	46c2      	mov	sl, r8
 8004e1e:	9b08      	ldr	r3, [sp, #32]
 8004e20:	1b9a      	subs	r2, r3, r6
 8004e22:	d004      	beq.n	8004e2e <_dtoa_r+0x7b6>
 8004e24:	4651      	mov	r1, sl
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 fcce 	bl	80057c8 <__pow5mult>
 8004e2c:	4682      	mov	sl, r0
 8004e2e:	2101      	movs	r1, #1
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 fc09 	bl	8005648 <__i2b>
 8004e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	f340 8081 	ble.w	8004f42 <_dtoa_r+0x8ca>
 8004e40:	461a      	mov	r2, r3
 8004e42:	4601      	mov	r1, r0
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fcbf 	bl	80057c8 <__pow5mult>
 8004e4a:	9b07      	ldr	r3, [sp, #28]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	4606      	mov	r6, r0
 8004e50:	dd7a      	ble.n	8004f48 <_dtoa_r+0x8d0>
 8004e52:	f04f 0800 	mov.w	r8, #0
 8004e56:	6933      	ldr	r3, [r6, #16]
 8004e58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e5c:	6918      	ldr	r0, [r3, #16]
 8004e5e:	f000 fba5 	bl	80055ac <__hi0bits>
 8004e62:	f1c0 0020 	rsb	r0, r0, #32
 8004e66:	9b06      	ldr	r3, [sp, #24]
 8004e68:	4418      	add	r0, r3
 8004e6a:	f010 001f 	ands.w	r0, r0, #31
 8004e6e:	f000 8094 	beq.w	8004f9a <_dtoa_r+0x922>
 8004e72:	f1c0 0320 	rsb	r3, r0, #32
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	f340 8085 	ble.w	8004f86 <_dtoa_r+0x90e>
 8004e7c:	9b05      	ldr	r3, [sp, #20]
 8004e7e:	f1c0 001c 	rsb	r0, r0, #28
 8004e82:	4403      	add	r3, r0
 8004e84:	9305      	str	r3, [sp, #20]
 8004e86:	9b06      	ldr	r3, [sp, #24]
 8004e88:	4403      	add	r3, r0
 8004e8a:	4405      	add	r5, r0
 8004e8c:	9306      	str	r3, [sp, #24]
 8004e8e:	9b05      	ldr	r3, [sp, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	dd05      	ble.n	8004ea0 <_dtoa_r+0x828>
 8004e94:	4651      	mov	r1, sl
 8004e96:	461a      	mov	r2, r3
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 fcef 	bl	800587c <__lshift>
 8004e9e:	4682      	mov	sl, r0
 8004ea0:	9b06      	ldr	r3, [sp, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	dd05      	ble.n	8004eb2 <_dtoa_r+0x83a>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 fce6 	bl	800587c <__lshift>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d072      	beq.n	8004f9e <_dtoa_r+0x926>
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4650      	mov	r0, sl
 8004ebc:	f000 fd4a 	bl	8005954 <__mcmp>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	da6c      	bge.n	8004f9e <_dtoa_r+0x926>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	220a      	movs	r2, #10
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 fb28 	bl	8005520 <__multadd>
 8004ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 81b0 	beq.w	800523e <_dtoa_r+0xbc6>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fb1b 	bl	8005520 <__multadd>
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	4607      	mov	r7, r0
 8004ef0:	f300 8096 	bgt.w	8005020 <_dtoa_r+0x9a8>
 8004ef4:	9b07      	ldr	r3, [sp, #28]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	dc59      	bgt.n	8004fae <_dtoa_r+0x936>
 8004efa:	e091      	b.n	8005020 <_dtoa_r+0x9a8>
 8004efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f02:	e758      	b.n	8004db6 <_dtoa_r+0x73e>
 8004f04:	9b04      	ldr	r3, [sp, #16]
 8004f06:	1e5e      	subs	r6, r3, #1
 8004f08:	9b08      	ldr	r3, [sp, #32]
 8004f0a:	42b3      	cmp	r3, r6
 8004f0c:	bfbf      	itttt	lt
 8004f0e:	9b08      	ldrlt	r3, [sp, #32]
 8004f10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004f12:	9608      	strlt	r6, [sp, #32]
 8004f14:	1af3      	sublt	r3, r6, r3
 8004f16:	bfb4      	ite	lt
 8004f18:	18d2      	addlt	r2, r2, r3
 8004f1a:	1b9e      	subge	r6, r3, r6
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	bfbc      	itt	lt
 8004f20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004f22:	2600      	movlt	r6, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfb7      	itett	lt
 8004f28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004f2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004f30:	1a9d      	sublt	r5, r3, r2
 8004f32:	2300      	movlt	r3, #0
 8004f34:	e741      	b.n	8004dba <_dtoa_r+0x742>
 8004f36:	9e08      	ldr	r6, [sp, #32]
 8004f38:	9d05      	ldr	r5, [sp, #20]
 8004f3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f3c:	e748      	b.n	8004dd0 <_dtoa_r+0x758>
 8004f3e:	9a08      	ldr	r2, [sp, #32]
 8004f40:	e770      	b.n	8004e24 <_dtoa_r+0x7ac>
 8004f42:	9b07      	ldr	r3, [sp, #28]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	dc19      	bgt.n	8004f7c <_dtoa_r+0x904>
 8004f48:	9b02      	ldr	r3, [sp, #8]
 8004f4a:	b9bb      	cbnz	r3, 8004f7c <_dtoa_r+0x904>
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f52:	b99b      	cbnz	r3, 8004f7c <_dtoa_r+0x904>
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	0d1b      	lsrs	r3, r3, #20
 8004f5c:	051b      	lsls	r3, r3, #20
 8004f5e:	b183      	cbz	r3, 8004f82 <_dtoa_r+0x90a>
 8004f60:	9b05      	ldr	r3, [sp, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	9305      	str	r3, [sp, #20]
 8004f66:	9b06      	ldr	r3, [sp, #24]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	9306      	str	r3, [sp, #24]
 8004f6c:	f04f 0801 	mov.w	r8, #1
 8004f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f47f af6f 	bne.w	8004e56 <_dtoa_r+0x7de>
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e774      	b.n	8004e66 <_dtoa_r+0x7ee>
 8004f7c:	f04f 0800 	mov.w	r8, #0
 8004f80:	e7f6      	b.n	8004f70 <_dtoa_r+0x8f8>
 8004f82:	4698      	mov	r8, r3
 8004f84:	e7f4      	b.n	8004f70 <_dtoa_r+0x8f8>
 8004f86:	d082      	beq.n	8004e8e <_dtoa_r+0x816>
 8004f88:	9a05      	ldr	r2, [sp, #20]
 8004f8a:	331c      	adds	r3, #28
 8004f8c:	441a      	add	r2, r3
 8004f8e:	9205      	str	r2, [sp, #20]
 8004f90:	9a06      	ldr	r2, [sp, #24]
 8004f92:	441a      	add	r2, r3
 8004f94:	441d      	add	r5, r3
 8004f96:	9206      	str	r2, [sp, #24]
 8004f98:	e779      	b.n	8004e8e <_dtoa_r+0x816>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	e7f4      	b.n	8004f88 <_dtoa_r+0x910>
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc37      	bgt.n	8005014 <_dtoa_r+0x99c>
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	dd34      	ble.n	8005014 <_dtoa_r+0x99c>
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	9b01      	ldr	r3, [sp, #4]
 8004fb0:	b963      	cbnz	r3, 8004fcc <_dtoa_r+0x954>
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fab2 	bl	8005520 <__multadd>
 8004fbc:	4601      	mov	r1, r0
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	f000 fcc7 	bl	8005954 <__mcmp>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	f73f adbb 	bgt.w	8004b42 <_dtoa_r+0x4ca>
 8004fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fce:	9d00      	ldr	r5, [sp, #0]
 8004fd0:	ea6f 0b03 	mvn.w	fp, r3
 8004fd4:	f04f 0800 	mov.w	r8, #0
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 fa7e 	bl	80054dc <_Bfree>
 8004fe0:	2f00      	cmp	r7, #0
 8004fe2:	f43f aeab 	beq.w	8004d3c <_dtoa_r+0x6c4>
 8004fe6:	f1b8 0f00 	cmp.w	r8, #0
 8004fea:	d005      	beq.n	8004ff8 <_dtoa_r+0x980>
 8004fec:	45b8      	cmp	r8, r7
 8004fee:	d003      	beq.n	8004ff8 <_dtoa_r+0x980>
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 fa72 	bl	80054dc <_Bfree>
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 fa6e 	bl	80054dc <_Bfree>
 8005000:	e69c      	b.n	8004d3c <_dtoa_r+0x6c4>
 8005002:	2600      	movs	r6, #0
 8005004:	4637      	mov	r7, r6
 8005006:	e7e1      	b.n	8004fcc <_dtoa_r+0x954>
 8005008:	46bb      	mov	fp, r7
 800500a:	4637      	mov	r7, r6
 800500c:	e599      	b.n	8004b42 <_dtoa_r+0x4ca>
 800500e:	bf00      	nop
 8005010:	40240000 	.word	0x40240000
 8005014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80c8 	beq.w	80051ac <_dtoa_r+0xb34>
 800501c:	9b04      	ldr	r3, [sp, #16]
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	2d00      	cmp	r5, #0
 8005022:	dd05      	ble.n	8005030 <_dtoa_r+0x9b8>
 8005024:	4639      	mov	r1, r7
 8005026:	462a      	mov	r2, r5
 8005028:	4620      	mov	r0, r4
 800502a:	f000 fc27 	bl	800587c <__lshift>
 800502e:	4607      	mov	r7, r0
 8005030:	f1b8 0f00 	cmp.w	r8, #0
 8005034:	d05b      	beq.n	80050ee <_dtoa_r+0xa76>
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fa0f 	bl	800545c <_Balloc>
 800503e:	4605      	mov	r5, r0
 8005040:	b928      	cbnz	r0, 800504e <_dtoa_r+0x9d6>
 8005042:	4b83      	ldr	r3, [pc, #524]	; (8005250 <_dtoa_r+0xbd8>)
 8005044:	4602      	mov	r2, r0
 8005046:	f240 21ef 	movw	r1, #751	; 0x2ef
 800504a:	f7ff bb2e 	b.w	80046aa <_dtoa_r+0x32>
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	3202      	adds	r2, #2
 8005052:	0092      	lsls	r2, r2, #2
 8005054:	f107 010c 	add.w	r1, r7, #12
 8005058:	300c      	adds	r0, #12
 800505a:	f001 f801 	bl	8006060 <memcpy>
 800505e:	2201      	movs	r2, #1
 8005060:	4629      	mov	r1, r5
 8005062:	4620      	mov	r0, r4
 8005064:	f000 fc0a 	bl	800587c <__lshift>
 8005068:	9b00      	ldr	r3, [sp, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	9304      	str	r3, [sp, #16]
 800506e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005072:	4413      	add	r3, r2
 8005074:	9308      	str	r3, [sp, #32]
 8005076:	9b02      	ldr	r3, [sp, #8]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	46b8      	mov	r8, r7
 800507e:	9306      	str	r3, [sp, #24]
 8005080:	4607      	mov	r7, r0
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	4631      	mov	r1, r6
 8005086:	3b01      	subs	r3, #1
 8005088:	4650      	mov	r0, sl
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	f7ff fa6b 	bl	8004566 <quorem>
 8005090:	4641      	mov	r1, r8
 8005092:	9002      	str	r0, [sp, #8]
 8005094:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005098:	4650      	mov	r0, sl
 800509a:	f000 fc5b 	bl	8005954 <__mcmp>
 800509e:	463a      	mov	r2, r7
 80050a0:	9005      	str	r0, [sp, #20]
 80050a2:	4631      	mov	r1, r6
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 fc71 	bl	800598c <__mdiff>
 80050aa:	68c2      	ldr	r2, [r0, #12]
 80050ac:	4605      	mov	r5, r0
 80050ae:	bb02      	cbnz	r2, 80050f2 <_dtoa_r+0xa7a>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4650      	mov	r0, sl
 80050b4:	f000 fc4e 	bl	8005954 <__mcmp>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4629      	mov	r1, r5
 80050bc:	4620      	mov	r0, r4
 80050be:	9209      	str	r2, [sp, #36]	; 0x24
 80050c0:	f000 fa0c 	bl	80054dc <_Bfree>
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c8:	9d04      	ldr	r5, [sp, #16]
 80050ca:	ea43 0102 	orr.w	r1, r3, r2
 80050ce:	9b06      	ldr	r3, [sp, #24]
 80050d0:	4319      	orrs	r1, r3
 80050d2:	d110      	bne.n	80050f6 <_dtoa_r+0xa7e>
 80050d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80050d8:	d029      	beq.n	800512e <_dtoa_r+0xab6>
 80050da:	9b05      	ldr	r3, [sp, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dd02      	ble.n	80050e6 <_dtoa_r+0xa6e>
 80050e0:	9b02      	ldr	r3, [sp, #8]
 80050e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	f883 9000 	strb.w	r9, [r3]
 80050ec:	e774      	b.n	8004fd8 <_dtoa_r+0x960>
 80050ee:	4638      	mov	r0, r7
 80050f0:	e7ba      	b.n	8005068 <_dtoa_r+0x9f0>
 80050f2:	2201      	movs	r2, #1
 80050f4:	e7e1      	b.n	80050ba <_dtoa_r+0xa42>
 80050f6:	9b05      	ldr	r3, [sp, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db04      	blt.n	8005106 <_dtoa_r+0xa8e>
 80050fc:	9907      	ldr	r1, [sp, #28]
 80050fe:	430b      	orrs	r3, r1
 8005100:	9906      	ldr	r1, [sp, #24]
 8005102:	430b      	orrs	r3, r1
 8005104:	d120      	bne.n	8005148 <_dtoa_r+0xad0>
 8005106:	2a00      	cmp	r2, #0
 8005108:	dded      	ble.n	80050e6 <_dtoa_r+0xa6e>
 800510a:	4651      	mov	r1, sl
 800510c:	2201      	movs	r2, #1
 800510e:	4620      	mov	r0, r4
 8005110:	f000 fbb4 	bl	800587c <__lshift>
 8005114:	4631      	mov	r1, r6
 8005116:	4682      	mov	sl, r0
 8005118:	f000 fc1c 	bl	8005954 <__mcmp>
 800511c:	2800      	cmp	r0, #0
 800511e:	dc03      	bgt.n	8005128 <_dtoa_r+0xab0>
 8005120:	d1e1      	bne.n	80050e6 <_dtoa_r+0xa6e>
 8005122:	f019 0f01 	tst.w	r9, #1
 8005126:	d0de      	beq.n	80050e6 <_dtoa_r+0xa6e>
 8005128:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800512c:	d1d8      	bne.n	80050e0 <_dtoa_r+0xa68>
 800512e:	9a01      	ldr	r2, [sp, #4]
 8005130:	2339      	movs	r3, #57	; 0x39
 8005132:	7013      	strb	r3, [r2, #0]
 8005134:	462b      	mov	r3, r5
 8005136:	461d      	mov	r5, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800513e:	2a39      	cmp	r2, #57	; 0x39
 8005140:	d06c      	beq.n	800521c <_dtoa_r+0xba4>
 8005142:	3201      	adds	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e747      	b.n	8004fd8 <_dtoa_r+0x960>
 8005148:	2a00      	cmp	r2, #0
 800514a:	dd07      	ble.n	800515c <_dtoa_r+0xae4>
 800514c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005150:	d0ed      	beq.n	800512e <_dtoa_r+0xab6>
 8005152:	9a01      	ldr	r2, [sp, #4]
 8005154:	f109 0301 	add.w	r3, r9, #1
 8005158:	7013      	strb	r3, [r2, #0]
 800515a:	e73d      	b.n	8004fd8 <_dtoa_r+0x960>
 800515c:	9b04      	ldr	r3, [sp, #16]
 800515e:	9a08      	ldr	r2, [sp, #32]
 8005160:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005164:	4293      	cmp	r3, r2
 8005166:	d043      	beq.n	80051f0 <_dtoa_r+0xb78>
 8005168:	4651      	mov	r1, sl
 800516a:	2300      	movs	r3, #0
 800516c:	220a      	movs	r2, #10
 800516e:	4620      	mov	r0, r4
 8005170:	f000 f9d6 	bl	8005520 <__multadd>
 8005174:	45b8      	cmp	r8, r7
 8005176:	4682      	mov	sl, r0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 020a 	mov.w	r2, #10
 8005180:	4641      	mov	r1, r8
 8005182:	4620      	mov	r0, r4
 8005184:	d107      	bne.n	8005196 <_dtoa_r+0xb1e>
 8005186:	f000 f9cb 	bl	8005520 <__multadd>
 800518a:	4680      	mov	r8, r0
 800518c:	4607      	mov	r7, r0
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	3301      	adds	r3, #1
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	e775      	b.n	8005082 <_dtoa_r+0xa0a>
 8005196:	f000 f9c3 	bl	8005520 <__multadd>
 800519a:	4639      	mov	r1, r7
 800519c:	4680      	mov	r8, r0
 800519e:	2300      	movs	r3, #0
 80051a0:	220a      	movs	r2, #10
 80051a2:	4620      	mov	r0, r4
 80051a4:	f000 f9bc 	bl	8005520 <__multadd>
 80051a8:	4607      	mov	r7, r0
 80051aa:	e7f0      	b.n	800518e <_dtoa_r+0xb16>
 80051ac:	9b04      	ldr	r3, [sp, #16]
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	9d00      	ldr	r5, [sp, #0]
 80051b2:	4631      	mov	r1, r6
 80051b4:	4650      	mov	r0, sl
 80051b6:	f7ff f9d6 	bl	8004566 <quorem>
 80051ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051be:	9b00      	ldr	r3, [sp, #0]
 80051c0:	f805 9b01 	strb.w	r9, [r5], #1
 80051c4:	1aea      	subs	r2, r5, r3
 80051c6:	9b01      	ldr	r3, [sp, #4]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	dd07      	ble.n	80051dc <_dtoa_r+0xb64>
 80051cc:	4651      	mov	r1, sl
 80051ce:	2300      	movs	r3, #0
 80051d0:	220a      	movs	r2, #10
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f9a4 	bl	8005520 <__multadd>
 80051d8:	4682      	mov	sl, r0
 80051da:	e7ea      	b.n	80051b2 <_dtoa_r+0xb3a>
 80051dc:	9b01      	ldr	r3, [sp, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bfc8      	it	gt
 80051e2:	461d      	movgt	r5, r3
 80051e4:	9b00      	ldr	r3, [sp, #0]
 80051e6:	bfd8      	it	le
 80051e8:	2501      	movle	r5, #1
 80051ea:	441d      	add	r5, r3
 80051ec:	f04f 0800 	mov.w	r8, #0
 80051f0:	4651      	mov	r1, sl
 80051f2:	2201      	movs	r2, #1
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 fb41 	bl	800587c <__lshift>
 80051fa:	4631      	mov	r1, r6
 80051fc:	4682      	mov	sl, r0
 80051fe:	f000 fba9 	bl	8005954 <__mcmp>
 8005202:	2800      	cmp	r0, #0
 8005204:	dc96      	bgt.n	8005134 <_dtoa_r+0xabc>
 8005206:	d102      	bne.n	800520e <_dtoa_r+0xb96>
 8005208:	f019 0f01 	tst.w	r9, #1
 800520c:	d192      	bne.n	8005134 <_dtoa_r+0xabc>
 800520e:	462b      	mov	r3, r5
 8005210:	461d      	mov	r5, r3
 8005212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005216:	2a30      	cmp	r2, #48	; 0x30
 8005218:	d0fa      	beq.n	8005210 <_dtoa_r+0xb98>
 800521a:	e6dd      	b.n	8004fd8 <_dtoa_r+0x960>
 800521c:	9a00      	ldr	r2, [sp, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d189      	bne.n	8005136 <_dtoa_r+0xabe>
 8005222:	f10b 0b01 	add.w	fp, fp, #1
 8005226:	2331      	movs	r3, #49	; 0x31
 8005228:	e796      	b.n	8005158 <_dtoa_r+0xae0>
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <_dtoa_r+0xbdc>)
 800522c:	f7ff ba99 	b.w	8004762 <_dtoa_r+0xea>
 8005230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005232:	2b00      	cmp	r3, #0
 8005234:	f47f aa6d 	bne.w	8004712 <_dtoa_r+0x9a>
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <_dtoa_r+0xbe0>)
 800523a:	f7ff ba92 	b.w	8004762 <_dtoa_r+0xea>
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	dcb5      	bgt.n	80051b0 <_dtoa_r+0xb38>
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	2b02      	cmp	r3, #2
 8005248:	f73f aeb1 	bgt.w	8004fae <_dtoa_r+0x936>
 800524c:	e7b0      	b.n	80051b0 <_dtoa_r+0xb38>
 800524e:	bf00      	nop
 8005250:	080067dc 	.word	0x080067dc
 8005254:	0800673c 	.word	0x0800673c
 8005258:	08006760 	.word	0x08006760

0800525c <_free_r>:
 800525c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800525e:	2900      	cmp	r1, #0
 8005260:	d044      	beq.n	80052ec <_free_r+0x90>
 8005262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005266:	9001      	str	r0, [sp, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f1a1 0404 	sub.w	r4, r1, #4
 800526e:	bfb8      	it	lt
 8005270:	18e4      	addlt	r4, r4, r3
 8005272:	f000 f8e7 	bl	8005444 <__malloc_lock>
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <_free_r+0x94>)
 8005278:	9801      	ldr	r0, [sp, #4]
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	b933      	cbnz	r3, 800528c <_free_r+0x30>
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	b003      	add	sp, #12
 8005284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005288:	f000 b8e2 	b.w	8005450 <__malloc_unlock>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d908      	bls.n	80052a2 <_free_r+0x46>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1961      	adds	r1, r4, r5
 8005294:	428b      	cmp	r3, r1
 8005296:	bf01      	itttt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	1949      	addeq	r1, r1, r5
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	e7ed      	b.n	800527e <_free_r+0x22>
 80052a2:	461a      	mov	r2, r3
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b10b      	cbz	r3, 80052ac <_free_r+0x50>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x46>
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	1855      	adds	r5, r2, r1
 80052b0:	42a5      	cmp	r5, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x70>
 80052b4:	6824      	ldr	r4, [r4, #0]
 80052b6:	4421      	add	r1, r4
 80052b8:	1854      	adds	r4, r2, r1
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	d1e0      	bne.n	8005282 <_free_r+0x26>
 80052c0:	681c      	ldr	r4, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	6053      	str	r3, [r2, #4]
 80052c6:	440c      	add	r4, r1
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	e7da      	b.n	8005282 <_free_r+0x26>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x78>
 80052ce:	230c      	movs	r3, #12
 80052d0:	6003      	str	r3, [r0, #0]
 80052d2:	e7d6      	b.n	8005282 <_free_r+0x26>
 80052d4:	6825      	ldr	r5, [r4, #0]
 80052d6:	1961      	adds	r1, r4, r5
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf04      	itt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	bf04      	itt	eq
 80052e4:	1949      	addeq	r1, r1, r5
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	6054      	str	r4, [r2, #4]
 80052ea:	e7ca      	b.n	8005282 <_free_r+0x26>
 80052ec:	b003      	add	sp, #12
 80052ee:	bd30      	pop	{r4, r5, pc}
 80052f0:	200003ec 	.word	0x200003ec

080052f4 <malloc>:
 80052f4:	4b02      	ldr	r3, [pc, #8]	; (8005300 <malloc+0xc>)
 80052f6:	4601      	mov	r1, r0
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f000 b823 	b.w	8005344 <_malloc_r>
 80052fe:	bf00      	nop
 8005300:	20000064 	.word	0x20000064

08005304 <sbrk_aligned>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4e0e      	ldr	r6, [pc, #56]	; (8005340 <sbrk_aligned+0x3c>)
 8005308:	460c      	mov	r4, r1
 800530a:	6831      	ldr	r1, [r6, #0]
 800530c:	4605      	mov	r5, r0
 800530e:	b911      	cbnz	r1, 8005316 <sbrk_aligned+0x12>
 8005310:	f000 fe96 	bl	8006040 <_sbrk_r>
 8005314:	6030      	str	r0, [r6, #0]
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fe91 	bl	8006040 <_sbrk_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d00a      	beq.n	8005338 <sbrk_aligned+0x34>
 8005322:	1cc4      	adds	r4, r0, #3
 8005324:	f024 0403 	bic.w	r4, r4, #3
 8005328:	42a0      	cmp	r0, r4
 800532a:	d007      	beq.n	800533c <sbrk_aligned+0x38>
 800532c:	1a21      	subs	r1, r4, r0
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fe86 	bl	8006040 <_sbrk_r>
 8005334:	3001      	adds	r0, #1
 8005336:	d101      	bne.n	800533c <sbrk_aligned+0x38>
 8005338:	f04f 34ff 	mov.w	r4, #4294967295
 800533c:	4620      	mov	r0, r4
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	200003f0 	.word	0x200003f0

08005344 <_malloc_r>:
 8005344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005348:	1ccd      	adds	r5, r1, #3
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	3508      	adds	r5, #8
 8005350:	2d0c      	cmp	r5, #12
 8005352:	bf38      	it	cc
 8005354:	250c      	movcc	r5, #12
 8005356:	2d00      	cmp	r5, #0
 8005358:	4607      	mov	r7, r0
 800535a:	db01      	blt.n	8005360 <_malloc_r+0x1c>
 800535c:	42a9      	cmp	r1, r5
 800535e:	d905      	bls.n	800536c <_malloc_r+0x28>
 8005360:	230c      	movs	r3, #12
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	2600      	movs	r6, #0
 8005366:	4630      	mov	r0, r6
 8005368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005440 <_malloc_r+0xfc>
 8005370:	f000 f868 	bl	8005444 <__malloc_lock>
 8005374:	f8d8 3000 	ldr.w	r3, [r8]
 8005378:	461c      	mov	r4, r3
 800537a:	bb5c      	cbnz	r4, 80053d4 <_malloc_r+0x90>
 800537c:	4629      	mov	r1, r5
 800537e:	4638      	mov	r0, r7
 8005380:	f7ff ffc0 	bl	8005304 <sbrk_aligned>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	4604      	mov	r4, r0
 8005388:	d155      	bne.n	8005436 <_malloc_r+0xf2>
 800538a:	f8d8 4000 	ldr.w	r4, [r8]
 800538e:	4626      	mov	r6, r4
 8005390:	2e00      	cmp	r6, #0
 8005392:	d145      	bne.n	8005420 <_malloc_r+0xdc>
 8005394:	2c00      	cmp	r4, #0
 8005396:	d048      	beq.n	800542a <_malloc_r+0xe6>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	4631      	mov	r1, r6
 800539c:	4638      	mov	r0, r7
 800539e:	eb04 0903 	add.w	r9, r4, r3
 80053a2:	f000 fe4d 	bl	8006040 <_sbrk_r>
 80053a6:	4581      	cmp	r9, r0
 80053a8:	d13f      	bne.n	800542a <_malloc_r+0xe6>
 80053aa:	6821      	ldr	r1, [r4, #0]
 80053ac:	1a6d      	subs	r5, r5, r1
 80053ae:	4629      	mov	r1, r5
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ffa7 	bl	8005304 <sbrk_aligned>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d037      	beq.n	800542a <_malloc_r+0xe6>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	442b      	add	r3, r5
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	f8d8 3000 	ldr.w	r3, [r8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d038      	beq.n	800543a <_malloc_r+0xf6>
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	42a2      	cmp	r2, r4
 80053cc:	d12b      	bne.n	8005426 <_malloc_r+0xe2>
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	e00f      	b.n	80053f4 <_malloc_r+0xb0>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	1b52      	subs	r2, r2, r5
 80053d8:	d41f      	bmi.n	800541a <_malloc_r+0xd6>
 80053da:	2a0b      	cmp	r2, #11
 80053dc:	d917      	bls.n	800540e <_malloc_r+0xca>
 80053de:	1961      	adds	r1, r4, r5
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	6025      	str	r5, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	6059      	strne	r1, [r3, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	bf08      	it	eq
 80053ec:	f8c8 1000 	streq.w	r1, [r8]
 80053f0:	5162      	str	r2, [r4, r5]
 80053f2:	604b      	str	r3, [r1, #4]
 80053f4:	4638      	mov	r0, r7
 80053f6:	f104 060b 	add.w	r6, r4, #11
 80053fa:	f000 f829 	bl	8005450 <__malloc_unlock>
 80053fe:	f026 0607 	bic.w	r6, r6, #7
 8005402:	1d23      	adds	r3, r4, #4
 8005404:	1af2      	subs	r2, r6, r3
 8005406:	d0ae      	beq.n	8005366 <_malloc_r+0x22>
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	50a3      	str	r3, [r4, r2]
 800540c:	e7ab      	b.n	8005366 <_malloc_r+0x22>
 800540e:	42a3      	cmp	r3, r4
 8005410:	6862      	ldr	r2, [r4, #4]
 8005412:	d1dd      	bne.n	80053d0 <_malloc_r+0x8c>
 8005414:	f8c8 2000 	str.w	r2, [r8]
 8005418:	e7ec      	b.n	80053f4 <_malloc_r+0xb0>
 800541a:	4623      	mov	r3, r4
 800541c:	6864      	ldr	r4, [r4, #4]
 800541e:	e7ac      	b.n	800537a <_malloc_r+0x36>
 8005420:	4634      	mov	r4, r6
 8005422:	6876      	ldr	r6, [r6, #4]
 8005424:	e7b4      	b.n	8005390 <_malloc_r+0x4c>
 8005426:	4613      	mov	r3, r2
 8005428:	e7cc      	b.n	80053c4 <_malloc_r+0x80>
 800542a:	230c      	movs	r3, #12
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4638      	mov	r0, r7
 8005430:	f000 f80e 	bl	8005450 <__malloc_unlock>
 8005434:	e797      	b.n	8005366 <_malloc_r+0x22>
 8005436:	6025      	str	r5, [r4, #0]
 8005438:	e7dc      	b.n	80053f4 <_malloc_r+0xb0>
 800543a:	605b      	str	r3, [r3, #4]
 800543c:	deff      	udf	#255	; 0xff
 800543e:	bf00      	nop
 8005440:	200003ec 	.word	0x200003ec

08005444 <__malloc_lock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_lock+0x8>)
 8005446:	f7ff b88c 	b.w	8004562 <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	200003e8 	.word	0x200003e8

08005450 <__malloc_unlock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_unlock+0x8>)
 8005452:	f7ff b887 	b.w	8004564 <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	200003e8 	.word	0x200003e8

0800545c <_Balloc>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	69c6      	ldr	r6, [r0, #28]
 8005460:	4604      	mov	r4, r0
 8005462:	460d      	mov	r5, r1
 8005464:	b976      	cbnz	r6, 8005484 <_Balloc+0x28>
 8005466:	2010      	movs	r0, #16
 8005468:	f7ff ff44 	bl	80052f4 <malloc>
 800546c:	4602      	mov	r2, r0
 800546e:	61e0      	str	r0, [r4, #28]
 8005470:	b920      	cbnz	r0, 800547c <_Balloc+0x20>
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <_Balloc+0x78>)
 8005474:	4818      	ldr	r0, [pc, #96]	; (80054d8 <_Balloc+0x7c>)
 8005476:	216b      	movs	r1, #107	; 0x6b
 8005478:	f000 fe00 	bl	800607c <__assert_func>
 800547c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005480:	6006      	str	r6, [r0, #0]
 8005482:	60c6      	str	r6, [r0, #12]
 8005484:	69e6      	ldr	r6, [r4, #28]
 8005486:	68f3      	ldr	r3, [r6, #12]
 8005488:	b183      	cbz	r3, 80054ac <_Balloc+0x50>
 800548a:	69e3      	ldr	r3, [r4, #28]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005492:	b9b8      	cbnz	r0, 80054c4 <_Balloc+0x68>
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f605 	lsl.w	r6, r1, r5
 800549a:	1d72      	adds	r2, r6, #5
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 fe0a 	bl	80060b8 <_calloc_r>
 80054a4:	b160      	cbz	r0, 80054c0 <_Balloc+0x64>
 80054a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054aa:	e00e      	b.n	80054ca <_Balloc+0x6e>
 80054ac:	2221      	movs	r2, #33	; 0x21
 80054ae:	2104      	movs	r1, #4
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 fe01 	bl	80060b8 <_calloc_r>
 80054b6:	69e3      	ldr	r3, [r4, #28]
 80054b8:	60f0      	str	r0, [r6, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e4      	bne.n	800548a <_Balloc+0x2e>
 80054c0:	2000      	movs	r0, #0
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	6802      	ldr	r2, [r0, #0]
 80054c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054ca:	2300      	movs	r3, #0
 80054cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054d0:	e7f7      	b.n	80054c2 <_Balloc+0x66>
 80054d2:	bf00      	nop
 80054d4:	0800676d 	.word	0x0800676d
 80054d8:	080067ed 	.word	0x080067ed

080054dc <_Bfree>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	69c6      	ldr	r6, [r0, #28]
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	b976      	cbnz	r6, 8005504 <_Bfree+0x28>
 80054e6:	2010      	movs	r0, #16
 80054e8:	f7ff ff04 	bl	80052f4 <malloc>
 80054ec:	4602      	mov	r2, r0
 80054ee:	61e8      	str	r0, [r5, #28]
 80054f0:	b920      	cbnz	r0, 80054fc <_Bfree+0x20>
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <_Bfree+0x3c>)
 80054f4:	4809      	ldr	r0, [pc, #36]	; (800551c <_Bfree+0x40>)
 80054f6:	218f      	movs	r1, #143	; 0x8f
 80054f8:	f000 fdc0 	bl	800607c <__assert_func>
 80054fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005500:	6006      	str	r6, [r0, #0]
 8005502:	60c6      	str	r6, [r0, #12]
 8005504:	b13c      	cbz	r4, 8005516 <_Bfree+0x3a>
 8005506:	69eb      	ldr	r3, [r5, #28]
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005510:	6021      	str	r1, [r4, #0]
 8005512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	0800676d 	.word	0x0800676d
 800551c:	080067ed 	.word	0x080067ed

08005520 <__multadd>:
 8005520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005524:	690d      	ldr	r5, [r1, #16]
 8005526:	4607      	mov	r7, r0
 8005528:	460c      	mov	r4, r1
 800552a:	461e      	mov	r6, r3
 800552c:	f101 0c14 	add.w	ip, r1, #20
 8005530:	2000      	movs	r0, #0
 8005532:	f8dc 3000 	ldr.w	r3, [ip]
 8005536:	b299      	uxth	r1, r3
 8005538:	fb02 6101 	mla	r1, r2, r1, r6
 800553c:	0c1e      	lsrs	r6, r3, #16
 800553e:	0c0b      	lsrs	r3, r1, #16
 8005540:	fb02 3306 	mla	r3, r2, r6, r3
 8005544:	b289      	uxth	r1, r1
 8005546:	3001      	adds	r0, #1
 8005548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800554c:	4285      	cmp	r5, r0
 800554e:	f84c 1b04 	str.w	r1, [ip], #4
 8005552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005556:	dcec      	bgt.n	8005532 <__multadd+0x12>
 8005558:	b30e      	cbz	r6, 800559e <__multadd+0x7e>
 800555a:	68a3      	ldr	r3, [r4, #8]
 800555c:	42ab      	cmp	r3, r5
 800555e:	dc19      	bgt.n	8005594 <__multadd+0x74>
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4638      	mov	r0, r7
 8005564:	3101      	adds	r1, #1
 8005566:	f7ff ff79 	bl	800545c <_Balloc>
 800556a:	4680      	mov	r8, r0
 800556c:	b928      	cbnz	r0, 800557a <__multadd+0x5a>
 800556e:	4602      	mov	r2, r0
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <__multadd+0x84>)
 8005572:	480d      	ldr	r0, [pc, #52]	; (80055a8 <__multadd+0x88>)
 8005574:	21ba      	movs	r1, #186	; 0xba
 8005576:	f000 fd81 	bl	800607c <__assert_func>
 800557a:	6922      	ldr	r2, [r4, #16]
 800557c:	3202      	adds	r2, #2
 800557e:	f104 010c 	add.w	r1, r4, #12
 8005582:	0092      	lsls	r2, r2, #2
 8005584:	300c      	adds	r0, #12
 8005586:	f000 fd6b 	bl	8006060 <memcpy>
 800558a:	4621      	mov	r1, r4
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ffa5 	bl	80054dc <_Bfree>
 8005592:	4644      	mov	r4, r8
 8005594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005598:	3501      	adds	r5, #1
 800559a:	615e      	str	r6, [r3, #20]
 800559c:	6125      	str	r5, [r4, #16]
 800559e:	4620      	mov	r0, r4
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	080067dc 	.word	0x080067dc
 80055a8:	080067ed 	.word	0x080067ed

080055ac <__hi0bits>:
 80055ac:	0c03      	lsrs	r3, r0, #16
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	b9d3      	cbnz	r3, 80055e8 <__hi0bits+0x3c>
 80055b2:	0400      	lsls	r0, r0, #16
 80055b4:	2310      	movs	r3, #16
 80055b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80055ba:	bf04      	itt	eq
 80055bc:	0200      	lsleq	r0, r0, #8
 80055be:	3308      	addeq	r3, #8
 80055c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80055c4:	bf04      	itt	eq
 80055c6:	0100      	lsleq	r0, r0, #4
 80055c8:	3304      	addeq	r3, #4
 80055ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80055ce:	bf04      	itt	eq
 80055d0:	0080      	lsleq	r0, r0, #2
 80055d2:	3302      	addeq	r3, #2
 80055d4:	2800      	cmp	r0, #0
 80055d6:	db05      	blt.n	80055e4 <__hi0bits+0x38>
 80055d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055dc:	f103 0301 	add.w	r3, r3, #1
 80055e0:	bf08      	it	eq
 80055e2:	2320      	moveq	r3, #32
 80055e4:	4618      	mov	r0, r3
 80055e6:	4770      	bx	lr
 80055e8:	2300      	movs	r3, #0
 80055ea:	e7e4      	b.n	80055b6 <__hi0bits+0xa>

080055ec <__lo0bits>:
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	f013 0207 	ands.w	r2, r3, #7
 80055f2:	d00c      	beq.n	800560e <__lo0bits+0x22>
 80055f4:	07d9      	lsls	r1, r3, #31
 80055f6:	d422      	bmi.n	800563e <__lo0bits+0x52>
 80055f8:	079a      	lsls	r2, r3, #30
 80055fa:	bf49      	itett	mi
 80055fc:	085b      	lsrmi	r3, r3, #1
 80055fe:	089b      	lsrpl	r3, r3, #2
 8005600:	6003      	strmi	r3, [r0, #0]
 8005602:	2201      	movmi	r2, #1
 8005604:	bf5c      	itt	pl
 8005606:	6003      	strpl	r3, [r0, #0]
 8005608:	2202      	movpl	r2, #2
 800560a:	4610      	mov	r0, r2
 800560c:	4770      	bx	lr
 800560e:	b299      	uxth	r1, r3
 8005610:	b909      	cbnz	r1, 8005616 <__lo0bits+0x2a>
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	2210      	movs	r2, #16
 8005616:	b2d9      	uxtb	r1, r3
 8005618:	b909      	cbnz	r1, 800561e <__lo0bits+0x32>
 800561a:	3208      	adds	r2, #8
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	0719      	lsls	r1, r3, #28
 8005620:	bf04      	itt	eq
 8005622:	091b      	lsreq	r3, r3, #4
 8005624:	3204      	addeq	r2, #4
 8005626:	0799      	lsls	r1, r3, #30
 8005628:	bf04      	itt	eq
 800562a:	089b      	lsreq	r3, r3, #2
 800562c:	3202      	addeq	r2, #2
 800562e:	07d9      	lsls	r1, r3, #31
 8005630:	d403      	bmi.n	800563a <__lo0bits+0x4e>
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	f102 0201 	add.w	r2, r2, #1
 8005638:	d003      	beq.n	8005642 <__lo0bits+0x56>
 800563a:	6003      	str	r3, [r0, #0]
 800563c:	e7e5      	b.n	800560a <__lo0bits+0x1e>
 800563e:	2200      	movs	r2, #0
 8005640:	e7e3      	b.n	800560a <__lo0bits+0x1e>
 8005642:	2220      	movs	r2, #32
 8005644:	e7e1      	b.n	800560a <__lo0bits+0x1e>
	...

08005648 <__i2b>:
 8005648:	b510      	push	{r4, lr}
 800564a:	460c      	mov	r4, r1
 800564c:	2101      	movs	r1, #1
 800564e:	f7ff ff05 	bl	800545c <_Balloc>
 8005652:	4602      	mov	r2, r0
 8005654:	b928      	cbnz	r0, 8005662 <__i2b+0x1a>
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <__i2b+0x24>)
 8005658:	4805      	ldr	r0, [pc, #20]	; (8005670 <__i2b+0x28>)
 800565a:	f240 1145 	movw	r1, #325	; 0x145
 800565e:	f000 fd0d 	bl	800607c <__assert_func>
 8005662:	2301      	movs	r3, #1
 8005664:	6144      	str	r4, [r0, #20]
 8005666:	6103      	str	r3, [r0, #16]
 8005668:	bd10      	pop	{r4, pc}
 800566a:	bf00      	nop
 800566c:	080067dc 	.word	0x080067dc
 8005670:	080067ed 	.word	0x080067ed

08005674 <__multiply>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	4691      	mov	r9, r2
 800567a:	690a      	ldr	r2, [r1, #16]
 800567c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	bfb8      	it	lt
 8005684:	460b      	movlt	r3, r1
 8005686:	460c      	mov	r4, r1
 8005688:	bfbc      	itt	lt
 800568a:	464c      	movlt	r4, r9
 800568c:	4699      	movlt	r9, r3
 800568e:	6927      	ldr	r7, [r4, #16]
 8005690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	6861      	ldr	r1, [r4, #4]
 8005698:	eb07 060a 	add.w	r6, r7, sl
 800569c:	42b3      	cmp	r3, r6
 800569e:	b085      	sub	sp, #20
 80056a0:	bfb8      	it	lt
 80056a2:	3101      	addlt	r1, #1
 80056a4:	f7ff feda 	bl	800545c <_Balloc>
 80056a8:	b930      	cbnz	r0, 80056b8 <__multiply+0x44>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b44      	ldr	r3, [pc, #272]	; (80057c0 <__multiply+0x14c>)
 80056ae:	4845      	ldr	r0, [pc, #276]	; (80057c4 <__multiply+0x150>)
 80056b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80056b4:	f000 fce2 	bl	800607c <__assert_func>
 80056b8:	f100 0514 	add.w	r5, r0, #20
 80056bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056c0:	462b      	mov	r3, r5
 80056c2:	2200      	movs	r2, #0
 80056c4:	4543      	cmp	r3, r8
 80056c6:	d321      	bcc.n	800570c <__multiply+0x98>
 80056c8:	f104 0314 	add.w	r3, r4, #20
 80056cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056d0:	f109 0314 	add.w	r3, r9, #20
 80056d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056d8:	9202      	str	r2, [sp, #8]
 80056da:	1b3a      	subs	r2, r7, r4
 80056dc:	3a15      	subs	r2, #21
 80056de:	f022 0203 	bic.w	r2, r2, #3
 80056e2:	3204      	adds	r2, #4
 80056e4:	f104 0115 	add.w	r1, r4, #21
 80056e8:	428f      	cmp	r7, r1
 80056ea:	bf38      	it	cc
 80056ec:	2204      	movcc	r2, #4
 80056ee:	9201      	str	r2, [sp, #4]
 80056f0:	9a02      	ldr	r2, [sp, #8]
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d80c      	bhi.n	8005712 <__multiply+0x9e>
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	dd03      	ble.n	8005704 <__multiply+0x90>
 80056fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005700:	2b00      	cmp	r3, #0
 8005702:	d05b      	beq.n	80057bc <__multiply+0x148>
 8005704:	6106      	str	r6, [r0, #16]
 8005706:	b005      	add	sp, #20
 8005708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	f843 2b04 	str.w	r2, [r3], #4
 8005710:	e7d8      	b.n	80056c4 <__multiply+0x50>
 8005712:	f8b3 a000 	ldrh.w	sl, [r3]
 8005716:	f1ba 0f00 	cmp.w	sl, #0
 800571a:	d024      	beq.n	8005766 <__multiply+0xf2>
 800571c:	f104 0e14 	add.w	lr, r4, #20
 8005720:	46a9      	mov	r9, r5
 8005722:	f04f 0c00 	mov.w	ip, #0
 8005726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800572a:	f8d9 1000 	ldr.w	r1, [r9]
 800572e:	fa1f fb82 	uxth.w	fp, r2
 8005732:	b289      	uxth	r1, r1
 8005734:	fb0a 110b 	mla	r1, sl, fp, r1
 8005738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800573c:	f8d9 2000 	ldr.w	r2, [r9]
 8005740:	4461      	add	r1, ip
 8005742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005746:	fb0a c20b 	mla	r2, sl, fp, ip
 800574a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800574e:	b289      	uxth	r1, r1
 8005750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005754:	4577      	cmp	r7, lr
 8005756:	f849 1b04 	str.w	r1, [r9], #4
 800575a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800575e:	d8e2      	bhi.n	8005726 <__multiply+0xb2>
 8005760:	9a01      	ldr	r2, [sp, #4]
 8005762:	f845 c002 	str.w	ip, [r5, r2]
 8005766:	9a03      	ldr	r2, [sp, #12]
 8005768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800576c:	3304      	adds	r3, #4
 800576e:	f1b9 0f00 	cmp.w	r9, #0
 8005772:	d021      	beq.n	80057b8 <__multiply+0x144>
 8005774:	6829      	ldr	r1, [r5, #0]
 8005776:	f104 0c14 	add.w	ip, r4, #20
 800577a:	46ae      	mov	lr, r5
 800577c:	f04f 0a00 	mov.w	sl, #0
 8005780:	f8bc b000 	ldrh.w	fp, [ip]
 8005784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005788:	fb09 220b 	mla	r2, r9, fp, r2
 800578c:	4452      	add	r2, sl
 800578e:	b289      	uxth	r1, r1
 8005790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005794:	f84e 1b04 	str.w	r1, [lr], #4
 8005798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800579c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057a0:	f8be 1000 	ldrh.w	r1, [lr]
 80057a4:	fb09 110a 	mla	r1, r9, sl, r1
 80057a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80057ac:	4567      	cmp	r7, ip
 80057ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057b2:	d8e5      	bhi.n	8005780 <__multiply+0x10c>
 80057b4:	9a01      	ldr	r2, [sp, #4]
 80057b6:	50a9      	str	r1, [r5, r2]
 80057b8:	3504      	adds	r5, #4
 80057ba:	e799      	b.n	80056f0 <__multiply+0x7c>
 80057bc:	3e01      	subs	r6, #1
 80057be:	e79b      	b.n	80056f8 <__multiply+0x84>
 80057c0:	080067dc 	.word	0x080067dc
 80057c4:	080067ed 	.word	0x080067ed

080057c8 <__pow5mult>:
 80057c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057cc:	4615      	mov	r5, r2
 80057ce:	f012 0203 	ands.w	r2, r2, #3
 80057d2:	4606      	mov	r6, r0
 80057d4:	460f      	mov	r7, r1
 80057d6:	d007      	beq.n	80057e8 <__pow5mult+0x20>
 80057d8:	4c25      	ldr	r4, [pc, #148]	; (8005870 <__pow5mult+0xa8>)
 80057da:	3a01      	subs	r2, #1
 80057dc:	2300      	movs	r3, #0
 80057de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057e2:	f7ff fe9d 	bl	8005520 <__multadd>
 80057e6:	4607      	mov	r7, r0
 80057e8:	10ad      	asrs	r5, r5, #2
 80057ea:	d03d      	beq.n	8005868 <__pow5mult+0xa0>
 80057ec:	69f4      	ldr	r4, [r6, #28]
 80057ee:	b97c      	cbnz	r4, 8005810 <__pow5mult+0x48>
 80057f0:	2010      	movs	r0, #16
 80057f2:	f7ff fd7f 	bl	80052f4 <malloc>
 80057f6:	4602      	mov	r2, r0
 80057f8:	61f0      	str	r0, [r6, #28]
 80057fa:	b928      	cbnz	r0, 8005808 <__pow5mult+0x40>
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <__pow5mult+0xac>)
 80057fe:	481e      	ldr	r0, [pc, #120]	; (8005878 <__pow5mult+0xb0>)
 8005800:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005804:	f000 fc3a 	bl	800607c <__assert_func>
 8005808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800580c:	6004      	str	r4, [r0, #0]
 800580e:	60c4      	str	r4, [r0, #12]
 8005810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005818:	b94c      	cbnz	r4, 800582e <__pow5mult+0x66>
 800581a:	f240 2171 	movw	r1, #625	; 0x271
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ff12 	bl	8005648 <__i2b>
 8005824:	2300      	movs	r3, #0
 8005826:	f8c8 0008 	str.w	r0, [r8, #8]
 800582a:	4604      	mov	r4, r0
 800582c:	6003      	str	r3, [r0, #0]
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	07eb      	lsls	r3, r5, #31
 8005834:	d50a      	bpl.n	800584c <__pow5mult+0x84>
 8005836:	4639      	mov	r1, r7
 8005838:	4622      	mov	r2, r4
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff ff1a 	bl	8005674 <__multiply>
 8005840:	4639      	mov	r1, r7
 8005842:	4680      	mov	r8, r0
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff fe49 	bl	80054dc <_Bfree>
 800584a:	4647      	mov	r7, r8
 800584c:	106d      	asrs	r5, r5, #1
 800584e:	d00b      	beq.n	8005868 <__pow5mult+0xa0>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	b938      	cbnz	r0, 8005864 <__pow5mult+0x9c>
 8005854:	4622      	mov	r2, r4
 8005856:	4621      	mov	r1, r4
 8005858:	4630      	mov	r0, r6
 800585a:	f7ff ff0b 	bl	8005674 <__multiply>
 800585e:	6020      	str	r0, [r4, #0]
 8005860:	f8c0 9000 	str.w	r9, [r0]
 8005864:	4604      	mov	r4, r0
 8005866:	e7e4      	b.n	8005832 <__pow5mult+0x6a>
 8005868:	4638      	mov	r0, r7
 800586a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800586e:	bf00      	nop
 8005870:	08006938 	.word	0x08006938
 8005874:	0800676d 	.word	0x0800676d
 8005878:	080067ed 	.word	0x080067ed

0800587c <__lshift>:
 800587c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	460c      	mov	r4, r1
 8005882:	6849      	ldr	r1, [r1, #4]
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	4607      	mov	r7, r0
 800588e:	4691      	mov	r9, r2
 8005890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005894:	f108 0601 	add.w	r6, r8, #1
 8005898:	42b3      	cmp	r3, r6
 800589a:	db0b      	blt.n	80058b4 <__lshift+0x38>
 800589c:	4638      	mov	r0, r7
 800589e:	f7ff fddd 	bl	800545c <_Balloc>
 80058a2:	4605      	mov	r5, r0
 80058a4:	b948      	cbnz	r0, 80058ba <__lshift+0x3e>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b28      	ldr	r3, [pc, #160]	; (800594c <__lshift+0xd0>)
 80058aa:	4829      	ldr	r0, [pc, #164]	; (8005950 <__lshift+0xd4>)
 80058ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80058b0:	f000 fbe4 	bl	800607c <__assert_func>
 80058b4:	3101      	adds	r1, #1
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	e7ee      	b.n	8005898 <__lshift+0x1c>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f100 0114 	add.w	r1, r0, #20
 80058c0:	f100 0210 	add.w	r2, r0, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	4553      	cmp	r3, sl
 80058c8:	db33      	blt.n	8005932 <__lshift+0xb6>
 80058ca:	6920      	ldr	r0, [r4, #16]
 80058cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058d0:	f104 0314 	add.w	r3, r4, #20
 80058d4:	f019 091f 	ands.w	r9, r9, #31
 80058d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058e0:	d02b      	beq.n	800593a <__lshift+0xbe>
 80058e2:	f1c9 0e20 	rsb	lr, r9, #32
 80058e6:	468a      	mov	sl, r1
 80058e8:	2200      	movs	r2, #0
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	fa00 f009 	lsl.w	r0, r0, r9
 80058f0:	4310      	orrs	r0, r2
 80058f2:	f84a 0b04 	str.w	r0, [sl], #4
 80058f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fa:	459c      	cmp	ip, r3
 80058fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005900:	d8f3      	bhi.n	80058ea <__lshift+0x6e>
 8005902:	ebac 0304 	sub.w	r3, ip, r4
 8005906:	3b15      	subs	r3, #21
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	3304      	adds	r3, #4
 800590e:	f104 0015 	add.w	r0, r4, #21
 8005912:	4584      	cmp	ip, r0
 8005914:	bf38      	it	cc
 8005916:	2304      	movcc	r3, #4
 8005918:	50ca      	str	r2, [r1, r3]
 800591a:	b10a      	cbz	r2, 8005920 <__lshift+0xa4>
 800591c:	f108 0602 	add.w	r6, r8, #2
 8005920:	3e01      	subs	r6, #1
 8005922:	4638      	mov	r0, r7
 8005924:	612e      	str	r6, [r5, #16]
 8005926:	4621      	mov	r1, r4
 8005928:	f7ff fdd8 	bl	80054dc <_Bfree>
 800592c:	4628      	mov	r0, r5
 800592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005932:	f842 0f04 	str.w	r0, [r2, #4]!
 8005936:	3301      	adds	r3, #1
 8005938:	e7c5      	b.n	80058c6 <__lshift+0x4a>
 800593a:	3904      	subs	r1, #4
 800593c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005940:	f841 2f04 	str.w	r2, [r1, #4]!
 8005944:	459c      	cmp	ip, r3
 8005946:	d8f9      	bhi.n	800593c <__lshift+0xc0>
 8005948:	e7ea      	b.n	8005920 <__lshift+0xa4>
 800594a:	bf00      	nop
 800594c:	080067dc 	.word	0x080067dc
 8005950:	080067ed 	.word	0x080067ed

08005954 <__mcmp>:
 8005954:	b530      	push	{r4, r5, lr}
 8005956:	6902      	ldr	r2, [r0, #16]
 8005958:	690c      	ldr	r4, [r1, #16]
 800595a:	1b12      	subs	r2, r2, r4
 800595c:	d10e      	bne.n	800597c <__mcmp+0x28>
 800595e:	f100 0314 	add.w	r3, r0, #20
 8005962:	3114      	adds	r1, #20
 8005964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800596c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005974:	42a5      	cmp	r5, r4
 8005976:	d003      	beq.n	8005980 <__mcmp+0x2c>
 8005978:	d305      	bcc.n	8005986 <__mcmp+0x32>
 800597a:	2201      	movs	r2, #1
 800597c:	4610      	mov	r0, r2
 800597e:	bd30      	pop	{r4, r5, pc}
 8005980:	4283      	cmp	r3, r0
 8005982:	d3f3      	bcc.n	800596c <__mcmp+0x18>
 8005984:	e7fa      	b.n	800597c <__mcmp+0x28>
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	e7f7      	b.n	800597c <__mcmp+0x28>

0800598c <__mdiff>:
 800598c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	460c      	mov	r4, r1
 8005992:	4606      	mov	r6, r0
 8005994:	4611      	mov	r1, r2
 8005996:	4620      	mov	r0, r4
 8005998:	4690      	mov	r8, r2
 800599a:	f7ff ffdb 	bl	8005954 <__mcmp>
 800599e:	1e05      	subs	r5, r0, #0
 80059a0:	d110      	bne.n	80059c4 <__mdiff+0x38>
 80059a2:	4629      	mov	r1, r5
 80059a4:	4630      	mov	r0, r6
 80059a6:	f7ff fd59 	bl	800545c <_Balloc>
 80059aa:	b930      	cbnz	r0, 80059ba <__mdiff+0x2e>
 80059ac:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <__mdiff+0x10c>)
 80059ae:	4602      	mov	r2, r0
 80059b0:	f240 2137 	movw	r1, #567	; 0x237
 80059b4:	4839      	ldr	r0, [pc, #228]	; (8005a9c <__mdiff+0x110>)
 80059b6:	f000 fb61 	bl	800607c <__assert_func>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	bfa4      	itt	ge
 80059c6:	4643      	movge	r3, r8
 80059c8:	46a0      	movge	r8, r4
 80059ca:	4630      	mov	r0, r6
 80059cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059d0:	bfa6      	itte	ge
 80059d2:	461c      	movge	r4, r3
 80059d4:	2500      	movge	r5, #0
 80059d6:	2501      	movlt	r5, #1
 80059d8:	f7ff fd40 	bl	800545c <_Balloc>
 80059dc:	b920      	cbnz	r0, 80059e8 <__mdiff+0x5c>
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <__mdiff+0x10c>)
 80059e0:	4602      	mov	r2, r0
 80059e2:	f240 2145 	movw	r1, #581	; 0x245
 80059e6:	e7e5      	b.n	80059b4 <__mdiff+0x28>
 80059e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059ec:	6926      	ldr	r6, [r4, #16]
 80059ee:	60c5      	str	r5, [r0, #12]
 80059f0:	f104 0914 	add.w	r9, r4, #20
 80059f4:	f108 0514 	add.w	r5, r8, #20
 80059f8:	f100 0e14 	add.w	lr, r0, #20
 80059fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a04:	f108 0210 	add.w	r2, r8, #16
 8005a08:	46f2      	mov	sl, lr
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a14:	fa11 f88b 	uxtah	r8, r1, fp
 8005a18:	b299      	uxth	r1, r3
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	eba8 0801 	sub.w	r8, r8, r1
 8005a20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a28:	fa1f f888 	uxth.w	r8, r8
 8005a2c:	1419      	asrs	r1, r3, #16
 8005a2e:	454e      	cmp	r6, r9
 8005a30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a34:	f84a 3b04 	str.w	r3, [sl], #4
 8005a38:	d8e8      	bhi.n	8005a0c <__mdiff+0x80>
 8005a3a:	1b33      	subs	r3, r6, r4
 8005a3c:	3b15      	subs	r3, #21
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	3304      	adds	r3, #4
 8005a44:	3415      	adds	r4, #21
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	bf38      	it	cc
 8005a4a:	2304      	movcc	r3, #4
 8005a4c:	441d      	add	r5, r3
 8005a4e:	4473      	add	r3, lr
 8005a50:	469e      	mov	lr, r3
 8005a52:	462e      	mov	r6, r5
 8005a54:	4566      	cmp	r6, ip
 8005a56:	d30e      	bcc.n	8005a76 <__mdiff+0xea>
 8005a58:	f10c 0203 	add.w	r2, ip, #3
 8005a5c:	1b52      	subs	r2, r2, r5
 8005a5e:	f022 0203 	bic.w	r2, r2, #3
 8005a62:	3d03      	subs	r5, #3
 8005a64:	45ac      	cmp	ip, r5
 8005a66:	bf38      	it	cc
 8005a68:	2200      	movcc	r2, #0
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a70:	b17a      	cbz	r2, 8005a92 <__mdiff+0x106>
 8005a72:	6107      	str	r7, [r0, #16]
 8005a74:	e7a4      	b.n	80059c0 <__mdiff+0x34>
 8005a76:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a7a:	fa11 f288 	uxtah	r2, r1, r8
 8005a7e:	1414      	asrs	r4, r2, #16
 8005a80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a84:	b292      	uxth	r2, r2
 8005a86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a8a:	f84e 2b04 	str.w	r2, [lr], #4
 8005a8e:	1421      	asrs	r1, r4, #16
 8005a90:	e7e0      	b.n	8005a54 <__mdiff+0xc8>
 8005a92:	3f01      	subs	r7, #1
 8005a94:	e7ea      	b.n	8005a6c <__mdiff+0xe0>
 8005a96:	bf00      	nop
 8005a98:	080067dc 	.word	0x080067dc
 8005a9c:	080067ed 	.word	0x080067ed

08005aa0 <__d2b>:
 8005aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	ec59 8b10 	vmov	r8, r9, d0
 8005aac:	4616      	mov	r6, r2
 8005aae:	f7ff fcd5 	bl	800545c <_Balloc>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	b930      	cbnz	r0, 8005ac4 <__d2b+0x24>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <__d2b+0xac>)
 8005aba:	4825      	ldr	r0, [pc, #148]	; (8005b50 <__d2b+0xb0>)
 8005abc:	f240 310f 	movw	r1, #783	; 0x30f
 8005ac0:	f000 fadc 	bl	800607c <__assert_func>
 8005ac4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005acc:	bb2d      	cbnz	r5, 8005b1a <__d2b+0x7a>
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	f1b8 0300 	subs.w	r3, r8, #0
 8005ad4:	d026      	beq.n	8005b24 <__d2b+0x84>
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	f7ff fd87 	bl	80055ec <__lo0bits>
 8005ade:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ae2:	b1e8      	cbz	r0, 8005b20 <__d2b+0x80>
 8005ae4:	f1c0 0320 	rsb	r3, r0, #32
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	430b      	orrs	r3, r1
 8005aee:	40c2      	lsrs	r2, r0
 8005af0:	6163      	str	r3, [r4, #20]
 8005af2:	9201      	str	r2, [sp, #4]
 8005af4:	9b01      	ldr	r3, [sp, #4]
 8005af6:	61a3      	str	r3, [r4, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf14      	ite	ne
 8005afc:	2202      	movne	r2, #2
 8005afe:	2201      	moveq	r2, #1
 8005b00:	6122      	str	r2, [r4, #16]
 8005b02:	b1bd      	cbz	r5, 8005b34 <__d2b+0x94>
 8005b04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b08:	4405      	add	r5, r0
 8005b0a:	603d      	str	r5, [r7, #0]
 8005b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	4620      	mov	r0, r4
 8005b14:	b003      	add	sp, #12
 8005b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1e:	e7d6      	b.n	8005ace <__d2b+0x2e>
 8005b20:	6161      	str	r1, [r4, #20]
 8005b22:	e7e7      	b.n	8005af4 <__d2b+0x54>
 8005b24:	a801      	add	r0, sp, #4
 8005b26:	f7ff fd61 	bl	80055ec <__lo0bits>
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	6163      	str	r3, [r4, #20]
 8005b2e:	3020      	adds	r0, #32
 8005b30:	2201      	movs	r2, #1
 8005b32:	e7e5      	b.n	8005b00 <__d2b+0x60>
 8005b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b3c:	6038      	str	r0, [r7, #0]
 8005b3e:	6918      	ldr	r0, [r3, #16]
 8005b40:	f7ff fd34 	bl	80055ac <__hi0bits>
 8005b44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b48:	e7e2      	b.n	8005b10 <__d2b+0x70>
 8005b4a:	bf00      	nop
 8005b4c:	080067dc 	.word	0x080067dc
 8005b50:	080067ed 	.word	0x080067ed

08005b54 <__sfputc_r>:
 8005b54:	6893      	ldr	r3, [r2, #8]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	b410      	push	{r4}
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	da08      	bge.n	8005b72 <__sfputc_r+0x1e>
 8005b60:	6994      	ldr	r4, [r2, #24]
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	db01      	blt.n	8005b6a <__sfputc_r+0x16>
 8005b66:	290a      	cmp	r1, #10
 8005b68:	d103      	bne.n	8005b72 <__sfputc_r+0x1e>
 8005b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b6e:	f7fe bbe6 	b.w	800433e <__swbuf_r>
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	1c58      	adds	r0, r3, #1
 8005b76:	6010      	str	r0, [r2, #0]
 8005b78:	7019      	strb	r1, [r3, #0]
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <__sfputs_r>:
 8005b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	18d5      	adds	r5, r2, r3
 8005b8c:	42ac      	cmp	r4, r5
 8005b8e:	d101      	bne.n	8005b94 <__sfputs_r+0x12>
 8005b90:	2000      	movs	r0, #0
 8005b92:	e007      	b.n	8005ba4 <__sfputs_r+0x22>
 8005b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b98:	463a      	mov	r2, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff ffda 	bl	8005b54 <__sfputc_r>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d1f3      	bne.n	8005b8c <__sfputs_r+0xa>
 8005ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba8 <_vfiprintf_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	460d      	mov	r5, r1
 8005bae:	b09d      	sub	sp, #116	; 0x74
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	b118      	cbz	r0, 8005bc0 <_vfiprintf_r+0x18>
 8005bb8:	6a03      	ldr	r3, [r0, #32]
 8005bba:	b90b      	cbnz	r3, 8005bc0 <_vfiprintf_r+0x18>
 8005bbc:	f7fe fad8 	bl	8004170 <__sinit>
 8005bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc2:	07d9      	lsls	r1, r3, #31
 8005bc4:	d405      	bmi.n	8005bd2 <_vfiprintf_r+0x2a>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	059a      	lsls	r2, r3, #22
 8005bca:	d402      	bmi.n	8005bd2 <_vfiprintf_r+0x2a>
 8005bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bce:	f7fe fcc8 	bl	8004562 <__retarget_lock_acquire_recursive>
 8005bd2:	89ab      	ldrh	r3, [r5, #12]
 8005bd4:	071b      	lsls	r3, r3, #28
 8005bd6:	d501      	bpl.n	8005bdc <_vfiprintf_r+0x34>
 8005bd8:	692b      	ldr	r3, [r5, #16]
 8005bda:	b99b      	cbnz	r3, 8005c04 <_vfiprintf_r+0x5c>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7fe fbea 	bl	80043b8 <__swsetup_r>
 8005be4:	b170      	cbz	r0, 8005c04 <_vfiprintf_r+0x5c>
 8005be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be8:	07dc      	lsls	r4, r3, #31
 8005bea:	d504      	bpl.n	8005bf6 <_vfiprintf_r+0x4e>
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	b01d      	add	sp, #116	; 0x74
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	0598      	lsls	r0, r3, #22
 8005bfa:	d4f7      	bmi.n	8005bec <_vfiprintf_r+0x44>
 8005bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bfe:	f7fe fcb1 	bl	8004564 <__retarget_lock_release_recursive>
 8005c02:	e7f3      	b.n	8005bec <_vfiprintf_r+0x44>
 8005c04:	2300      	movs	r3, #0
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c12:	2330      	movs	r3, #48	; 0x30
 8005c14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005dc8 <_vfiprintf_r+0x220>
 8005c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c1c:	f04f 0901 	mov.w	r9, #1
 8005c20:	4623      	mov	r3, r4
 8005c22:	469a      	mov	sl, r3
 8005c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c28:	b10a      	cbz	r2, 8005c2e <_vfiprintf_r+0x86>
 8005c2a:	2a25      	cmp	r2, #37	; 0x25
 8005c2c:	d1f9      	bne.n	8005c22 <_vfiprintf_r+0x7a>
 8005c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c32:	d00b      	beq.n	8005c4c <_vfiprintf_r+0xa4>
 8005c34:	465b      	mov	r3, fp
 8005c36:	4622      	mov	r2, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ffa1 	bl	8005b82 <__sfputs_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	f000 80a9 	beq.w	8005d98 <_vfiprintf_r+0x1f0>
 8005c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c48:	445a      	add	r2, fp
 8005c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a1 	beq.w	8005d98 <_vfiprintf_r+0x1f0>
 8005c56:	2300      	movs	r3, #0
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c60:	f10a 0a01 	add.w	sl, sl, #1
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	9307      	str	r3, [sp, #28]
 8005c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c6e:	4654      	mov	r4, sl
 8005c70:	2205      	movs	r2, #5
 8005c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c76:	4854      	ldr	r0, [pc, #336]	; (8005dc8 <_vfiprintf_r+0x220>)
 8005c78:	f7fa faaa 	bl	80001d0 <memchr>
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	b9d8      	cbnz	r0, 8005cb8 <_vfiprintf_r+0x110>
 8005c80:	06d1      	lsls	r1, r2, #27
 8005c82:	bf44      	itt	mi
 8005c84:	2320      	movmi	r3, #32
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8a:	0713      	lsls	r3, r2, #28
 8005c8c:	bf44      	itt	mi
 8005c8e:	232b      	movmi	r3, #43	; 0x2b
 8005c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c94:	f89a 3000 	ldrb.w	r3, [sl]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d015      	beq.n	8005cc8 <_vfiprintf_r+0x120>
 8005c9c:	9a07      	ldr	r2, [sp, #28]
 8005c9e:	4654      	mov	r4, sl
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f04f 0c0a 	mov.w	ip, #10
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cac:	3b30      	subs	r3, #48	; 0x30
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d94d      	bls.n	8005d4e <_vfiprintf_r+0x1a6>
 8005cb2:	b1b0      	cbz	r0, 8005ce2 <_vfiprintf_r+0x13a>
 8005cb4:	9207      	str	r2, [sp, #28]
 8005cb6:	e014      	b.n	8005ce2 <_vfiprintf_r+0x13a>
 8005cb8:	eba0 0308 	sub.w	r3, r0, r8
 8005cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	46a2      	mov	sl, r4
 8005cc6:	e7d2      	b.n	8005c6e <_vfiprintf_r+0xc6>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d19      	adds	r1, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9103      	str	r1, [sp, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfbb      	ittet	lt
 8005cd4:	425b      	neglt	r3, r3
 8005cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cda:	9307      	strge	r3, [sp, #28]
 8005cdc:	9307      	strlt	r3, [sp, #28]
 8005cde:	bfb8      	it	lt
 8005ce0:	9204      	strlt	r2, [sp, #16]
 8005ce2:	7823      	ldrb	r3, [r4, #0]
 8005ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce6:	d10c      	bne.n	8005d02 <_vfiprintf_r+0x15a>
 8005ce8:	7863      	ldrb	r3, [r4, #1]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d134      	bne.n	8005d58 <_vfiprintf_r+0x1b0>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9203      	str	r2, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb8      	it	lt
 8005cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cfe:	3402      	adds	r4, #2
 8005d00:	9305      	str	r3, [sp, #20]
 8005d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005dd8 <_vfiprintf_r+0x230>
 8005d06:	7821      	ldrb	r1, [r4, #0]
 8005d08:	2203      	movs	r2, #3
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	f7fa fa60 	bl	80001d0 <memchr>
 8005d10:	b138      	cbz	r0, 8005d22 <_vfiprintf_r+0x17a>
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	eba0 000a 	sub.w	r0, r0, sl
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	4082      	lsls	r2, r0
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	3401      	adds	r4, #1
 8005d20:	9304      	str	r3, [sp, #16]
 8005d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d26:	4829      	ldr	r0, [pc, #164]	; (8005dcc <_vfiprintf_r+0x224>)
 8005d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d2c:	2206      	movs	r2, #6
 8005d2e:	f7fa fa4f 	bl	80001d0 <memchr>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d03f      	beq.n	8005db6 <_vfiprintf_r+0x20e>
 8005d36:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <_vfiprintf_r+0x228>)
 8005d38:	bb1b      	cbnz	r3, 8005d82 <_vfiprintf_r+0x1da>
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	3307      	adds	r3, #7
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	3308      	adds	r3, #8
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	443b      	add	r3, r7
 8005d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4c:	e768      	b.n	8005c20 <_vfiprintf_r+0x78>
 8005d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d52:	460c      	mov	r4, r1
 8005d54:	2001      	movs	r0, #1
 8005d56:	e7a6      	b.n	8005ca6 <_vfiprintf_r+0xfe>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	3401      	adds	r4, #1
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f04f 0c0a 	mov.w	ip, #10
 8005d64:	4620      	mov	r0, r4
 8005d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6a:	3a30      	subs	r2, #48	; 0x30
 8005d6c:	2a09      	cmp	r2, #9
 8005d6e:	d903      	bls.n	8005d78 <_vfiprintf_r+0x1d0>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0c6      	beq.n	8005d02 <_vfiprintf_r+0x15a>
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	e7c4      	b.n	8005d02 <_vfiprintf_r+0x15a>
 8005d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e7f0      	b.n	8005d64 <_vfiprintf_r+0x1bc>
 8005d82:	ab03      	add	r3, sp, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	462a      	mov	r2, r5
 8005d88:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <_vfiprintf_r+0x22c>)
 8005d8a:	a904      	add	r1, sp, #16
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f7fd fd9d 	bl	80038cc <_printf_float>
 8005d92:	4607      	mov	r7, r0
 8005d94:	1c78      	adds	r0, r7, #1
 8005d96:	d1d6      	bne.n	8005d46 <_vfiprintf_r+0x19e>
 8005d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d9a:	07d9      	lsls	r1, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_vfiprintf_r+0x202>
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	059a      	lsls	r2, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_vfiprintf_r+0x202>
 8005da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da6:	f7fe fbdd 	bl	8004564 <__retarget_lock_release_recursive>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	065b      	lsls	r3, r3, #25
 8005dae:	f53f af1d 	bmi.w	8005bec <_vfiprintf_r+0x44>
 8005db2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db4:	e71c      	b.n	8005bf0 <_vfiprintf_r+0x48>
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <_vfiprintf_r+0x22c>)
 8005dbe:	a904      	add	r1, sp, #16
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f7fe f827 	bl	8003e14 <_printf_i>
 8005dc6:	e7e4      	b.n	8005d92 <_vfiprintf_r+0x1ea>
 8005dc8:	08006944 	.word	0x08006944
 8005dcc:	0800694e 	.word	0x0800694e
 8005dd0:	080038cd 	.word	0x080038cd
 8005dd4:	08005b83 	.word	0x08005b83
 8005dd8:	0800694a 	.word	0x0800694a

08005ddc <__sflush_r>:
 8005ddc:	898a      	ldrh	r2, [r1, #12]
 8005dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	4605      	mov	r5, r0
 8005de4:	0710      	lsls	r0, r2, #28
 8005de6:	460c      	mov	r4, r1
 8005de8:	d458      	bmi.n	8005e9c <__sflush_r+0xc0>
 8005dea:	684b      	ldr	r3, [r1, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dc05      	bgt.n	8005dfc <__sflush_r+0x20>
 8005df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc02      	bgt.n	8005dfc <__sflush_r+0x20>
 8005df6:	2000      	movs	r0, #0
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	d0f9      	beq.n	8005df6 <__sflush_r+0x1a>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e08:	682f      	ldr	r7, [r5, #0]
 8005e0a:	6a21      	ldr	r1, [r4, #32]
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	d032      	beq.n	8005e76 <__sflush_r+0x9a>
 8005e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	075a      	lsls	r2, r3, #29
 8005e16:	d505      	bpl.n	8005e24 <__sflush_r+0x48>
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	1ac0      	subs	r0, r0, r3
 8005e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e1e:	b10b      	cbz	r3, 8005e24 <__sflush_r+0x48>
 8005e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e22:	1ac0      	subs	r0, r0, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	4602      	mov	r2, r0
 8005e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2a:	6a21      	ldr	r1, [r4, #32]
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b0      	blx	r6
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	d106      	bne.n	8005e44 <__sflush_r+0x68>
 8005e36:	6829      	ldr	r1, [r5, #0]
 8005e38:	291d      	cmp	r1, #29
 8005e3a:	d82b      	bhi.n	8005e94 <__sflush_r+0xb8>
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <__sflush_r+0x108>)
 8005e3e:	410a      	asrs	r2, r1
 8005e40:	07d6      	lsls	r6, r2, #31
 8005e42:	d427      	bmi.n	8005e94 <__sflush_r+0xb8>
 8005e44:	2200      	movs	r2, #0
 8005e46:	6062      	str	r2, [r4, #4]
 8005e48:	04d9      	lsls	r1, r3, #19
 8005e4a:	6922      	ldr	r2, [r4, #16]
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	d504      	bpl.n	8005e5a <__sflush_r+0x7e>
 8005e50:	1c42      	adds	r2, r0, #1
 8005e52:	d101      	bne.n	8005e58 <__sflush_r+0x7c>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b903      	cbnz	r3, 8005e5a <__sflush_r+0x7e>
 8005e58:	6560      	str	r0, [r4, #84]	; 0x54
 8005e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e5c:	602f      	str	r7, [r5, #0]
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	d0c9      	beq.n	8005df6 <__sflush_r+0x1a>
 8005e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d002      	beq.n	8005e70 <__sflush_r+0x94>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7ff f9f6 	bl	800525c <_free_r>
 8005e70:	2000      	movs	r0, #0
 8005e72:	6360      	str	r0, [r4, #52]	; 0x34
 8005e74:	e7c0      	b.n	8005df8 <__sflush_r+0x1c>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b0      	blx	r6
 8005e7c:	1c41      	adds	r1, r0, #1
 8005e7e:	d1c8      	bne.n	8005e12 <__sflush_r+0x36>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0c5      	beq.n	8005e12 <__sflush_r+0x36>
 8005e86:	2b1d      	cmp	r3, #29
 8005e88:	d001      	beq.n	8005e8e <__sflush_r+0xb2>
 8005e8a:	2b16      	cmp	r3, #22
 8005e8c:	d101      	bne.n	8005e92 <__sflush_r+0xb6>
 8005e8e:	602f      	str	r7, [r5, #0]
 8005e90:	e7b1      	b.n	8005df6 <__sflush_r+0x1a>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	e7ad      	b.n	8005df8 <__sflush_r+0x1c>
 8005e9c:	690f      	ldr	r7, [r1, #16]
 8005e9e:	2f00      	cmp	r7, #0
 8005ea0:	d0a9      	beq.n	8005df6 <__sflush_r+0x1a>
 8005ea2:	0793      	lsls	r3, r2, #30
 8005ea4:	680e      	ldr	r6, [r1, #0]
 8005ea6:	bf08      	it	eq
 8005ea8:	694b      	ldreq	r3, [r1, #20]
 8005eaa:	600f      	str	r7, [r1, #0]
 8005eac:	bf18      	it	ne
 8005eae:	2300      	movne	r3, #0
 8005eb0:	eba6 0807 	sub.w	r8, r6, r7
 8005eb4:	608b      	str	r3, [r1, #8]
 8005eb6:	f1b8 0f00 	cmp.w	r8, #0
 8005eba:	dd9c      	ble.n	8005df6 <__sflush_r+0x1a>
 8005ebc:	6a21      	ldr	r1, [r4, #32]
 8005ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec0:	4643      	mov	r3, r8
 8005ec2:	463a      	mov	r2, r7
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b0      	blx	r6
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	dc06      	bgt.n	8005eda <__sflush_r+0xfe>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	e78e      	b.n	8005df8 <__sflush_r+0x1c>
 8005eda:	4407      	add	r7, r0
 8005edc:	eba8 0800 	sub.w	r8, r8, r0
 8005ee0:	e7e9      	b.n	8005eb6 <__sflush_r+0xda>
 8005ee2:	bf00      	nop
 8005ee4:	dfbffffe 	.word	0xdfbffffe

08005ee8 <_fflush_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	690b      	ldr	r3, [r1, #16]
 8005eec:	4605      	mov	r5, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	b913      	cbnz	r3, 8005ef8 <_fflush_r+0x10>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	b118      	cbz	r0, 8005f02 <_fflush_r+0x1a>
 8005efa:	6a03      	ldr	r3, [r0, #32]
 8005efc:	b90b      	cbnz	r3, 8005f02 <_fflush_r+0x1a>
 8005efe:	f7fe f937 	bl	8004170 <__sinit>
 8005f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f3      	beq.n	8005ef2 <_fflush_r+0xa>
 8005f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f0c:	07d0      	lsls	r0, r2, #31
 8005f0e:	d404      	bmi.n	8005f1a <_fflush_r+0x32>
 8005f10:	0599      	lsls	r1, r3, #22
 8005f12:	d402      	bmi.n	8005f1a <_fflush_r+0x32>
 8005f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f16:	f7fe fb24 	bl	8004562 <__retarget_lock_acquire_recursive>
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f7ff ff5d 	bl	8005ddc <__sflush_r>
 8005f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f24:	07da      	lsls	r2, r3, #31
 8005f26:	4605      	mov	r5, r0
 8005f28:	d4e4      	bmi.n	8005ef4 <_fflush_r+0xc>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	059b      	lsls	r3, r3, #22
 8005f2e:	d4e1      	bmi.n	8005ef4 <_fflush_r+0xc>
 8005f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f32:	f7fe fb17 	bl	8004564 <__retarget_lock_release_recursive>
 8005f36:	e7dd      	b.n	8005ef4 <_fflush_r+0xc>

08005f38 <__swhatbuf_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	2900      	cmp	r1, #0
 8005f42:	b096      	sub	sp, #88	; 0x58
 8005f44:	4615      	mov	r5, r2
 8005f46:	461e      	mov	r6, r3
 8005f48:	da0d      	bge.n	8005f66 <__swhatbuf_r+0x2e>
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	bf0c      	ite	eq
 8005f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f5a:	2340      	movne	r3, #64	; 0x40
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	6031      	str	r1, [r6, #0]
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	b016      	add	sp, #88	; 0x58
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	466a      	mov	r2, sp
 8005f68:	f000 f848 	bl	8005ffc <_fstat_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	dbec      	blt.n	8005f4a <__swhatbuf_r+0x12>
 8005f70:	9901      	ldr	r1, [sp, #4]
 8005f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f7a:	4259      	negs	r1, r3
 8005f7c:	4159      	adcs	r1, r3
 8005f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f82:	e7eb      	b.n	8005f5c <__swhatbuf_r+0x24>

08005f84 <__smakebuf_r>:
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f88:	079d      	lsls	r5, r3, #30
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d507      	bpl.n	8005fa0 <__smakebuf_r+0x1c>
 8005f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	ab01      	add	r3, sp, #4
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f7ff ffc8 	bl	8005f38 <__swhatbuf_r>
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff f9c9 	bl	8005344 <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x44>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ef      	bmi.n	8005f9c <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e3      	b.n	8005f90 <__smakebuf_r+0xc>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	6163      	str	r3, [r4, #20]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	6120      	str	r0, [r4, #16]
 8005fda:	b15b      	cbz	r3, 8005ff4 <__smakebuf_r+0x70>
 8005fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f81d 	bl	8006020 <_isatty_r>
 8005fe6:	b128      	cbz	r0, 8005ff4 <__smakebuf_r+0x70>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	431d      	orrs	r5, r3
 8005ff8:	81a5      	strh	r5, [r4, #12]
 8005ffa:	e7cf      	b.n	8005f9c <__smakebuf_r+0x18>

08005ffc <_fstat_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_fstat_r+0x20>)
 8006000:	2300      	movs	r3, #0
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	f7fb fdb8 	bl	8001b7e <_fstat>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	d102      	bne.n	8006018 <_fstat_r+0x1c>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	b103      	cbz	r3, 8006018 <_fstat_r+0x1c>
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	bd38      	pop	{r3, r4, r5, pc}
 800601a:	bf00      	nop
 800601c:	200003e4 	.word	0x200003e4

08006020 <_isatty_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d06      	ldr	r5, [pc, #24]	; (800603c <_isatty_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb fdb7 	bl	8001b9e <_isatty>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_isatty_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_isatty_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200003e4 	.word	0x200003e4

08006040 <_sbrk_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	; (800605c <_sbrk_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fb fdc0 	bl	8001bd0 <_sbrk>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_sbrk_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_sbrk_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	200003e4 	.word	0x200003e4

08006060 <memcpy>:
 8006060:	440a      	add	r2, r1
 8006062:	4291      	cmp	r1, r2
 8006064:	f100 33ff 	add.w	r3, r0, #4294967295
 8006068:	d100      	bne.n	800606c <memcpy+0xc>
 800606a:	4770      	bx	lr
 800606c:	b510      	push	{r4, lr}
 800606e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006076:	4291      	cmp	r1, r2
 8006078:	d1f9      	bne.n	800606e <memcpy+0xe>
 800607a:	bd10      	pop	{r4, pc}

0800607c <__assert_func>:
 800607c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800607e:	4614      	mov	r4, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <__assert_func+0x2c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4605      	mov	r5, r0
 8006088:	68d8      	ldr	r0, [r3, #12]
 800608a:	b14c      	cbz	r4, 80060a0 <__assert_func+0x24>
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <__assert_func+0x30>)
 800608e:	9100      	str	r1, [sp, #0]
 8006090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006094:	4906      	ldr	r1, [pc, #24]	; (80060b0 <__assert_func+0x34>)
 8006096:	462b      	mov	r3, r5
 8006098:	f000 f844 	bl	8006124 <fiprintf>
 800609c:	f000 f854 	bl	8006148 <abort>
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <__assert_func+0x38>)
 80060a2:	461c      	mov	r4, r3
 80060a4:	e7f3      	b.n	800608e <__assert_func+0x12>
 80060a6:	bf00      	nop
 80060a8:	20000064 	.word	0x20000064
 80060ac:	0800695f 	.word	0x0800695f
 80060b0:	0800696c 	.word	0x0800696c
 80060b4:	0800699a 	.word	0x0800699a

080060b8 <_calloc_r>:
 80060b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ba:	fba1 2402 	umull	r2, r4, r1, r2
 80060be:	b94c      	cbnz	r4, 80060d4 <_calloc_r+0x1c>
 80060c0:	4611      	mov	r1, r2
 80060c2:	9201      	str	r2, [sp, #4]
 80060c4:	f7ff f93e 	bl	8005344 <_malloc_r>
 80060c8:	9a01      	ldr	r2, [sp, #4]
 80060ca:	4605      	mov	r5, r0
 80060cc:	b930      	cbnz	r0, 80060dc <_calloc_r+0x24>
 80060ce:	4628      	mov	r0, r5
 80060d0:	b003      	add	sp, #12
 80060d2:	bd30      	pop	{r4, r5, pc}
 80060d4:	220c      	movs	r2, #12
 80060d6:	6002      	str	r2, [r0, #0]
 80060d8:	2500      	movs	r5, #0
 80060da:	e7f8      	b.n	80060ce <_calloc_r+0x16>
 80060dc:	4621      	mov	r1, r4
 80060de:	f7fe f9c3 	bl	8004468 <memset>
 80060e2:	e7f4      	b.n	80060ce <_calloc_r+0x16>

080060e4 <__ascii_mbtowc>:
 80060e4:	b082      	sub	sp, #8
 80060e6:	b901      	cbnz	r1, 80060ea <__ascii_mbtowc+0x6>
 80060e8:	a901      	add	r1, sp, #4
 80060ea:	b142      	cbz	r2, 80060fe <__ascii_mbtowc+0x1a>
 80060ec:	b14b      	cbz	r3, 8006102 <__ascii_mbtowc+0x1e>
 80060ee:	7813      	ldrb	r3, [r2, #0]
 80060f0:	600b      	str	r3, [r1, #0]
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	1e10      	subs	r0, r2, #0
 80060f6:	bf18      	it	ne
 80060f8:	2001      	movne	r0, #1
 80060fa:	b002      	add	sp, #8
 80060fc:	4770      	bx	lr
 80060fe:	4610      	mov	r0, r2
 8006100:	e7fb      	b.n	80060fa <__ascii_mbtowc+0x16>
 8006102:	f06f 0001 	mvn.w	r0, #1
 8006106:	e7f8      	b.n	80060fa <__ascii_mbtowc+0x16>

08006108 <__ascii_wctomb>:
 8006108:	b149      	cbz	r1, 800611e <__ascii_wctomb+0x16>
 800610a:	2aff      	cmp	r2, #255	; 0xff
 800610c:	bf85      	ittet	hi
 800610e:	238a      	movhi	r3, #138	; 0x8a
 8006110:	6003      	strhi	r3, [r0, #0]
 8006112:	700a      	strbls	r2, [r1, #0]
 8006114:	f04f 30ff 	movhi.w	r0, #4294967295
 8006118:	bf98      	it	ls
 800611a:	2001      	movls	r0, #1
 800611c:	4770      	bx	lr
 800611e:	4608      	mov	r0, r1
 8006120:	4770      	bx	lr
	...

08006124 <fiprintf>:
 8006124:	b40e      	push	{r1, r2, r3}
 8006126:	b503      	push	{r0, r1, lr}
 8006128:	4601      	mov	r1, r0
 800612a:	ab03      	add	r3, sp, #12
 800612c:	4805      	ldr	r0, [pc, #20]	; (8006144 <fiprintf+0x20>)
 800612e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006132:	6800      	ldr	r0, [r0, #0]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f7ff fd37 	bl	8005ba8 <_vfiprintf_r>
 800613a:	b002      	add	sp, #8
 800613c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006140:	b003      	add	sp, #12
 8006142:	4770      	bx	lr
 8006144:	20000064 	.word	0x20000064

08006148 <abort>:
 8006148:	b508      	push	{r3, lr}
 800614a:	2006      	movs	r0, #6
 800614c:	f000 f82c 	bl	80061a8 <raise>
 8006150:	2001      	movs	r0, #1
 8006152:	f7fb fce1 	bl	8001b18 <_exit>

08006156 <_raise_r>:
 8006156:	291f      	cmp	r1, #31
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4604      	mov	r4, r0
 800615c:	460d      	mov	r5, r1
 800615e:	d904      	bls.n	800616a <_raise_r+0x14>
 8006160:	2316      	movs	r3, #22
 8006162:	6003      	str	r3, [r0, #0]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	bd38      	pop	{r3, r4, r5, pc}
 800616a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800616c:	b112      	cbz	r2, 8006174 <_raise_r+0x1e>
 800616e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006172:	b94b      	cbnz	r3, 8006188 <_raise_r+0x32>
 8006174:	4620      	mov	r0, r4
 8006176:	f000 f831 	bl	80061dc <_getpid_r>
 800617a:	462a      	mov	r2, r5
 800617c:	4601      	mov	r1, r0
 800617e:	4620      	mov	r0, r4
 8006180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006184:	f000 b818 	b.w	80061b8 <_kill_r>
 8006188:	2b01      	cmp	r3, #1
 800618a:	d00a      	beq.n	80061a2 <_raise_r+0x4c>
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	d103      	bne.n	8006198 <_raise_r+0x42>
 8006190:	2316      	movs	r3, #22
 8006192:	6003      	str	r3, [r0, #0]
 8006194:	2001      	movs	r0, #1
 8006196:	e7e7      	b.n	8006168 <_raise_r+0x12>
 8006198:	2400      	movs	r4, #0
 800619a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800619e:	4628      	mov	r0, r5
 80061a0:	4798      	blx	r3
 80061a2:	2000      	movs	r0, #0
 80061a4:	e7e0      	b.n	8006168 <_raise_r+0x12>
	...

080061a8 <raise>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <raise+0xc>)
 80061aa:	4601      	mov	r1, r0
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f7ff bfd2 	b.w	8006156 <_raise_r>
 80061b2:	bf00      	nop
 80061b4:	20000064 	.word	0x20000064

080061b8 <_kill_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_kill_r+0x20>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	f7fb fc97 	bl	8001af8 <_kill>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	d102      	bne.n	80061d4 <_kill_r+0x1c>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	b103      	cbz	r3, 80061d4 <_kill_r+0x1c>
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	bf00      	nop
 80061d8:	200003e4 	.word	0x200003e4

080061dc <_getpid_r>:
 80061dc:	f7fb bc84 	b.w	8001ae8 <_getpid>

080061e0 <atan2>:
 80061e0:	f000 b802 	b.w	80061e8 <__ieee754_atan2>
 80061e4:	0000      	movs	r0, r0
	...

080061e8 <__ieee754_atan2>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	ec57 6b11 	vmov	r6, r7, d1
 80061f0:	4273      	negs	r3, r6
 80061f2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8006370 <__ieee754_atan2+0x188>
 80061f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80061fa:	4333      	orrs	r3, r6
 80061fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006200:	4543      	cmp	r3, r8
 8006202:	ec51 0b10 	vmov	r0, r1, d0
 8006206:	ee11 5a10 	vmov	r5, s2
 800620a:	d80a      	bhi.n	8006222 <__ieee754_atan2+0x3a>
 800620c:	4244      	negs	r4, r0
 800620e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006212:	4304      	orrs	r4, r0
 8006214:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006218:	4544      	cmp	r4, r8
 800621a:	ee10 9a10 	vmov	r9, s0
 800621e:	468e      	mov	lr, r1
 8006220:	d907      	bls.n	8006232 <__ieee754_atan2+0x4a>
 8006222:	4632      	mov	r2, r6
 8006224:	463b      	mov	r3, r7
 8006226:	f7fa f831 	bl	800028c <__adddf3>
 800622a:	ec41 0b10 	vmov	d0, r0, r1
 800622e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006232:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006236:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800623a:	4334      	orrs	r4, r6
 800623c:	d103      	bne.n	8006246 <__ieee754_atan2+0x5e>
 800623e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006242:	f000 b899 	b.w	8006378 <atan>
 8006246:	17bc      	asrs	r4, r7, #30
 8006248:	f004 0402 	and.w	r4, r4, #2
 800624c:	ea53 0909 	orrs.w	r9, r3, r9
 8006250:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006254:	d107      	bne.n	8006266 <__ieee754_atan2+0x7e>
 8006256:	2c02      	cmp	r4, #2
 8006258:	d05f      	beq.n	800631a <__ieee754_atan2+0x132>
 800625a:	2c03      	cmp	r4, #3
 800625c:	d1e5      	bne.n	800622a <__ieee754_atan2+0x42>
 800625e:	a140      	add	r1, pc, #256	; (adr r1, 8006360 <__ieee754_atan2+0x178>)
 8006260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006264:	e7e1      	b.n	800622a <__ieee754_atan2+0x42>
 8006266:	4315      	orrs	r5, r2
 8006268:	d106      	bne.n	8006278 <__ieee754_atan2+0x90>
 800626a:	f1be 0f00 	cmp.w	lr, #0
 800626e:	da5f      	bge.n	8006330 <__ieee754_atan2+0x148>
 8006270:	a13d      	add	r1, pc, #244	; (adr r1, 8006368 <__ieee754_atan2+0x180>)
 8006272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006276:	e7d8      	b.n	800622a <__ieee754_atan2+0x42>
 8006278:	4542      	cmp	r2, r8
 800627a:	d10f      	bne.n	800629c <__ieee754_atan2+0xb4>
 800627c:	4293      	cmp	r3, r2
 800627e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006282:	d107      	bne.n	8006294 <__ieee754_atan2+0xac>
 8006284:	2c02      	cmp	r4, #2
 8006286:	d84c      	bhi.n	8006322 <__ieee754_atan2+0x13a>
 8006288:	4b33      	ldr	r3, [pc, #204]	; (8006358 <__ieee754_atan2+0x170>)
 800628a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800628e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006292:	e7ca      	b.n	800622a <__ieee754_atan2+0x42>
 8006294:	2c02      	cmp	r4, #2
 8006296:	d848      	bhi.n	800632a <__ieee754_atan2+0x142>
 8006298:	4b30      	ldr	r3, [pc, #192]	; (800635c <__ieee754_atan2+0x174>)
 800629a:	e7f6      	b.n	800628a <__ieee754_atan2+0xa2>
 800629c:	4543      	cmp	r3, r8
 800629e:	d0e4      	beq.n	800626a <__ieee754_atan2+0x82>
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80062a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062aa:	da1e      	bge.n	80062ea <__ieee754_atan2+0x102>
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	da01      	bge.n	80062b4 <__ieee754_atan2+0xcc>
 80062b0:	323c      	adds	r2, #60	; 0x3c
 80062b2:	db1e      	blt.n	80062f2 <__ieee754_atan2+0x10a>
 80062b4:	4632      	mov	r2, r6
 80062b6:	463b      	mov	r3, r7
 80062b8:	f7fa fac8 	bl	800084c <__aeabi_ddiv>
 80062bc:	ec41 0b10 	vmov	d0, r0, r1
 80062c0:	f000 f9fa 	bl	80066b8 <fabs>
 80062c4:	f000 f858 	bl	8006378 <atan>
 80062c8:	ec51 0b10 	vmov	r0, r1, d0
 80062cc:	2c01      	cmp	r4, #1
 80062ce:	d013      	beq.n	80062f8 <__ieee754_atan2+0x110>
 80062d0:	2c02      	cmp	r4, #2
 80062d2:	d015      	beq.n	8006300 <__ieee754_atan2+0x118>
 80062d4:	2c00      	cmp	r4, #0
 80062d6:	d0a8      	beq.n	800622a <__ieee754_atan2+0x42>
 80062d8:	a317      	add	r3, pc, #92	; (adr r3, 8006338 <__ieee754_atan2+0x150>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	a317      	add	r3, pc, #92	; (adr r3, 8006340 <__ieee754_atan2+0x158>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	e014      	b.n	8006314 <__ieee754_atan2+0x12c>
 80062ea:	a117      	add	r1, pc, #92	; (adr r1, 8006348 <__ieee754_atan2+0x160>)
 80062ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f0:	e7ec      	b.n	80062cc <__ieee754_atan2+0xe4>
 80062f2:	2000      	movs	r0, #0
 80062f4:	2100      	movs	r1, #0
 80062f6:	e7e9      	b.n	80062cc <__ieee754_atan2+0xe4>
 80062f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062fc:	4619      	mov	r1, r3
 80062fe:	e794      	b.n	800622a <__ieee754_atan2+0x42>
 8006300:	a30d      	add	r3, pc, #52	; (adr r3, 8006338 <__ieee754_atan2+0x150>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ffbf 	bl	8000288 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	a10c      	add	r1, pc, #48	; (adr r1, 8006340 <__ieee754_atan2+0x158>)
 8006310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006314:	f7f9 ffb8 	bl	8000288 <__aeabi_dsub>
 8006318:	e787      	b.n	800622a <__ieee754_atan2+0x42>
 800631a:	a109      	add	r1, pc, #36	; (adr r1, 8006340 <__ieee754_atan2+0x158>)
 800631c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006320:	e783      	b.n	800622a <__ieee754_atan2+0x42>
 8006322:	a10b      	add	r1, pc, #44	; (adr r1, 8006350 <__ieee754_atan2+0x168>)
 8006324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006328:	e77f      	b.n	800622a <__ieee754_atan2+0x42>
 800632a:	2000      	movs	r0, #0
 800632c:	2100      	movs	r1, #0
 800632e:	e77c      	b.n	800622a <__ieee754_atan2+0x42>
 8006330:	a105      	add	r1, pc, #20	; (adr r1, 8006348 <__ieee754_atan2+0x160>)
 8006332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006336:	e778      	b.n	800622a <__ieee754_atan2+0x42>
 8006338:	33145c07 	.word	0x33145c07
 800633c:	3ca1a626 	.word	0x3ca1a626
 8006340:	54442d18 	.word	0x54442d18
 8006344:	400921fb 	.word	0x400921fb
 8006348:	54442d18 	.word	0x54442d18
 800634c:	3ff921fb 	.word	0x3ff921fb
 8006350:	54442d18 	.word	0x54442d18
 8006354:	3fe921fb 	.word	0x3fe921fb
 8006358:	08006aa0 	.word	0x08006aa0
 800635c:	08006ab8 	.word	0x08006ab8
 8006360:	54442d18 	.word	0x54442d18
 8006364:	c00921fb 	.word	0xc00921fb
 8006368:	54442d18 	.word	0x54442d18
 800636c:	bff921fb 	.word	0xbff921fb
 8006370:	7ff00000 	.word	0x7ff00000
 8006374:	00000000 	.word	0x00000000

08006378 <atan>:
 8006378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	ec55 4b10 	vmov	r4, r5, d0
 8006380:	4bc3      	ldr	r3, [pc, #780]	; (8006690 <atan+0x318>)
 8006382:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006386:	429e      	cmp	r6, r3
 8006388:	46ab      	mov	fp, r5
 800638a:	dd18      	ble.n	80063be <atan+0x46>
 800638c:	4bc1      	ldr	r3, [pc, #772]	; (8006694 <atan+0x31c>)
 800638e:	429e      	cmp	r6, r3
 8006390:	dc01      	bgt.n	8006396 <atan+0x1e>
 8006392:	d109      	bne.n	80063a8 <atan+0x30>
 8006394:	b144      	cbz	r4, 80063a8 <atan+0x30>
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7f9 ff75 	bl	800028c <__adddf3>
 80063a2:	4604      	mov	r4, r0
 80063a4:	460d      	mov	r5, r1
 80063a6:	e006      	b.n	80063b6 <atan+0x3e>
 80063a8:	f1bb 0f00 	cmp.w	fp, #0
 80063ac:	f300 8131 	bgt.w	8006612 <atan+0x29a>
 80063b0:	a59b      	add	r5, pc, #620	; (adr r5, 8006620 <atan+0x2a8>)
 80063b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063b6:	ec45 4b10 	vmov	d0, r4, r5
 80063ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063be:	4bb6      	ldr	r3, [pc, #728]	; (8006698 <atan+0x320>)
 80063c0:	429e      	cmp	r6, r3
 80063c2:	dc14      	bgt.n	80063ee <atan+0x76>
 80063c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80063c8:	429e      	cmp	r6, r3
 80063ca:	dc0d      	bgt.n	80063e8 <atan+0x70>
 80063cc:	a396      	add	r3, pc, #600	; (adr r3, 8006628 <atan+0x2b0>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	ee10 0a10 	vmov	r0, s0
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7f9 ff58 	bl	800028c <__adddf3>
 80063dc:	4baf      	ldr	r3, [pc, #700]	; (800669c <atan+0x324>)
 80063de:	2200      	movs	r2, #0
 80063e0:	f7fa fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d1e6      	bne.n	80063b6 <atan+0x3e>
 80063e8:	f04f 3aff 	mov.w	sl, #4294967295
 80063ec:	e02b      	b.n	8006446 <atan+0xce>
 80063ee:	f000 f963 	bl	80066b8 <fabs>
 80063f2:	4bab      	ldr	r3, [pc, #684]	; (80066a0 <atan+0x328>)
 80063f4:	429e      	cmp	r6, r3
 80063f6:	ec55 4b10 	vmov	r4, r5, d0
 80063fa:	f300 80bf 	bgt.w	800657c <atan+0x204>
 80063fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006402:	429e      	cmp	r6, r3
 8006404:	f300 80a0 	bgt.w	8006548 <atan+0x1d0>
 8006408:	ee10 2a10 	vmov	r2, s0
 800640c:	ee10 0a10 	vmov	r0, s0
 8006410:	462b      	mov	r3, r5
 8006412:	4629      	mov	r1, r5
 8006414:	f7f9 ff3a 	bl	800028c <__adddf3>
 8006418:	4ba0      	ldr	r3, [pc, #640]	; (800669c <atan+0x324>)
 800641a:	2200      	movs	r2, #0
 800641c:	f7f9 ff34 	bl	8000288 <__aeabi_dsub>
 8006420:	2200      	movs	r2, #0
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7f9 ff2d 	bl	800028c <__adddf3>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f7fa fa07 	bl	800084c <__aeabi_ddiv>
 800643e:	f04f 0a00 	mov.w	sl, #0
 8006442:	4604      	mov	r4, r0
 8006444:	460d      	mov	r5, r1
 8006446:	4622      	mov	r2, r4
 8006448:	462b      	mov	r3, r5
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	f7fa f8d3 	bl	80005f8 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4680      	mov	r8, r0
 8006458:	4689      	mov	r9, r1
 800645a:	f7fa f8cd 	bl	80005f8 <__aeabi_dmul>
 800645e:	a374      	add	r3, pc, #464	; (adr r3, 8006630 <atan+0x2b8>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	a372      	add	r3, pc, #456	; (adr r3, 8006638 <atan+0x2c0>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7f9 ff0b 	bl	800028c <__adddf3>
 8006476:	4632      	mov	r2, r6
 8006478:	463b      	mov	r3, r7
 800647a:	f7fa f8bd 	bl	80005f8 <__aeabi_dmul>
 800647e:	a370      	add	r3, pc, #448	; (adr r3, 8006640 <atan+0x2c8>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7f9 ff02 	bl	800028c <__adddf3>
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	f7fa f8b4 	bl	80005f8 <__aeabi_dmul>
 8006490:	a36d      	add	r3, pc, #436	; (adr r3, 8006648 <atan+0x2d0>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f7f9 fef9 	bl	800028c <__adddf3>
 800649a:	4632      	mov	r2, r6
 800649c:	463b      	mov	r3, r7
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	a36b      	add	r3, pc, #428	; (adr r3, 8006650 <atan+0x2d8>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7f9 fef0 	bl	800028c <__adddf3>
 80064ac:	4632      	mov	r2, r6
 80064ae:	463b      	mov	r3, r7
 80064b0:	f7fa f8a2 	bl	80005f8 <__aeabi_dmul>
 80064b4:	a368      	add	r3, pc, #416	; (adr r3, 8006658 <atan+0x2e0>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7f9 fee7 	bl	800028c <__adddf3>
 80064be:	4642      	mov	r2, r8
 80064c0:	464b      	mov	r3, r9
 80064c2:	f7fa f899 	bl	80005f8 <__aeabi_dmul>
 80064c6:	a366      	add	r3, pc, #408	; (adr r3, 8006660 <atan+0x2e8>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	4680      	mov	r8, r0
 80064ce:	4689      	mov	r9, r1
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	a363      	add	r3, pc, #396	; (adr r3, 8006668 <atan+0x2f0>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	4632      	mov	r2, r6
 80064e4:	463b      	mov	r3, r7
 80064e6:	f7fa f887 	bl	80005f8 <__aeabi_dmul>
 80064ea:	a361      	add	r3, pc, #388	; (adr r3, 8006670 <atan+0x2f8>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7f9 feca 	bl	8000288 <__aeabi_dsub>
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	f7fa f87e 	bl	80005f8 <__aeabi_dmul>
 80064fc:	a35e      	add	r3, pc, #376	; (adr r3, 8006678 <atan+0x300>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	a35c      	add	r3, pc, #368	; (adr r3, 8006680 <atan+0x308>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f7f9 feb8 	bl	8000288 <__aeabi_dsub>
 8006518:	4632      	mov	r2, r6
 800651a:	463b      	mov	r3, r7
 800651c:	f7fa f86c 	bl	80005f8 <__aeabi_dmul>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7f9 feb0 	bl	800028c <__adddf3>
 800652c:	4622      	mov	r2, r4
 800652e:	462b      	mov	r3, r5
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	d14b      	bne.n	80065d6 <atan+0x25e>
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	f7f9 fea1 	bl	8000288 <__aeabi_dsub>
 8006546:	e72c      	b.n	80063a2 <atan+0x2a>
 8006548:	ee10 0a10 	vmov	r0, s0
 800654c:	4b53      	ldr	r3, [pc, #332]	; (800669c <atan+0x324>)
 800654e:	2200      	movs	r2, #0
 8006550:	4629      	mov	r1, r5
 8006552:	f7f9 fe99 	bl	8000288 <__aeabi_dsub>
 8006556:	4b51      	ldr	r3, [pc, #324]	; (800669c <atan+0x324>)
 8006558:	4606      	mov	r6, r0
 800655a:	460f      	mov	r7, r1
 800655c:	2200      	movs	r2, #0
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7f9 fe93 	bl	800028c <__adddf3>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7fa f96d 	bl	800084c <__aeabi_ddiv>
 8006572:	f04f 0a01 	mov.w	sl, #1
 8006576:	4604      	mov	r4, r0
 8006578:	460d      	mov	r5, r1
 800657a:	e764      	b.n	8006446 <atan+0xce>
 800657c:	4b49      	ldr	r3, [pc, #292]	; (80066a4 <atan+0x32c>)
 800657e:	429e      	cmp	r6, r3
 8006580:	da1d      	bge.n	80065be <atan+0x246>
 8006582:	ee10 0a10 	vmov	r0, s0
 8006586:	4b48      	ldr	r3, [pc, #288]	; (80066a8 <atan+0x330>)
 8006588:	2200      	movs	r2, #0
 800658a:	4629      	mov	r1, r5
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	4b45      	ldr	r3, [pc, #276]	; (80066a8 <atan+0x330>)
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	2200      	movs	r2, #0
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	4b3e      	ldr	r3, [pc, #248]	; (800669c <atan+0x324>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe72 	bl	800028c <__adddf3>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7fa f94c 	bl	800084c <__aeabi_ddiv>
 80065b4:	f04f 0a02 	mov.w	sl, #2
 80065b8:	4604      	mov	r4, r0
 80065ba:	460d      	mov	r5, r1
 80065bc:	e743      	b.n	8006446 <atan+0xce>
 80065be:	462b      	mov	r3, r5
 80065c0:	ee10 2a10 	vmov	r2, s0
 80065c4:	4939      	ldr	r1, [pc, #228]	; (80066ac <atan+0x334>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7fa f940 	bl	800084c <__aeabi_ddiv>
 80065cc:	f04f 0a03 	mov.w	sl, #3
 80065d0:	4604      	mov	r4, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	e737      	b.n	8006446 <atan+0xce>
 80065d6:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <atan+0x338>)
 80065d8:	4e36      	ldr	r6, [pc, #216]	; (80066b4 <atan+0x33c>)
 80065da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7f9 fe51 	bl	8000288 <__aeabi_dsub>
 80065e6:	4622      	mov	r2, r4
 80065e8:	462b      	mov	r3, r5
 80065ea:	f7f9 fe4d 	bl	8000288 <__aeabi_dsub>
 80065ee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80065fa:	f7f9 fe45 	bl	8000288 <__aeabi_dsub>
 80065fe:	f1bb 0f00 	cmp.w	fp, #0
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	f6bf aed6 	bge.w	80063b6 <atan+0x3e>
 800660a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800660e:	461d      	mov	r5, r3
 8006610:	e6d1      	b.n	80063b6 <atan+0x3e>
 8006612:	a51d      	add	r5, pc, #116	; (adr r5, 8006688 <atan+0x310>)
 8006614:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006618:	e6cd      	b.n	80063b6 <atan+0x3e>
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w
 8006620:	54442d18 	.word	0x54442d18
 8006624:	bff921fb 	.word	0xbff921fb
 8006628:	8800759c 	.word	0x8800759c
 800662c:	7e37e43c 	.word	0x7e37e43c
 8006630:	e322da11 	.word	0xe322da11
 8006634:	3f90ad3a 	.word	0x3f90ad3a
 8006638:	24760deb 	.word	0x24760deb
 800663c:	3fa97b4b 	.word	0x3fa97b4b
 8006640:	a0d03d51 	.word	0xa0d03d51
 8006644:	3fb10d66 	.word	0x3fb10d66
 8006648:	c54c206e 	.word	0xc54c206e
 800664c:	3fb745cd 	.word	0x3fb745cd
 8006650:	920083ff 	.word	0x920083ff
 8006654:	3fc24924 	.word	0x3fc24924
 8006658:	5555550d 	.word	0x5555550d
 800665c:	3fd55555 	.word	0x3fd55555
 8006660:	2c6a6c2f 	.word	0x2c6a6c2f
 8006664:	bfa2b444 	.word	0xbfa2b444
 8006668:	52defd9a 	.word	0x52defd9a
 800666c:	3fadde2d 	.word	0x3fadde2d
 8006670:	af749a6d 	.word	0xaf749a6d
 8006674:	3fb3b0f2 	.word	0x3fb3b0f2
 8006678:	fe231671 	.word	0xfe231671
 800667c:	3fbc71c6 	.word	0x3fbc71c6
 8006680:	9998ebc4 	.word	0x9998ebc4
 8006684:	3fc99999 	.word	0x3fc99999
 8006688:	54442d18 	.word	0x54442d18
 800668c:	3ff921fb 	.word	0x3ff921fb
 8006690:	440fffff 	.word	0x440fffff
 8006694:	7ff00000 	.word	0x7ff00000
 8006698:	3fdbffff 	.word	0x3fdbffff
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	3ff2ffff 	.word	0x3ff2ffff
 80066a4:	40038000 	.word	0x40038000
 80066a8:	3ff80000 	.word	0x3ff80000
 80066ac:	bff00000 	.word	0xbff00000
 80066b0:	08006af0 	.word	0x08006af0
 80066b4:	08006ad0 	.word	0x08006ad0

080066b8 <fabs>:
 80066b8:	ec51 0b10 	vmov	r0, r1, d0
 80066bc:	ee10 2a10 	vmov	r2, s0
 80066c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066c4:	ec43 2b10 	vmov	d0, r2, r3
 80066c8:	4770      	bx	lr
	...

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
