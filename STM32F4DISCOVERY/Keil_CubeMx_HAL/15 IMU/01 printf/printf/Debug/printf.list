
printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800932c  0800932c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009334  08009334  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000a24  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aac  20000aac  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000153eb  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003abf  00000000  00000000  000354e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011e8  00000000  00000000  00038fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d98  00000000  00000000  0003a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a30  00000000  00000000  0003af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018bb6  00000000  00000000  0005f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd3a7  00000000  00000000  0007850e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000508c  00000000  00000000  001458b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  0014a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080092e4 	.word	0x080092e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080092e4 	.word	0x080092e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d013      	beq.n	8000504 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00b      	beq.n	8000504 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004ec:	e000      	b.n	80004f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc76 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f826 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f922 	bl	8000768 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000524:	f000 f88c 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000528:	f000 f8b8 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 800052c:	f000 f8e6 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000530:	f007 ff12 	bl	8008358 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000534:	f007 ff36 	bl	80083a4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    printf("Hello rom dynamics\n");
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x50>)
 800053a:	f008 fbe9 	bl	8008d10 <puts>
    //HAL_Delay(1000);
    my_data++;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0x54>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <main+0x54>)
 8000546:	6013      	str	r3, [r2, #0]
    if(my_data == 999) { my_data = 0; }
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <main+0x54>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000550:	4293      	cmp	r3, r2
 8000552:	d102      	bne.n	800055a <main+0x46>
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0x54>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 800055a:	200a      	movs	r0, #10
 800055c:	f000 fcc6 	bl	8000eec <HAL_Delay>
    MX_USB_HOST_Process();
 8000560:	e7e8      	b.n	8000534 <main+0x20>
 8000562:	bf00      	nop
 8000564:	080092fc 	.word	0x080092fc
 8000568:	20000198 	.word	0x20000198

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fca8 	bl	8008ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fe64 	bl	80042c0 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 f9cd 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f8c5 	bl	80047b0 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 f9b6 	bl	800099c <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f003 f83b 	bl	80036f8 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f988 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000a4 	.word	0x200000a4
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f003 f950 	bl	8003980 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 f959 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000f8 	.word	0x200000f8
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f004 fb7d 	bl	8004e4c <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f920 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000140 	.word	0x20000140
 8000764:	40013000 	.word	0x40013000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b72      	ldr	r3, [pc, #456]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a71      	ldr	r2, [pc, #452]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6f      	ldr	r3, [pc, #444]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b6b      	ldr	r3, [pc, #428]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a6a      	ldr	r2, [pc, #424]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b68      	ldr	r3, [pc, #416]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b64      	ldr	r3, [pc, #400]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a63      	ldr	r2, [pc, #396]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b61      	ldr	r3, [pc, #388]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b5d      	ldr	r3, [pc, #372]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a5c      	ldr	r2, [pc, #368]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b5a      	ldr	r3, [pc, #360]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b56      	ldr	r3, [pc, #344]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a55      	ldr	r2, [pc, #340]	; (800094c <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b53      	ldr	r3, [pc, #332]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b4f      	ldr	r3, [pc, #316]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a4e      	ldr	r2, [pc, #312]	; (800094c <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b4c      	ldr	r3, [pc, #304]	; (800094c <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4849      	ldr	r0, [pc, #292]	; (8000950 <MX_GPIO_Init+0x1e8>)
 800082c:	f000 fe30 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	4847      	ldr	r0, [pc, #284]	; (8000954 <MX_GPIO_Init+0x1ec>)
 8000836:	f000 fe2b 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083a:	2200      	movs	r2, #0
 800083c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000840:	4845      	ldr	r0, [pc, #276]	; (8000958 <MX_GPIO_Init+0x1f0>)
 8000842:	f000 fe25 	bl	8001490 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483c      	ldr	r0, [pc, #240]	; (8000950 <MX_GPIO_Init+0x1e8>)
 800085e:	f000 fc7b 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4836      	ldr	r0, [pc, #216]	; (8000954 <MX_GPIO_Init+0x1ec>)
 800087a:	f000 fc6d 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	482e      	ldr	r0, [pc, #184]	; (8000954 <MX_GPIO_Init+0x1ec>)
 800089a:	f000 fc5d 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	482a      	ldr	r0, [pc, #168]	; (800095c <MX_GPIO_Init+0x1f4>)
 80008b4:	f000 fc50 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b8:	2304      	movs	r3, #4
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4825      	ldr	r0, [pc, #148]	; (8000960 <MX_GPIO_Init+0x1f8>)
 80008cc:	f000 fc44 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	481c      	ldr	r0, [pc, #112]	; (8000960 <MX_GPIO_Init+0x1f8>)
 80008ee:	f000 fc33 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_GPIO_Init+0x1f0>)
 800090c:	f000 fc24 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_GPIO_Init+0x1f0>)
 8000924:	f000 fc18 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x1e8>)
 800093e:	f000 fc0b 	bl	8001158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400

08000964 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e009      	b.n	800098a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	60ba      	str	r2, [r7, #8]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fda0 	bl	80004c4 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbf1      	blt.n	8000976 <_write+0x12>
	return len;
 8000992:	687b      	ldr	r3, [r7, #4]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f000 fb74 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_I2C_MspInit+0x84>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d12c      	bne.n	8000a74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	2312      	movs	r3, #18
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <HAL_I2C_MspInit+0x8c>)
 8000a54:	f000 fb80 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_I2C_MspInit+0x88>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400

08000a88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a31      	ldr	r2, [pc, #196]	; (8000b78 <HAL_I2S_MspInit+0xf0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d15a      	bne.n	8000b6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000abc:	23c0      	movs	r3, #192	; 0xc0
 8000abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f87d 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ad4:	f7ff ff62 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_I2S_MspInit+0xf4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <HAL_I2S_MspInit+0xf8>)
 8000b48:	f000 fb06 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <HAL_I2S_MspInit+0xfc>)
 8000b6a:	f000 faf5 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3738      	adds	r7, #56	; 0x38
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40003c00 	.word	0x40003c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020800 	.word	0x40020800

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_SPI_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000be2:	23e0      	movs	r3, #224	; 0xe0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bfe:	f000 faab 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f922 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 ff07 	bl	8001a84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000580 	.word	0x20000580

08000c80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	4601      	mov	r1, r0
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <_read+0x12>
  }

  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f008 f91a 	bl	8008f8c <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	2000019c 	.word	0x2000019c
 8000d8c:	20000ab0 	.word	0x20000ab0

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f008 f8d9 	bl	8008f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb95 	bl	8000514 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000df8:	0800933c 	.word	0x0800933c
  ldr r2, =_sbss
 8000dfc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e00:	20000aac 	.word	0x20000aac

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94f 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdb4 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f967 	bl	800113e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92f 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001a0 	.word	0x200001a0

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001a0 	.word	0x200001a0

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	; (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_GPIO_Init+0x334>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e059      	b.n	8001588 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f006 ff90 	bl	8008414 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001502:	d102      	bne.n	800150a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fd9a 	bl	8005048 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7c1a      	ldrb	r2, [r3, #16]
 800151c:	f88d 2000 	strb.w	r2, [sp]
 8001520:	3304      	adds	r3, #4
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	f003 fd1b 	bl	8004f5e <USB_CoreInit>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e026      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fd92 	bl	800506a <USB_SetCurrentMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e017      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c1a      	ldrb	r2, [r3, #16]
 8001560:	f88d 2000 	strb.w	r2, [sp]
 8001564:	3304      	adds	r3, #4
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	f003 ff34 	bl	80053d4 <USB_HostInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e004      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70bb      	strb	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_HCD_HC_Init+0x2c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e09d      	b.n	80016f8 <HAL_HCD_HC_Init+0x168>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3319      	adds	r3, #25
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	787a      	ldrb	r2, [r7, #1]
 80015ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3326      	adds	r3, #38	; 0x26
 8001610:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3316      	adds	r3, #22
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fbc8 	bl	8001dcc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800163c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da0a      	bge.n	800165a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3317      	adds	r3, #23
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e009      	b.n	800166e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3317      	adds	r3, #23
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f812 	bl	800569c <USB_GetHostSpeed>
 8001678:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800167a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10b      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2bbc      	cmp	r3, #188	; 0xbc
 8001694:	d901      	bls.n	800169a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001696:	23bc      	movs	r3, #188	; 0xbc
 8001698:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3318      	adds	r3, #24
 80016aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b298      	uxth	r0, r3
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3328      	adds	r3, #40	; 0x28
 80016c4:	4602      	mov	r2, r0
 80016c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	787c      	ldrb	r4, [r7, #1]
 80016d2:	78ba      	ldrb	r2, [r7, #2]
 80016d4:	78f9      	ldrb	r1, [r7, #3]
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4623      	mov	r3, r4
 80016e6:	f004 f801 	bl	80056ec <USB_HC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Halt+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e00f      	b.n	800173e <HAL_HCD_HC_Halt+0x3e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fb93 	bl	8005e5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	70bb      	strb	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3317      	adds	r3, #23
 8001772:	78ba      	ldrb	r2, [r7, #2]
 8001774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3326      	adds	r3, #38	; 0x26
 8001786:	787a      	ldrb	r2, [r7, #1]
 8001788:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800178a:	7c3b      	ldrb	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d114      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	332a      	adds	r3, #42	; 0x2a
 80017a0:	2203      	movs	r2, #3
 80017a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3319      	adds	r3, #25
 80017b4:	7f3a      	ldrb	r2, [r7, #28]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e009      	b.n	80017ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	332a      	adds	r3, #42	; 0x2a
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ce:	787b      	ldrb	r3, [r7, #1]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f200 8102 	bhi.w	80019da <HAL_HCD_HC_SubmitRequest+0x292>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080019c5 	.word	0x080019c5
 80017e4:	080018b1 	.word	0x080018b1
 80017e8:	0800193b 	.word	0x0800193b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017ec:	7c3b      	ldrb	r3, [r7, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 80f5 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d12d      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	333d      	adds	r3, #61	; 0x3d
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	; 0x3d
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	332a      	adds	r3, #42	; 0x2a
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800183e:	e0ce      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	332a      	adds	r3, #42	; 0x2a
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e0c3      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	331a      	adds	r3, #26
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 80b8 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333c      	adds	r3, #60	; 0x3c
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	; 0x2a
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e0a1      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	332a      	adds	r3, #42	; 0x2a
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e096      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d120      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333d      	adds	r3, #61	; 0x3d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	; 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018e0:	e07e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	; 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e073      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	333c      	adds	r3, #60	; 0x3c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	; 0x2a
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e05d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	332a      	adds	r3, #42	; 0x2a
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
      break;
 8001938:	e052      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800193a:	78bb      	ldrb	r3, [r7, #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d120      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333d      	adds	r3, #61	; 0x3d
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	; 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196a:	e039      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	; 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e02e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	333c      	adds	r3, #60	; 0x3c
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	; 0x2a
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
      break;
 80019ac:	e018      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	332a      	adds	r3, #42	; 0x2a
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e00d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	332a      	adds	r3, #42	; 0x2a
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e002      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332c      	adds	r3, #44	; 0x2c
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	8b39      	ldrh	r1, [r7, #24]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	3334      	adds	r3, #52	; 0x34
 8001a06:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	; 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3338      	adds	r3, #56	; 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3315      	adds	r3, #21
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	334d      	adds	r3, #77	; 0x4d
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3310      	adds	r3, #16
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	1d19      	adds	r1, r3, #4
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f003 ff66 	bl	8005944 <USB_HC_StartXfer>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop

08001a84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fc5b 	bl	8005356 <USB_GetMode>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f040 80fb 	bne.w	8001c9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fc1e 	bl	80052ee <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80f1 	beq.w	8001c9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fc15 	bl	80052ee <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fc05 	bl	80052ee <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fbf5 	bl	80052ee <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fbe5 	bl	80052ee <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d103      	bne.n	8001b36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fbd7 	bl	80052ee <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4a:	d120      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b66:	2110      	movs	r1, #16
 8001b68:	6938      	ldr	r0, [r7, #16]
 8001b6a:	f003 faca 	bl	8005102 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f003 faf9 	bl	8005166 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a5b      	ldrb	r3, [r3, #9]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d105      	bne.n	8001b88 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fcea 	bl	800555c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f006 fcc1 	bl	8008510 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fbab 	bl	80052ee <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba2:	d102      	bne.n	8001baa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 fd33 	bl	8003610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fb9d 	bl	80052ee <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 fc8a 	bl	80084d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fb8c 	bl	80052ee <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be0:	d139      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f926 	bl	8005e38 <USB_HC_ReadInterrupt>
 8001bec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e025      	b.n	8001c40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1e:	d106      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f905 	bl	8001e36 <HCD_HC_IN_IRQHandler>
 8001c2c:	e005      	b.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 ff67 	bl	8002b08 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	461a      	mov	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d3d3      	bcc.n	8001bf4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fb47 	bl	80052ee <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x1ea>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_HCD_IRQHandler+0x1ec>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d014      	beq.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f001 fbe4 	bl	8003452 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e000      	b.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_HCD_Start+0x16>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_HCD_Start+0x3e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fcae 	bl	800562a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f9a7 	bl	8005026 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_HCD_Stop+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00d      	b.n	8001d1c <HAL_HCD_Stop+0x32>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fa01 	bl	8006114 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fc50 	bl	80055d6 <USB_ResetPort>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	334c      	adds	r3, #76	; 0x4c
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3338      	adds	r3, #56	; 0x38
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fc92 	bl	80056ca <USB_GetCurrentFrame>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fc6d 	bl	800569c <USB_GetHostSpeed>
 8001dc2:	4603      	mov	r3, r0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	331a      	adds	r3, #26
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	331b      	adds	r3, #27
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3325      	adds	r3, #37	; 0x25
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3324      	adds	r3, #36	; 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fa5d 	bl	8005314 <USB_ReadChInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2304      	movs	r3, #4
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334d      	adds	r3, #77	; 0x4d
 8001e86:	2207      	movs	r2, #7
 8001e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 ffe1 	bl	8005e5a <USB_HC_Halt>
 8001e98:	e09e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fa36 	bl	8005314 <USB_ReadChInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb2:	d11b      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334d      	adds	r3, #77	; 0x4d
 8001ed8:	2208      	movs	r2, #8
 8001eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 ffb8 	bl	8005e5a <USB_HC_Halt>
 8001eea:	e075      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fa0d 	bl	8005314 <USB_ReadChInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d11a      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2308      	movs	r3, #8
 8001f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	; 0x4d
 8001f26:	2206      	movs	r2, #6
 8001f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 ff91 	bl	8005e5a <USB_HC_Halt>
 8001f38:	e04e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 f9e6 	bl	8005314 <USB_ReadChInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d11b      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	334d      	adds	r3, #77	; 0x4d
 8001f78:	2209      	movs	r2, #9
 8001f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 ff68 	bl	8005e5a <USB_HC_Halt>
 8001f8a:	e025      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 f9bd 	bl	8005314 <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d119      	bne.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	334d      	adds	r3, #77	; 0x4d
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 ff41 	bl	8005e5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f997 	bl	8005314 <USB_ReadChInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d112      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 ff2d 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	f000 bd75 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f003 f977 	bl	8005314 <USB_ReadChInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8128 	bne.w	8002282 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2320      	movs	r3, #32
 8002042:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	331b      	adds	r3, #27
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d119      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	331b      	adds	r3, #27
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	0151      	lsls	r1, r2, #5
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	440a      	add	r2, r1
 8002084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01b      	beq.n	80020ce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3330      	adds	r3, #48	; 0x30
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	3338      	adds	r3, #56	; 0x38
 80020cc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334d      	adds	r3, #77	; 0x4d
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3344      	adds	r3, #68	; 0x44
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3326      	adds	r3, #38	; 0x26
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3326      	adds	r3, #38	; 0x26
 800212e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002130:	2b02      	cmp	r3, #2
 8002132:	d110      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fe8c 	bl	8005e5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2310      	movs	r3, #16
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	e03d      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3326      	adds	r3, #38	; 0x26
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d00a      	beq.n	8002182 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3326      	adds	r3, #38	; 0x26
 800217c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800217e:	2b01      	cmp	r3, #1
 8002180:	d127      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	440a      	add	r2, r1
 8002198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	334c      	adds	r3, #76	; 0x4c
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 f9ad 	bl	800852c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	799b      	ldrb	r3, [r3, #6]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d13b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3338      	adds	r3, #56	; 0x38
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3328      	adds	r3, #40	; 0x28
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	1e59      	subs	r1, r3, #1
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	3328      	adds	r3, #40	; 0x28
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	fbb1 f3f3 	udiv	r3, r1, r3
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8470 	beq.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333c      	adds	r3, #60	; 0x3c
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	; 0x3c
 800224a:	4602      	mov	r2, r0
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	f000 bc58 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	333c      	adds	r3, #60	; 0x3c
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2d8      	uxtb	r0, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	; 0x3c
 800227a:	4602      	mov	r2, r0
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	f000 bc40 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f842 	bl	8005314 <USB_ReadChInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d131      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	2320      	movs	r3, #32
 80022aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	331a      	adds	r3, #26
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 841f 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331b      	adds	r3, #27
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	334d      	adds	r3, #77	; 0x4d
 80022e8:	2203      	movs	r2, #3
 80022ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fdb0 	bl	8005e5a <USB_HC_Halt>
 80022fa:	f000 bc02 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f003 f804 	bl	8005314 <USB_ReadChInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 8305 	bne.w	8002922 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2302      	movs	r3, #2
 8002328:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	334d      	adds	r3, #77	; 0x4d
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d114      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334d      	adds	r3, #77	; 0x4d
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334c      	adds	r3, #76	; 0x4c
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e2cc      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	334d      	adds	r3, #77	; 0x4d
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d114      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334d      	adds	r3, #77	; 0x4d
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334c      	adds	r3, #76	; 0x4c
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e2ac      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	334d      	adds	r3, #77	; 0x4d
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b07      	cmp	r3, #7
 80023be:	d00b      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334d      	adds	r3, #77	; 0x4d
 80023d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	f040 80a6 	bne.w	8002524 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	; 0x4d
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3344      	adds	r3, #68	; 0x44
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	3344      	adds	r3, #68	; 0x44
 800240e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3344      	adds	r3, #68	; 0x44
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d943      	bls.n	80024ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3344      	adds	r3, #68	; 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	331a      	adds	r3, #26
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d123      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	331b      	adds	r3, #27
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	331c      	adds	r3, #28
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334c      	adds	r3, #76	; 0x4c
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ac:	e229      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	334c      	adds	r3, #76	; 0x4c
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3326      	adds	r3, #38	; 0x26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3326      	adds	r3, #38	; 0x26
 80024e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8209 	bne.w	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002506:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002522:	e1ee      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334d      	adds	r3, #77	; 0x4d
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b05      	cmp	r3, #5
 8002538:	f040 80c8 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334d      	adds	r3, #77	; 0x4d
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331b      	adds	r3, #27
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 81ce 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	; 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d16b      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3348      	adds	r3, #72	; 0x48
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c59      	adds	r1, r3, #1
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4403      	add	r3, r0
 800259e:	3348      	adds	r3, #72	; 0x48
 80025a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3348      	adds	r3, #72	; 0x48
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d943      	bls.n	8002640 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3348      	adds	r3, #72	; 0x48
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3344      	adds	r3, #68	; 0x44
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d809      	bhi.n	800260a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	331c      	adds	r3, #28
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	334c      	adds	r3, #76	; 0x4c
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e014      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334c      	adds	r3, #76	; 0x4c
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e009      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	; 0x4c
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3326      	adds	r3, #38	; 0x26
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	; 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002692:	2b02      	cmp	r3, #2
 8002694:	f040 8136 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e11b      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	; 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	f040 8081 	bne.w	80027e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	; 0x4d
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	331b      	adds	r3, #27
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 80fa 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334c      	adds	r3, #76	; 0x4c
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002762:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f023 0320 	bic.w	r3, r3, #32
 8002782:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3326      	adds	r3, #38	; 0x26
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3326      	adds	r3, #38	; 0x26
 80027aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	f040 80a9 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e08e      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334d      	adds	r3, #77	; 0x4d
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d143      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	; 0x4d
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334c      	adds	r3, #76	; 0x4c
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3326      	adds	r3, #38	; 0x26
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3326      	adds	r3, #38	; 0x26
 800284a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800284c:	2b02      	cmp	r3, #2
 800284e:	d159      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002866:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e03f      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334d      	adds	r3, #77	; 0x4d
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d126      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	; 0x4d
 80028aa:	2202      	movs	r2, #2
 80028ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3344      	adds	r3, #68	; 0x44
 80028d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	334c      	adds	r3, #76	; 0x4c
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e00d      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334d      	adds	r3, #77	; 0x4d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f000 8100 	beq.w	8002b00 <HCD_HC_IN_IRQHandler+0xcca>
 8002900:	e000      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002902:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 fe06 	bl	800852c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002920:	e0ef      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fcf2 	bl	8005314 <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d12f      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334d      	adds	r3, #77	; 0x4d
 800295c:	2205      	movs	r2, #5
 800295e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	331a      	adds	r3, #26
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3344      	adds	r3, #68	; 0x44
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fa61 	bl	8005e5a <USB_HC_Halt>
 8002998:	e0b3      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fcb6 	bl	8005314 <USB_ReadChInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	f040 80a7 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3326      	adds	r3, #38	; 0x26
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d11b      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3344      	adds	r3, #68	; 0x44
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334d      	adds	r3, #77	; 0x4d
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fa2d 	bl	8005e5a <USB_HC_Halt>
 8002a00:	e03f      	b.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3326      	adds	r3, #38	; 0x26
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3326      	adds	r3, #38	; 0x26
 8002a28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d129      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3344      	adds	r3, #68	; 0x44
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	799b      	ldrb	r3, [r3, #6]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	331b      	adds	r3, #27
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d110      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334d      	adds	r3, #77	; 0x4d
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 f9ec 	bl	8005e5a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	331b      	adds	r3, #27
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d129      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
 8002afe:	e000      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b00:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 fbf4 	bl	8005314 <USB_ReadChInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d11b      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	2304      	movs	r3, #4
 8002b46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	; 0x4d
 8002b58:	2207      	movs	r2, #7
 8002b5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 f978 	bl	8005e5a <USB_HC_Halt>
 8002b6a:	f000 bc6f 	b.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fbcc 	bl	8005314 <USB_ReadChInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 8082 	bne.w	8002c8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2320      	movs	r3, #32
 8002b98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3319      	adds	r3, #25
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d124      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3319      	adds	r3, #25
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	; 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	; 0x4d
 8002be8:	2203      	movs	r2, #3
 8002bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 f930 	bl	8005e5a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331a      	adds	r3, #26
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 841d 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331b      	adds	r3, #27
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 8411 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3326      	adds	r3, #38	; 0x26
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d009      	beq.n	8002c54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331b      	adds	r3, #27
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	; 0x4d
 8002c64:	2203      	movs	r2, #3
 8002c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 f8f2 	bl	8005e5a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3344      	adds	r3, #68	; 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e3df      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fb3d 	bl	8005314 <USB_ReadChInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d111      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f8c9 	bl	8005e5a <USB_HC_Halt>
 8002cc8:	e3c0      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fb1e 	bl	8005314 <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d168      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3344      	adds	r3, #68	; 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fb08 	bl	8005314 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d112      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3319      	adds	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331b      	adds	r3, #27
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	331b      	adds	r3, #27
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	0151      	lsls	r1, r2, #5
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	440a      	add	r2, r1
 8002d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	; 0x4d
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 f854 	bl	8005e5a <USB_HC_Halt>
 8002db2:	e34b      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 faa9 	bl	8005314 <USB_ReadChInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d139      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	; 0x4d
 8002ddc:	2205      	movs	r2, #5
 8002dde:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	331a      	adds	r3, #26
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3319      	adds	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	; 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 f817 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e305      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fa63 	bl	8005314 <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11a      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2308      	movs	r3, #8
 8002e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334d      	adds	r3, #77	; 0x4d
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 ffe7 	bl	8005e5a <USB_HC_Halt>
 8002e8c:	e2de      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fa3c 	bl	8005314 <USB_ReadChInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d144      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3344      	adds	r3, #68	; 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334d      	adds	r3, #77	; 0x4d
 8002eca:	2204      	movs	r2, #4
 8002ecc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3319      	adds	r3, #25
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3319      	adds	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ff9f 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	6093      	str	r3, [r2, #8]
 8002f2e:	e28d      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 f9eb 	bl	8005314 <USB_ReadChInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d169      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	799b      	ldrb	r3, [r3, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	; 0x4d
 8002f60:	2207      	movs	r2, #7
 8002f62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 ff74 	bl	8005e5a <USB_HC_Halt>
 8002f72:	e049      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	; 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3344      	adds	r3, #68	; 0x44
 8002f96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3344      	adds	r3, #68	; 0x44
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d922      	bls.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	; 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334c      	adds	r3, #76	; 0x4c
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334c      	adds	r3, #76	; 0x4c
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f005 fa9d 	bl	800852c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff2:	e009      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	; 0x4c
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	6093      	str	r3, [r2, #8]
 800301a:	e217      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f002 f975 	bl	8005314 <USB_ReadChInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d11b      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	; 0x4d
 8003046:	2209      	movs	r2, #9
 8003048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f002 ff01 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	6093      	str	r3, [r2, #8]
 800306c:	e1ee      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 f94c 	bl	8005314 <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	f040 81df 	bne.w	8003446 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	; 0x4d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8093 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	; 0x4d
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	; 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	; 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00b      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	; 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	f040 8190 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	799b      	ldrb	r3, [r3, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	; 0x3d
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	799b      	ldrb	r3, [r3, #6]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8171 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3334      	adds	r3, #52	; 0x34
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8165 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3334      	adds	r3, #52	; 0x34
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	3328      	adds	r3, #40	; 0x28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	440b      	add	r3, r1
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4403      	add	r3, r0
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 813f 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333d      	adds	r3, #61	; 0x3d
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	; 0x3d
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e127      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	; 0x4d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d120      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	; 0x4d
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8107 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334c      	adds	r3, #76	; 0x4c
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e0fb      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	; 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d13a      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	; 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	; 0x4c
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80d1 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	331b      	adds	r3, #27
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e0b5      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	; 0x4d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d114      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	; 0x4d
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334c      	adds	r3, #76	; 0x4c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e095      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	; 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d114      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	; 0x4d
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	2205      	movs	r2, #5
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e075      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	; 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b07      	cmp	r3, #7
 8003350:	d00a      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	; 0x4d
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003364:	2b09      	cmp	r3, #9
 8003366:	d170      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	; 0x4d
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	; 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3344      	adds	r3, #68	; 0x44
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	; 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033de:	e022      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334c      	adds	r3, #76	; 0x4c
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003412:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	; 0x4c
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f005 f874 	bl	800852c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003444:	e002      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800344a:	bf00      	nop
  }
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08a      	sub	sp, #40	; 0x28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x46>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b05      	cmp	r3, #5
 8003492:	f000 80b6 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003496:	e0b7      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b3 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332c      	adds	r3, #44	; 0x2c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a7 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3338      	adds	r3, #56	; 0x38
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3334      	adds	r3, #52	; 0x34
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4299      	cmp	r1, r3
 80034e2:	f200 8083 	bhi.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332c      	adds	r3, #44	; 0x2c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	b292      	uxth	r2, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f001 fe9c 	bl	800523e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332c      	adds	r3, #44	; 0x2c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	18d1      	adds	r1, r2, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	332c      	adds	r3, #44	; 0x2c
 800352c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3338      	adds	r3, #56	; 0x38
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	3338      	adds	r3, #56	; 0x38
 8003554:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	0cdb      	lsrs	r3, r3, #19
 8003566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3328      	adds	r3, #40	; 0x28
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4293      	cmp	r3, r2
 8003584:	d13f      	bne.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	; 0x3c
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	; 0x3c
 80035e6:	4602      	mov	r2, r0
 80035e8:	701a      	strb	r2, [r3, #0]
      break;
 80035ea:	e00c      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	; 0x4c
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
      break;
 8003600:	e001      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800363c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f004 ff4e 	bl	80084f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d132      	bne.n	80036d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d126      	bne.n	80036ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a5b      	ldrb	r3, [r3, #9]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f001 ff60 	bl	800555c <USB_InitFSLSPClkSel>
 800369c:	e011      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 ff59 	bl	800555c <USB_InitFSLSPClkSel>
 80036aa:	e00a      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	79db      	ldrb	r3, [r3, #7]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f004 ff40 	bl	8008548 <HAL_HCD_PortEnabled_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f004 ff4a 	bl	8008564 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12b      	b.n	8003962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f96a 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800375c:	f001 fa20 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a81      	ldr	r2, [pc, #516]	; (800396c <HAL_I2C_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d807      	bhi.n	800377c <HAL_I2C_Init+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_I2C_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e006      	b.n	800378a <HAL_I2C_Init+0x92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a7d      	ldr	r2, [pc, #500]	; (8003974 <HAL_I2C_Init+0x27c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e7      	b.n	8003962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_I2C_Init+0x280>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_I2C_Init+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d802      	bhi.n	80037cc <HAL_I2C_Init+0xd4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e009      	b.n	80037e0 <HAL_I2C_Init+0xe8>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a69      	ldr	r2, [pc, #420]	; (800397c <HAL_I2C_Init+0x284>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	3301      	adds	r3, #1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495c      	ldr	r1, [pc, #368]	; (800396c <HAL_I2C_Init+0x274>)
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d819      	bhi.n	8003834 <HAL_I2C_Init+0x13c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e59      	subs	r1, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fbb1 f3f3 	udiv	r3, r1, r3
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003814:	400b      	ands	r3, r1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_I2C_Init+0x138>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e59      	subs	r1, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb1 f3f3 	udiv	r3, r1, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	e051      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003830:	2304      	movs	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x168>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x18e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x196>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	; (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f86b 	bl	8000a88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 f9c4 	bl	8004d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08003e0d 	.word	0x08003e0d
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffb8 	bl	8003c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff93 	bl	8003c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d13a      	bne.n	8003d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d109      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d102      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb4 	bl	8003c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d126      	bne.n	8003d88 <I2S_IRQHandler+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d11f      	bne.n	8003d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff50 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d136      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d102      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff45 	bl	8003c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d122      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11b      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff13 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e26:	4b92      	ldr	r3, [pc, #584]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a8b      	ldr	r2, [pc, #556]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e44:	4b8a      	ldr	r3, [pc, #552]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d004      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8099 	bne.w	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f925 	bl	80040c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9c8 	bl	8004228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d13a      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4969      	ldr	r1, [pc, #420]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eca:	4b69      	ldr	r3, [pc, #420]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe88 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f040 80c3 	bne.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80bd 	beq.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a49      	ldr	r2, [pc, #292]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4944      	ldr	r1, [pc, #272]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe4a 	bl	8003c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	e089      	b.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8be 	bl	800412c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8fd 	bl	80041c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d12f      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4919      	ldr	r1, [pc, #100]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdfa 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d136      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4902      	ldr	r1, [pc, #8]	; (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d106      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004066:	4b02      	ldr	r3, [pc, #8]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e006      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406a:	bf00      	nop
 800406c:	40003800 	.word	0x40003800
 8004070:	40003400 	.word	0x40003400
 8004074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fdc0 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	e000      	b.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040aa:	bf00      	nop
}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c99      	adds	r1, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6251      	str	r1, [r2, #36]	; 0x24
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffc9 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c99      	adds	r1, r3, #2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6251      	str	r1, [r2, #36]	; 0x24
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <I2SEx_TxISR_I2SExt+0x22>
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800414c:	e001      	b.n	8004152 <I2SEx_TxISR_I2SExt+0x26>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004152:	460a      	mov	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_TxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_TxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_TxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_TxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	1c99      	adds	r1, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041dc:	b282      	uxth	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4a 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x16>
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800423c:	e001      	b.n	8004242 <I2SEx_RxISR_I2SExt+0x1a>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004242:	68d8      	ldr	r0, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	1c99      	adds	r1, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800424e:	b282      	uxth	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <I2SEx_RxISR_I2SExt+0x50>
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_RxISR_I2SExt+0x54>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490d      	ldr	r1, [pc, #52]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d101      	bne.n	800428c <I2SEx_RxISR_I2SExt+0x64>
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800428a:	e001      	b.n	8004290 <I2SEx_RxISR_I2SExt+0x68>
 800428c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff03 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40003800 	.word	0x40003800
 80042bc:	40003400 	.word	0x40003400

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc fdac 	bl	8000ed4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc fda8 	bl	8000ed4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc fd98 	bl	8000ed4 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fc fd94 	bl	8000ed4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fc fd4d 	bl	8000ed4 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7fc fd49 	bl	8000ed4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fd2c 	bl	8000ed4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fc fd28 	bl	8000ed4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fc fd0c 	bl	8000ed4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fc fd08 	bl	8000ed4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fc fcf5 	bl	8000ed4 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fc fcf1 	bl	8000ed4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fc fcb1 	bl	8000ed4 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fc fcad 	bl	8000ed4 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc fc72 	bl	8000ed4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fc fc6e 	bl	8000ed4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fc fc5c 	bl	8000ed4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fc fc58 	bl	8000ed4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fc fc2c 	bl	8000ed4 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fc fc28 	bl	8000ed4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fc fc01 	bl	8000ed4 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fc fbfd 	bl	8000ed4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fbea 	bl	8000ed4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fbe6 	bl	8000ed4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fc fb18 	bl	8000ed4 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc fb14 	bl	8000ed4 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fa78 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	08009314 	.word	0x08009314
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b094      	sub	sp, #80	; 0x50
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	; 0x44
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80e1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0db      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b4:	e0db      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ba:	e0d8      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b6f      	ldr	r3, [pc, #444]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	63bb      	str	r3, [r7, #56]	; 0x38
 80049dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	633b      	str	r3, [r7, #48]	; 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	ebb2 0801 	subs.w	r8, r2, r1
 8004a34:	4659      	mov	r1, fp
 8004a36:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4e:	4690      	mov	r8, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb18 0303 	adds.w	r3, r8, r3
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb49 0303 	adc.w	r3, r9, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	024b      	lsls	r3, r1, #9
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a78:	4621      	mov	r1, r4
 8004a7a:	024a      	lsls	r2, r1, #9
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a8c:	f7fb fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac6:	0150      	lsls	r0, r2, #5
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4641      	mov	r1, r8
 8004ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aec:	ebb2 040a 	subs.w	r4, r2, sl
 8004af0:	eb63 050b 	sbc.w	r5, r3, fp
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	f7fb fb42 	bl	80001c8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3750      	adds	r7, #80	; 0x50
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08009324 	.word	0x08009324

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d035      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf0:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf6:	f7fc f96d 	bl	8000ed4 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bfe:	f7fc f969 	bl	8000ed4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0b0      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c10:	4b5b      	ldr	r3, [pc, #364]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	019a      	lsls	r2, r3, #6
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	071b      	lsls	r3, r3, #28
 8004c28:	4955      	ldr	r1, [pc, #340]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c30:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fc f94d 	bl	8000ed4 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fc f949 	bl	8000ed4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e090      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c50:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8083 	beq.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	4b44      	ldr	r3, [pc, #272]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a43      	ldr	r2, [pc, #268]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3e      	ldr	r2, [pc, #248]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c92:	f7fc f91f 	bl	8000ed4 <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fc f91b 	bl	8000ed4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e062      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cac:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02f      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d028      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd6:	4b2a      	ldr	r3, [pc, #168]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce0:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce6:	4b28      	ldr	r3, [pc, #160]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cec:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d114      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fc f8e9 	bl	8000ed4 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fc f8e5 	bl	8000ed4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e02a      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ee      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d34:	d10d      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	490d      	ldr	r1, [pc, #52]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]
 8004d50:	e005      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4a0a      	ldr	r2, [pc, #40]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d5c:	6093      	str	r3, [r2, #8]
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6a:	4905      	ldr	r1, [pc, #20]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	42470068 	.word	0x42470068
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42470e40 	.word	0x42470e40

08004d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d13f      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d006      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc0:	d12f      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc4:	617b      	str	r3, [r7, #20]
          break;
 8004dc6:	e02f      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dde:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e007      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	617b      	str	r3, [r7, #20]
          break;
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
          break;
 8004e26:	bf00      	nop
        }
      }
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e2a:	bf00      	nop
    }
  }
  return frequency;
 8004e2c:	697b      	ldr	r3, [r7, #20]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00bb8000 	.word	0x00bb8000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07b      	b.n	8004f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fb fe72 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0104 	and.w	r1, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0210 	and.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5e:	b084      	sub	sp, #16
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	f107 001c 	add.w	r0, r7, #28
 8004f6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d123      	bne.n	8004fc0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9dc 	bl	8005372 <USB_CoreReset>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e01b      	b.n	8004ff8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f9d0 	bl	8005372 <USB_CoreReset>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fd6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8004fea:	e005      	b.n	8004ff8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ff8:	7fbb      	ldrb	r3, [r7, #30]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10b      	bne.n	8005016 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f043 0206 	orr.w	r2, r3, #6
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005022:	b004      	add	sp, #16
 8005024:	4770      	bx	lr

08005026 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 0201 	bic.w	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d115      	bne.n	80050b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005098:	200a      	movs	r0, #10
 800509a:	f7fb ff27 	bl	8000eec <HAL_Delay>
      ms += 10U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	330a      	adds	r3, #10
 80050a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f956 	bl	8005356 <USB_GetMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d01e      	beq.n	80050ee <USB_SetCurrentMode+0x84>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2bc7      	cmp	r3, #199	; 0xc7
 80050b4:	d9f0      	bls.n	8005098 <USB_SetCurrentMode+0x2e>
 80050b6:	e01a      	b.n	80050ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d115      	bne.n	80050ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050ca:	200a      	movs	r0, #10
 80050cc:	f7fb ff0e 	bl	8000eec <HAL_Delay>
      ms += 10U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	330a      	adds	r3, #10
 80050d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f93d 	bl	8005356 <USB_GetMode>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <USB_SetCurrentMode+0x84>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2bc7      	cmp	r3, #199	; 0xc7
 80050e6:	d9f0      	bls.n	80050ca <USB_SetCurrentMode+0x60>
 80050e8:	e001      	b.n	80050ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e005      	b.n	80050fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2bc8      	cmp	r3, #200	; 0xc8
 80050f2:	d101      	bne.n	80050f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3301      	adds	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800511c:	d901      	bls.n	8005122 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e01b      	b.n	800515a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	daf2      	bge.n	8005110 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005146:	d901      	bls.n	800514c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e006      	b.n	800515a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d0f0      	beq.n	800513a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800517e:	d901      	bls.n	8005184 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e018      	b.n	80051b6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	daf2      	bge.n	8005172 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2210      	movs	r2, #16
 8005194:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051a2:	d901      	bls.n	80051a8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e006      	b.n	80051b6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d0f0      	beq.n	8005196 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b089      	sub	sp, #36	; 0x24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4611      	mov	r1, r2
 80051ce:	461a      	mov	r2, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	71fb      	strb	r3, [r7, #7]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d123      	bne.n	8005230 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051e8:	88bb      	ldrh	r3, [r7, #4]
 80051ea:	3303      	adds	r3, #3
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e018      	b.n	8005228 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	031a      	lsls	r2, r3, #12
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005202:	461a      	mov	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6013      	str	r3, [r2, #0]
      pSrc++;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3301      	adds	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	3301      	adds	r3, #1
 8005214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3301      	adds	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d3e2      	bcc.n	80051f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800523e:	b480      	push	{r7}
 8005240:	b08b      	sub	sp, #44	; 0x2c
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	b29b      	uxth	r3, r3
 800525a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005264:	2300      	movs	r3, #0
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e014      	b.n	8005294 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	601a      	str	r2, [r3, #0]
    pDest++;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	3301      	adds	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3301      	adds	r3, #1
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	3301      	adds	r3, #1
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	3301      	adds	r3, #1
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3e6      	bcc.n	800526a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800529c:	8bfb      	ldrh	r3, [r7, #30]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01e      	beq.n	80052e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ac:	461a      	mov	r2, r3
 80052ae:	f107 0310 	add.w	r3, r7, #16
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	fa22 f303 	lsr.w	r3, r2, r3
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	701a      	strb	r2, [r3, #0]
      i++;
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3301      	adds	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
      pDest++;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	3301      	adds	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1ea      	bne.n	80052b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	372c      	adds	r7, #44	; 0x2c
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005348:	68bb      	ldr	r3, [r7, #8]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0301 	and.w	r3, r3, #1
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3301      	adds	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800538a:	d901      	bls.n	8005390 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e01b      	b.n	80053c8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	daf2      	bge.n	800537e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f043 0201 	orr.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053b4:	d901      	bls.n	80053ba <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e006      	b.n	80053c8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d0f0      	beq.n	80053a8 <USB_CoreReset+0x36>

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d4:	b084      	sub	sp, #16
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800542a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10a      	bne.n	8005448 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e014      	b.n	8005472 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005456:	f023 0304 	bic.w	r3, r3, #4
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e009      	b.n	8005472 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005472:	2110      	movs	r1, #16
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fe44 	bl	8005102 <USB_FlushTxFifo>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fe6e 	bl	8005166 <USB_FlushRxFifo>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e015      	b.n	80054c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80054ca:	461a      	mov	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d3e3      	bcc.n	800549a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <USB_HostInit+0x170>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10b      	bne.n	8005500 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <USB_HostInit+0x174>)
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <USB_HostInit+0x178>)
 80054fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054fe:	e009      	b.n	8005514 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <USB_HostInit+0x17c>)
 800550a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a11      	ldr	r2, [pc, #68]	; (8005554 <USB_HostInit+0x180>)
 8005510:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0210 	orr.w	r2, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <USB_HostInit+0x184>)
 800552e:	4313      	orrs	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	40040000 	.word	0x40040000
 8005548:	01000200 	.word	0x01000200
 800554c:	00e00300 	.word	0x00e00300
 8005550:	00600080 	.word	0x00600080
 8005554:	004000e0 	.word	0x004000e0
 8005558:	a3200008 	.word	0xa3200008

0800555c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a4:	461a      	mov	r2, r3
 80055a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055aa:	6053      	str	r3, [r2, #4]
 80055ac:	e00c      	b.n	80055c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d107      	bne.n	80055c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ba:	461a      	mov	r2, r3
 80055bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80055c0:	6053      	str	r3, [r2, #4]
 80055c2:	e001      	b.n	80055c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005606:	2064      	movs	r0, #100	; 0x64
 8005608:	f7fb fc70 	bl	8000eec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800561a:	200a      	movs	r0, #10
 800561c:	f7fb fc66 	bl	8000eec <HAL_Delay>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800564e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <USB_DriveVbus+0x44>
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d106      	bne.n	800566e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800566c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005678:	d109      	bne.n	800568e <USB_DriveVbus+0x64>
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0c5b      	lsrs	r3, r3, #17
 80056ba:	f003 0303 	and.w	r3, r3, #3
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	b29b      	uxth	r3, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	70fb      	strb	r3, [r7, #3]
 80056fe:	460b      	mov	r3, r1
 8005700:	70bb      	strb	r3, [r7, #2]
 8005702:	4613      	mov	r3, r2
 8005704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005726:	2b03      	cmp	r3, #3
 8005728:	d87c      	bhi.n	8005824 <USB_HC_Init+0x138>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <USB_HC_Init+0x44>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	080057e7 	.word	0x080057e7
 8005738:	08005741 	.word	0x08005741
 800573c:	080057a9 	.word	0x080057a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da10      	bge.n	800577e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	440a      	add	r2, r1
 8005772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800577c:	e055      	b.n	800582a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a6f      	ldr	r2, [pc, #444]	; (8005940 <USB_HC_Init+0x254>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d151      	bne.n	800582a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	440a      	add	r2, r1
 800579c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057a4:	60d3      	str	r3, [r2, #12]
      break;
 80057a6:	e040      	b.n	800582a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	461a      	mov	r2, r3
 80057b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80057ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da34      	bge.n	800582e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e4:	e023      	b.n	800582e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	461a      	mov	r2, r3
 80057f4:	f240 2325 	movw	r3, #549	; 0x225
 80057f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da17      	bge.n	8005832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	440a      	add	r2, r1
 8005818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005820:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005822:	e006      	b.n	8005832 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
      break;
 8005828:	e004      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 8005832:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	440a      	add	r2, r1
 800585c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005860:	f043 0302 	orr.w	r3, r3, #2
 8005864:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005880:	4313      	orrs	r3, r2
 8005882:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da03      	bge.n	80058a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e001      	b.n	80058a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fef9 	bl	800569c <USB_GetHostSpeed>
 80058aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d106      	bne.n	80058c2 <USB_HC_Init+0x1d6>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d003      	beq.n	80058c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e001      	b.n	80058c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c6:	787b      	ldrb	r3, [r7, #1]
 80058c8:	059b      	lsls	r3, r3, #22
 80058ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ce:	78bb      	ldrb	r3, [r7, #2]
 80058d0:	02db      	lsls	r3, r3, #11
 80058d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058dc:	049b      	lsls	r3, r3, #18
 80058de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005904:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d003      	beq.n	8005916 <USB_HC_Init+0x22a>
 800590e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10f      	bne.n	8005936 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005936:	7ffb      	ldrb	r3, [r7, #31]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40040000 	.word	0x40040000

08005944 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800595c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005960:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <USB_HC_StartXfer+0x198>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d12f      	bne.n	80059ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d11c      	bne.n	80059aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	7c9b      	ldrb	r3, [r3, #18]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <USB_HC_StartXfer+0x3c>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	7c9b      	ldrb	r3, [r3, #18]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d124      	bne.n	80059ca <USB_HC_StartXfer+0x86>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	799b      	ldrb	r3, [r3, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d120      	bne.n	80059ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	60d3      	str	r3, [r2, #12]
 80059a8:	e00f      	b.n	80059ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	791b      	ldrb	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <USB_HC_StartXfer+0x86>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	795b      	ldrb	r3, [r3, #5]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	4619      	mov	r1, r3
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fb6b 	bl	800609c <USB_DoPing>
        return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e232      	b.n	8005e30 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	799b      	ldrb	r3, [r3, #6]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d158      	bne.n	8005a84 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059d2:	2301      	movs	r3, #1
 80059d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	8a92      	ldrh	r2, [r2, #20]
 80059e4:	fb03 f202 	mul.w	r2, r3, r2
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]
 80059ec:	e07c      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	7c9b      	ldrb	r3, [r3, #18]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d130      	bne.n	8005a58 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	2bbc      	cmp	r3, #188	; 0xbc
 80059fc:	d918      	bls.n	8005a30 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	8a9b      	ldrh	r3, [r3, #20]
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d003      	beq.n	8005a20 <USB_HC_StartXfer+0xdc>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d103      	bne.n	8005a28 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2202      	movs	r2, #2
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	e05f      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	e05b      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d007      	beq.n	8005a50 <USB_HC_StartXfer+0x10c>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d003      	beq.n	8005a50 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e04b      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2203      	movs	r2, #3
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	e047      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10d      	bne.n	8005a7a <USB_HC_StartXfer+0x136>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	8a92      	ldrh	r2, [r2, #20]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d907      	bls.n	8005a7a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	8a92      	ldrh	r2, [r2, #20]
 8005a70:	fb03 f202 	mul.w	r2, r3, r2
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	61da      	str	r2, [r3, #28]
 8005a78:	e036      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	61da      	str	r2, [r3, #28]
 8005a82:	e031      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d018      	beq.n	8005abe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	8a92      	ldrh	r2, [r2, #20]
 8005a94:	4413      	add	r3, r2
 8005a96:	3b01      	subs	r3, #1
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	8a92      	ldrh	r2, [r2, #20]
 8005a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8005aa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005aa4:	8b7b      	ldrh	r3, [r7, #26]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d90b      	bls.n	8005ac2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005aaa:	8b7b      	ldrh	r3, [r7, #26]
 8005aac:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	8a92      	ldrh	r2, [r2, #20]
 8005ab4:	fb03 f202 	mul.w	r2, r3, r2
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61da      	str	r2, [r3, #28]
 8005abc:	e001      	b.n	8005ac2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	8a92      	ldrh	r2, [r2, #20]
 8005ad0:	fb03 f202 	mul.w	r2, r3, r2
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61da      	str	r2, [r3, #28]
 8005ad8:	e006      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
 8005ada:	bf00      	nop
 8005adc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005af2:	04d9      	lsls	r1, r3, #19
 8005af4:	4ba3      	ldr	r3, [pc, #652]	; (8005d84 <USB_HC_StartXfer+0x440>)
 8005af6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	7d9b      	ldrb	r3, [r3, #22]
 8005afe:	075b      	lsls	r3, r3, #29
 8005b00:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	7e7b      	ldrb	r3, [r7, #25]
 8005b76:	075b      	lsls	r3, r3, #29
 8005b78:	69f9      	ldr	r1, [r7, #28]
 8005b7a:	0148      	lsls	r0, r1, #5
 8005b7c:	6a39      	ldr	r1, [r7, #32]
 8005b7e:	4401      	add	r1, r0
 8005b80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	799b      	ldrb	r3, [r3, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f040 80c3 	bne.w	8005d18 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	7c5b      	ldrb	r3, [r3, #17]
 8005b96:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	79db      	ldrb	r3, [r3, #7]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d123      	bne.n	8005c20 <USB_HC_StartXfer+0x2dc>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11f      	bne.n	8005c20 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	6a3a      	ldr	r2, [r7, #32]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	7c9b      	ldrb	r3, [r3, #18]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d003      	beq.n	8005c30 <USB_HC_StartXfer+0x2ec>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	7c9b      	ldrb	r3, [r3, #18]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d117      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d113      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10f      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	7c9b      	ldrb	r3, [r3, #18]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d162      	bne.n	8005d2e <USB_HC_StartXfer+0x3ea>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	78db      	ldrb	r3, [r3, #3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d15e      	bne.n	8005d2e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d858      	bhi.n	8005d2c <USB_HC_StartXfer+0x3e8>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <USB_HC_StartXfer+0x33c>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cf7 	.word	0x08005cf7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	6053      	str	r3, [r2, #4]
          break;
 8005cb0:	e03d      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ccc:	f043 030e 	orr.w	r3, r3, #14
 8005cd0:	6053      	str	r3, [r2, #4]
          break;
 8005cd2:	e02c      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf2:	6053      	str	r3, [r2, #4]
          break;
 8005cf4:	e01b      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d14:	6053      	str	r3, [r2, #4]
          break;
 8005d16:	e00a      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	e000      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>
          break;
 8005d2c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e003      	b.n	8005d60 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d5e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	461a      	mov	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e055      	b.n	8005e30 <USB_HC_StartXfer+0x4ec>
 8005d84:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d14e      	bne.n	8005e2e <USB_HC_StartXfer+0x4ea>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d04a      	beq.n	8005e2e <USB_HC_StartXfer+0x4ea>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	79db      	ldrb	r3, [r3, #7]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d146      	bne.n	8005e2e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	7c9b      	ldrb	r3, [r3, #18]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d831      	bhi.n	8005e0c <USB_HC_StartXfer+0x4c8>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <USB_HC_StartXfer+0x46c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005de5 	.word	0x08005de5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	3303      	adds	r3, #3
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dca:	8afa      	ldrh	r2, [r7, #22]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d91c      	bls.n	8005e10 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005de2:	e015      	b.n	8005e10 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	3303      	adds	r3, #3
 8005dea:	089b      	lsrs	r3, r3, #2
 8005dec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dee:	8afa      	ldrh	r2, [r7, #22]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d90a      	bls.n	8005e14 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e0a:	e003      	b.n	8005e14 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <USB_HC_StartXfer+0x4d2>
        break;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <USB_HC_StartXfer+0x4d2>
        break;
 8005e14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6999      	ldr	r1, [r3, #24]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	785a      	ldrb	r2, [r3, #1]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2000      	movs	r0, #0
 8005e26:	9000      	str	r0, [sp, #0]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff f9ca 	bl	80051c2 <USB_WritePacket>
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b089      	sub	sp, #36	; 0x24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0c9b      	lsrs	r3, r3, #18
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	0fdb      	lsrs	r3, r3, #31
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	0fdb      	lsrs	r3, r3, #31
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d10d      	bne.n	8005edc <USB_HC_Halt+0x82>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <USB_HC_Halt+0x82>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d002      	beq.n	8005ed8 <USB_HC_Halt+0x7e>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d101      	bne.n	8005edc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e0d8      	b.n	800608e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <USB_HC_Halt+0x8e>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d173      	bne.n	8005fd0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d14a      	bne.n	8005faa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d133      	bne.n	8005f88 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f6c:	d82e      	bhi.n	8005fcc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d0ec      	beq.n	8005f60 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f86:	e081      	b.n	800608c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa8:	e070      	b.n	800608c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fca:	e05f      	b.n	800608c <USB_HC_Halt+0x232>
            break;
 8005fcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fce:	e05d      	b.n	800608c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d133      	bne.n	8006068 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800601e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800603e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3301      	adds	r3, #1
 8006044:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604c:	d81d      	bhi.n	800608a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006064:	d0ec      	beq.n	8006040 <USB_HC_Halt+0x1e6>
 8006066:	e011      	b.n	800608c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e000      	b.n	800608c <USB_HC_Halt+0x232>
          break;
 800608a:	bf00      	nop
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3724      	adds	r7, #36	; 0x24
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060b0:	2301      	movs	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	04da      	lsls	r2, r3, #19
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <USB_DoPing+0x74>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	461a      	mov	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000

08006114 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fe ff8d 	bl	8005048 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800612e:	2110      	movs	r1, #16
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fe ffe6 	bl	8005102 <USB_FlushTxFifo>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff f810 	bl	8005166 <USB_FlushRxFifo>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e01f      	b.n	8006196 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800617c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	461a      	mov	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b0f      	cmp	r3, #15
 800619a:	d9dc      	bls.n	8006156 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e034      	b.n	800620c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	461a      	mov	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e8:	d80c      	bhi.n	8006204 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006200:	d0ec      	beq.n	80061dc <USB_StopHost+0xc8>
 8006202:	e000      	b.n	8006206 <USB_StopHost+0xf2>
        break;
 8006204:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3301      	adds	r3, #1
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d9c7      	bls.n	80061a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 33ff 	mov.w	r3, #4294967295
 800621e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f04f 32ff 	mov.w	r2, #4294967295
 8006226:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fe fefc 	bl	8005026 <USB_EnableGlobalInt>

  return ret;
 800622e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af04      	add	r7, sp, #16
 800623e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006240:	2301      	movs	r3, #1
 8006242:	2202      	movs	r2, #2
 8006244:	2102      	movs	r1, #2
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fc85 	bl	8006b56 <USBH_FindInterface>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2bff      	cmp	r3, #255	; 0xff
 8006254:	d002      	beq.n	800625c <USBH_CDC_InterfaceInit+0x24>
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d901      	bls.n	8006260 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800625c:	2302      	movs	r3, #2
 800625e:	e13d      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc5a 	bl	8006b1e <USBH_SelectInterface>
 800626a:	4603      	mov	r3, r0
 800626c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006274:	2302      	movs	r3, #2
 8006276:	e131      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800627e:	2050      	movs	r0, #80	; 0x50
 8006280:	f002 fb74 	bl	800896c <malloc>
 8006284:	4603      	mov	r3, r0
 8006286:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006298:	2302      	movs	r3, #2
 800629a:	e11f      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800629c:	2250      	movs	r2, #80	; 0x50
 800629e:	2100      	movs	r1, #0
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	f002 fe15 	bl	8008ed0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	211a      	movs	r1, #26
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da15      	bge.n	80062ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	211a      	movs	r1, #26
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	211a      	movs	r1, #26
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 ffce 	bl	8008292 <USBH_AllocPipe>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	7858      	ldrb	r0, [r3, #1]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	8952      	ldrh	r2, [r2, #10]
 8006316:	9202      	str	r2, [sp, #8]
 8006318:	2203      	movs	r2, #3
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4623      	mov	r3, r4
 8006320:	4602      	mov	r2, r0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 ff86 	bl	8008234 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f002 fa95 	bl	8008860 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	210a      	movs	r1, #10
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc0a 	bl	8006b56 <USBH_FindInterface>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2bff      	cmp	r3, #255	; 0xff
 800634a:	d002      	beq.n	8006352 <USBH_CDC_InterfaceInit+0x11a>
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d901      	bls.n	8006356 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	e0c2      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	211a      	movs	r1, #26
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b25b      	sxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	da16      	bge.n	800639c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	211a      	movs	r1, #26
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	211a      	movs	r1, #26
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	835a      	strh	r2, [r3, #26]
 800639a:	e015      	b.n	80063c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	211a      	movs	r1, #26
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	211a      	movs	r1, #26
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	211a      	movs	r1, #26
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da16      	bge.n	800640e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	211a      	movs	r1, #26
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	211a      	movs	r1, #26
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	835a      	strh	r2, [r3, #26]
 800640c:	e015      	b.n	800643a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	211a      	movs	r1, #26
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	211a      	movs	r1, #26
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	7b9b      	ldrb	r3, [r3, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 ff26 	bl	8008292 <USBH_AllocPipe>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7bdb      	ldrb	r3, [r3, #15]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 ff1c 	bl	8008292 <USBH_AllocPipe>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7b59      	ldrb	r1, [r3, #13]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7b98      	ldrb	r0, [r3, #14]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	8b12      	ldrh	r2, [r2, #24]
 800647a:	9202      	str	r2, [sp, #8]
 800647c:	2202      	movs	r2, #2
 800647e:	9201      	str	r2, [sp, #4]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4623      	mov	r3, r4
 8006484:	4602      	mov	r2, r0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fed4 	bl	8008234 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	7b19      	ldrb	r1, [r3, #12]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	7bd8      	ldrb	r0, [r3, #15]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	8b52      	ldrh	r2, [r2, #26]
 80064a4:	9202      	str	r2, [sp, #8]
 80064a6:	2202      	movs	r2, #2
 80064a8:	9201      	str	r2, [sp, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4623      	mov	r3, r4
 80064ae:	4602      	mov	r2, r0
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 febf 	bl	8008234 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	7b5b      	ldrb	r3, [r3, #13]
 80064c2:	2200      	movs	r2, #0
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 f9ca 	bl	8008860 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	7b1b      	ldrb	r3, [r3, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f002 f9c3 	bl	8008860 <USBH_LL_SetToggle>

  return USBH_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}

080064e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 feb4 	bl	8008272 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 fedf 	bl	80082d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7b1b      	ldrb	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	7b1b      	ldrb	r3, [r3, #12]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fea1 	bl	8008272 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	7b1b      	ldrb	r3, [r3, #12]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fecc 	bl	80082d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	7b5b      	ldrb	r3, [r3, #13]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	7b5b      	ldrb	r3, [r3, #13]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fe8e 	bl	8008272 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 feb9 	bl	80082d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4618      	mov	r0, r3
 800657e:	f002 f9fd 	bl	800897c <free>
    phost->pActiveClass->pData = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006588:	2200      	movs	r2, #0
 800658a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3340      	adds	r3, #64	; 0x40
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8b1 	bl	8006716 <GetLineCoding>
 80065b4:	4603      	mov	r3, r0
 80065b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d105      	bne.n	80065ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065c4:	2102      	movs	r1, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d877      	bhi.n	80066e8 <USBH_CDC_Process+0x114>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <USBH_CDC_Process+0x2c>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006615 	.word	0x08006615
 8006604:	0800661b 	.word	0x0800661b
 8006608:	0800664b 	.word	0x0800664b
 800660c:	080066bf 	.word	0x080066bf
 8006610:	080066cd 	.word	0x080066cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e06d      	b.n	80066f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f897 	bl	8006754 <SetLineCoding>
 8006626:	4603      	mov	r3, r0
 8006628:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006638:	e058      	b.n	80066ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d055      	beq.n	80066ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006648:	e050      	b.n	80066ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3340      	adds	r3, #64	; 0x40
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f860 	bl	8006716 <GetLineCoding>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d126      	bne.n	80066ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	791b      	ldrb	r3, [r3, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d13b      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006684:	429a      	cmp	r2, r3
 8006686:	d133      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006694:	429a      	cmp	r2, r3
 8006696:	d12b      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d124      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f958 	bl	800695c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066ac:	e020      	b.n	80066f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d01d      	beq.n	80066f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2204      	movs	r2, #4
 80066b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066bc:	e018      	b.n	80066f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f867 	bl	8006792 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8da 	bl	800687e <CDC_ProcessReception>
      break;
 80066ca:	e014      	b.n	80066f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f822 	bl	8007718 <USBH_ClrFeature>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066e6:	e005      	b.n	80066f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066f4:	bf00      	nop

  }

  return status;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	22a1      	movs	r2, #161	; 0xa1
 8006724:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2207      	movs	r2, #7
 800673c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2207      	movs	r2, #7
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fb23 	bl	8007d90 <USBH_CtlReq>
 800674a:	4603      	mov	r3, r0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2221      	movs	r2, #33	; 0x21
 8006762:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2207      	movs	r2, #7
 800677a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2207      	movs	r2, #7
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fb04 	bl	8007d90 <USBH_CtlReq>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af02      	add	r7, sp, #8
 8006798:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d002      	beq.n	80067b8 <CDC_ProcessTransmission+0x26>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d023      	beq.n	80067fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067b6:	e05e      	b.n	8006876 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	8b12      	ldrh	r2, [r2, #24]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d90b      	bls.n	80067dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	69d9      	ldr	r1, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8b1a      	ldrh	r2, [r3, #24]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7b5b      	ldrb	r3, [r3, #13]
 80067d0:	2001      	movs	r0, #1
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fcea 	bl	80081ae <USBH_BulkSendData>
 80067da:	e00b      	b.n	80067f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	7b5b      	ldrb	r3, [r3, #13]
 80067ea:	2001      	movs	r0, #1
 80067ec:	9000      	str	r0, [sp, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fcdd 	bl	80081ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067fc:	e03b      	b.n	8006876 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f002 f801 	bl	800880c <USBH_LL_GetURBState>
 800680a:	4603      	mov	r3, r0
 800680c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d128      	bne.n	8006866 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	8b12      	ldrh	r2, [r2, #24]
 800681c:	4293      	cmp	r3, r2
 800681e:	d90e      	bls.n	800683e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	8b12      	ldrh	r2, [r2, #24]
 8006828:	1a9a      	subs	r2, r3, r2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	8b12      	ldrh	r2, [r2, #24]
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	61da      	str	r2, [r3, #28]
 800683c:	e002      	b.n	8006844 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006854:	e00e      	b.n	8006874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f868 	bl	8006934 <USBH_CDC_TransmitCallback>
      break;
 8006864:	e006      	b.n	8006874 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d103      	bne.n	8006874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006874:	bf00      	nop
  }
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006890:	2300      	movs	r3, #0
 8006892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800689a:	2b03      	cmp	r3, #3
 800689c:	d002      	beq.n	80068a4 <CDC_ProcessReception+0x26>
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00e      	beq.n	80068c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068a2:	e043      	b.n	800692c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	6a19      	ldr	r1, [r3, #32]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	8b5a      	ldrh	r2, [r3, #26]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fca1 	bl	80081f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2204      	movs	r2, #4
 80068ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068be:	e035      	b.n	800692c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 ffa0 	bl	800880c <USBH_LL_GetURBState>
 80068cc:	4603      	mov	r3, r0
 80068ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d129      	bne.n	800692a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	7b1b      	ldrb	r3, [r3, #12]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 ff03 	bl	80086e8 <USBH_LL_GetLastXferSize>
 80068e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d016      	beq.n	800691c <CDC_ProcessReception+0x9e>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	8b5b      	ldrh	r3, [r3, #26]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d910      	bls.n	800691c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	441a      	add	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2203      	movs	r2, #3
 8006916:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800691a:	e006      	b.n	800692a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f80f 	bl	8006948 <USBH_CDC_ReceiveCallback>
      break;
 800692a:	bf00      	nop
  }
}
 800692c:	bf00      	nop
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	e029      	b.n	80069dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	79fa      	ldrb	r2, [r7, #7]
 800698c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f81f 	bl	80069e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 fdd3 	bl	8008580 <USBH_LL_Init>

  return USBH_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e009      	b.n	8006a0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	33e0      	adds	r3, #224	; 0xe0
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	2200      	movs	r2, #0
 8006a02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b0f      	cmp	r3, #15
 8006a0e:	d9f2      	bls.n	80069f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e009      	b.n	8006a2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d3f1      	bcc.n	8006a16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2240      	movs	r2, #64	; 0x40
 8006a56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	331c      	adds	r3, #28
 8006a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 fa21 	bl	8008ed0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 fa18 	bl	8008ed0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006aa6:	2212      	movs	r2, #18
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f002 fa10 	bl	8008ed0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ab6:	223e      	movs	r2, #62	; 0x3e
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 fa08 	bl	8008ed0 <memset>

  return USBH_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d016      	beq.n	8006b0c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10e      	bne.n	8006b06 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	33de      	adds	r3, #222	; 0xde
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]
 8006b04:	e004      	b.n	8006b10 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b06:	2302      	movs	r3, #2
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e001      	b.n	8006b10 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d204      	bcs.n	8006b44 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b42:	e001      	b.n	8006b48 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	461a      	mov	r2, r3
 8006b64:	4603      	mov	r3, r0
 8006b66:	70fb      	strb	r3, [r7, #3]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70bb      	strb	r3, [r7, #2]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b7e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b80:	e025      	b.n	8006bce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	221a      	movs	r2, #26
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	3302      	adds	r3, #2
 8006b92:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	795b      	ldrb	r3, [r3, #5]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d002      	beq.n	8006ba4 <USBH_FindInterface+0x4e>
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	2bff      	cmp	r3, #255	; 0xff
 8006ba2:	d111      	bne.n	8006bc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ba8:	78ba      	ldrb	r2, [r7, #2]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d002      	beq.n	8006bb4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bae:	78bb      	ldrb	r3, [r7, #2]
 8006bb0:	2bff      	cmp	r3, #255	; 0xff
 8006bb2:	d109      	bne.n	8006bc8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bb8:	787a      	ldrb	r2, [r7, #1]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d002      	beq.n	8006bc4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bbe:	787b      	ldrb	r3, [r7, #1]
 8006bc0:	2bff      	cmp	r3, #255	; 0xff
 8006bc2:	d101      	bne.n	8006bc8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	e006      	b.n	8006bd6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d9d6      	bls.n	8006b82 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bd4:	23ff      	movs	r3, #255	; 0xff
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fd04 	bl	80085f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fe1d 	bl	8008832 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af04      	add	r7, sp, #16
 8006c0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2203      	movs	r2, #3
 8006c24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b0b      	cmp	r3, #11
 8006c2e:	f200 81be 	bhi.w	8006fae <USBH_Process+0x3aa>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBH_Process+0x34>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c69 	.word	0x08006c69
 8006c3c:	08006c9b 	.word	0x08006c9b
 8006c40:	08006d03 	.word	0x08006d03
 8006c44:	08006f49 	.word	0x08006f49
 8006c48:	08006faf 	.word	0x08006faf
 8006c4c:	08006da7 	.word	0x08006da7
 8006c50:	08006eef 	.word	0x08006eef
 8006c54:	08006ddd 	.word	0x08006ddd
 8006c58:	08006dfd 	.word	0x08006dfd
 8006c5c:	08006e1d 	.word	0x08006e1d
 8006c60:	08006e61 	.word	0x08006e61
 8006c64:	08006f31 	.word	0x08006f31
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 819e 	beq.w	8006fb2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c7c:	20c8      	movs	r0, #200	; 0xc8
 8006c7e:	f001 fe22 	bl	80088c6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fd15 	bl	80086b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c98:	e18b      	b.n	8006fb2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d107      	bne.n	8006cb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cb2:	e18d      	b.n	8006fd0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cbe:	d914      	bls.n	8006cea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d903      	bls.n	8006ce2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	220d      	movs	r2, #13
 8006cde:	701a      	strb	r2, [r3, #0]
      break;
 8006ce0:	e176      	b.n	8006fd0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
      break;
 8006ce8:	e172      	b.n	8006fd0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cf0:	f103 020a 	add.w	r2, r3, #10
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cfa:	200a      	movs	r0, #10
 8006cfc:	f001 fde3 	bl	80088c6 <USBH_Delay>
      break;
 8006d00:	e166      	b.n	8006fd0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d12:	2104      	movs	r1, #4
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d18:	2064      	movs	r0, #100	; 0x64
 8006d1a:	f001 fdd4 	bl	80088c6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fca0 	bl	8008664 <USBH_LL_GetSpeed>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2205      	movs	r2, #5
 8006d32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 faab 	bl	8008292 <USBH_AllocPipe>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 faa3 	bl	8008292 <USBH_AllocPipe>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7919      	ldrb	r1, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	9202      	str	r2, [sp, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	9201      	str	r2, [sp, #4]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	4603      	mov	r3, r0
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fa5c 	bl	8008234 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7959      	ldrb	r1, [r3, #5]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d90:	b292      	uxth	r2, r2
 8006d92:	9202      	str	r2, [sp, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	9201      	str	r2, [sp, #4]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa48 	bl	8008234 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006da4:	e114      	b.n	8006fd0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f918 	bl	8006fdc <USBH_HandleEnum>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 80fe 	bne.w	8006fb6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d103      	bne.n	8006dd4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2208      	movs	r2, #8
 8006dd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dd2:	e0f0      	b.n	8006fb6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2207      	movs	r2, #7
 8006dd8:	701a      	strb	r2, [r3, #0]
      break;
 8006dda:	e0ec      	b.n	8006fb6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80e9 	beq.w	8006fba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dee:	2101      	movs	r1, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2208      	movs	r2, #8
 8006df8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dfa:	e0de      	b.n	8006fba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fc3f 	bl	800768a <USBH_SetCfg>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 80d5 	bne.w	8006fbe <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2209      	movs	r2, #9
 8006e18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e1a:	e0d0      	b.n	8006fbe <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d016      	beq.n	8006e58 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fc4f 	bl	80076d0 <USBH_SetFeature>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	220a      	movs	r2, #10
 8006e42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e44:	e0bd      	b.n	8006fc2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	f040 80b9 	bne.w	8006fc2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	220a      	movs	r2, #10
 8006e54:	701a      	strb	r2, [r3, #0]
      break;
 8006e56:	e0b4      	b.n	8006fc2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	701a      	strb	r2, [r3, #0]
      break;
 8006e5e:	e0b0      	b.n	8006fc2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80ad 	beq.w	8006fc6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e016      	b.n	8006ea8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e7a:	7bfa      	ldrb	r2, [r7, #15]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32de      	adds	r2, #222	; 0xde
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	791a      	ldrb	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d108      	bne.n	8006ea2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32de      	adds	r2, #222	; 0xde
 8006e96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006ea0:	e005      	b.n	8006eae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0e5      	beq.n	8006e7a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d016      	beq.n	8006ee6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2206      	movs	r2, #6
 8006ece:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed6:	2103      	movs	r1, #3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006edc:	e073      	b.n	8006fc6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220d      	movs	r2, #13
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e06f      	b.n	8006fc6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	220d      	movs	r2, #13
 8006eea:	701a      	strb	r2, [r3, #0]
      break;
 8006eec:	e06b      	b.n	8006fc6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	220b      	movs	r2, #11
 8006f14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f16:	e058      	b.n	8006fca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d154      	bne.n	8006fca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	220d      	movs	r2, #13
 8006f24:	701a      	strb	r2, [r3, #0]
      break;
 8006f26:	e050      	b.n	8006fca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	220d      	movs	r2, #13
 8006f2c:	701a      	strb	r2, [r3, #0]
      break;
 8006f2e:	e04c      	b.n	8006fca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d049      	beq.n	8006fce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
      }
      break;
 8006f46:	e042      	b.n	8006fce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fd47 	bl	80069e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f84:	2105      	movs	r1, #5
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d107      	bne.n	8006fa6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fe1f 	bl	8006be2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fa4:	e014      	b.n	8006fd0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fb26 	bl	80085f8 <USBH_LL_Start>
      break;
 8006fac:	e010      	b.n	8006fd0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fae:	bf00      	nop
 8006fb0:	e00e      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e00c      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e00a      	b.n	8006fd0 <USBH_Process+0x3cc>
    break;
 8006fba:	bf00      	nop
 8006fbc:	e008      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e006      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <USBH_Process+0x3cc>
      break;
 8006fce:	bf00      	nop
  }
  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop

08006fdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	f200 81c1 	bhi.w	8007378 <USBH_HandleEnum+0x39c>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <USBH_HandleEnum+0x20>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	080070db 	.word	0x080070db
 8007004:	08007145 	.word	0x08007145
 8007008:	080071d3 	.word	0x080071d3
 800700c:	0800723d 	.word	0x0800723d
 8007010:	080072ad 	.word	0x080072ad
 8007014:	080072f3 	.word	0x080072f3
 8007018:	08007339 	.word	0x08007339
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800701c:	2108      	movs	r1, #8
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa50 	bl	80074c4 <USBH_Get_DevDesc>
 8007024:	4603      	mov	r3, r0
 8007026:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d130      	bne.n	8007090 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7919      	ldrb	r1, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007052:	b292      	uxth	r2, r2
 8007054:	9202      	str	r2, [sp, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	9201      	str	r2, [sp, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	4603      	mov	r3, r0
 800705e:	2280      	movs	r2, #128	; 0x80
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f8e7 	bl	8008234 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7959      	ldrb	r1, [r3, #5]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800707a:	b292      	uxth	r2, r2
 800707c:	9202      	str	r2, [sp, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	9201      	str	r2, [sp, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4603      	mov	r3, r0
 8007086:	2200      	movs	r2, #0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f8d3 	bl	8008234 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800708e:	e175      	b.n	800737c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b03      	cmp	r3, #3
 8007094:	f040 8172 	bne.w	800737c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800709e:	3301      	adds	r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d903      	bls.n	80070ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	220d      	movs	r2, #13
 80070b6:	701a      	strb	r2, [r3, #0]
      break;
 80070b8:	e160      	b.n	800737c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f907 	bl	80082d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	791b      	ldrb	r3, [r3, #4]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f901 	bl	80082d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
      break;
 80070d8:	e150      	b.n	800737c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070da:	2112      	movs	r1, #18
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9f1 	bl	80074c4 <USBH_Get_DevDesc>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070f2:	e145      	b.n	8007380 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	f040 8142 	bne.w	8007380 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007102:	3301      	adds	r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007112:	2b03      	cmp	r3, #3
 8007114:	d903      	bls.n	800711e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220d      	movs	r2, #13
 800711a:	701a      	strb	r2, [r3, #0]
      break;
 800711c:	e130      	b.n	8007380 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	795b      	ldrb	r3, [r3, #5]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f8d5 	bl	80082d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f8cf 	bl	80082d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
      break;
 8007142:	e11d      	b.n	8007380 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007144:	2101      	movs	r1, #1
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa7b 	bl	8007642 <USBH_SetAddress>
 800714c:	4603      	mov	r3, r0
 800714e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d132      	bne.n	80071bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007156:	2002      	movs	r0, #2
 8007158:	f001 fbb5 	bl	80088c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2203      	movs	r2, #3
 8007168:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7919      	ldrb	r1, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800717e:	b292      	uxth	r2, r2
 8007180:	9202      	str	r2, [sp, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	2280      	movs	r2, #128	; 0x80
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f851 	bl	8008234 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7959      	ldrb	r1, [r3, #5]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071a6:	b292      	uxth	r2, r2
 80071a8:	9202      	str	r2, [sp, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	9201      	str	r2, [sp, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4603      	mov	r3, r0
 80071b2:	2200      	movs	r2, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f83d 	bl	8008234 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071ba:	e0e3      	b.n	8007384 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b03      	cmp	r3, #3
 80071c0:	f040 80e0 	bne.w	8007384 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	220d      	movs	r2, #13
 80071c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	705a      	strb	r2, [r3, #1]
      break;
 80071d0:	e0d8      	b.n	8007384 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071d2:	2109      	movs	r1, #9
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9a1 	bl	800751c <USBH_Get_CfgDesc>
 80071da:	4603      	mov	r3, r0
 80071dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2204      	movs	r2, #4
 80071e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071ea:	e0cd      	b.n	8007388 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	f040 80ca 	bne.w	8007388 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071fa:	3301      	adds	r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800720a:	2b03      	cmp	r3, #3
 800720c:	d903      	bls.n	8007216 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	220d      	movs	r2, #13
 8007212:	701a      	strb	r2, [r3, #0]
      break;
 8007214:	e0b8      	b.n	8007388 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	795b      	ldrb	r3, [r3, #5]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f859 	bl	80082d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f853 	bl	80082d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e0a5      	b.n	8007388 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f969 	bl	800751c <USBH_Get_CfgDesc>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2205      	movs	r2, #5
 8007258:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800725a:	e097      	b.n	800738c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b03      	cmp	r3, #3
 8007260:	f040 8094 	bne.w	800738c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800726a:	3301      	adds	r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800727a:	2b03      	cmp	r3, #3
 800727c:	d903      	bls.n	8007286 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220d      	movs	r2, #13
 8007282:	701a      	strb	r2, [r3, #0]
      break;
 8007284:	e082      	b.n	800738c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f821 	bl	80082d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	791b      	ldrb	r3, [r3, #4]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f81b 	bl	80082d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e06f      	b.n	800738c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d019      	beq.n	80072ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072c2:	23ff      	movs	r3, #255	; 0xff
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f953 	bl	8007570 <USBH_Get_StringDesc>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2206      	movs	r2, #6
 80072d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072da:	e059      	b.n	8007390 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d156      	bne.n	8007390 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2206      	movs	r2, #6
 80072e6:	705a      	strb	r2, [r3, #1]
      break;
 80072e8:	e052      	b.n	8007390 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2206      	movs	r2, #6
 80072ee:	705a      	strb	r2, [r3, #1]
      break;
 80072f0:	e04e      	b.n	8007390 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d019      	beq.n	8007330 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007308:	23ff      	movs	r3, #255	; 0xff
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f930 	bl	8007570 <USBH_Get_StringDesc>
 8007310:	4603      	mov	r3, r0
 8007312:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2207      	movs	r2, #7
 800731e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007320:	e038      	b.n	8007394 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d135      	bne.n	8007394 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2207      	movs	r2, #7
 800732c:	705a      	strb	r2, [r3, #1]
      break;
 800732e:	e031      	b.n	8007394 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2207      	movs	r2, #7
 8007334:	705a      	strb	r2, [r3, #1]
      break;
 8007336:	e02d      	b.n	8007394 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800733e:	2b00      	cmp	r3, #0
 8007340:	d017      	beq.n	8007372 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800734e:	23ff      	movs	r3, #255	; 0xff
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f90d 	bl	8007570 <USBH_Get_StringDesc>
 8007356:	4603      	mov	r3, r0
 8007358:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007364:	e018      	b.n	8007398 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d115      	bne.n	8007398 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
      break;
 8007370:	e012      	b.n	8007398 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
      break;
 8007376:	e00f      	b.n	8007398 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007378:	bf00      	nop
 800737a:	e00e      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 800737c:	bf00      	nop
 800737e:	e00c      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007380:	bf00      	nop
 8007382:	e00a      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007384:	bf00      	nop
 8007386:	e008      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007388:	bf00      	nop
 800738a:	e006      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 800738c:	bf00      	nop
 800738e:	e004      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007390:	bf00      	nop
 8007392:	e002      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <USBH_HandleEnum+0x3be>
      break;
 8007398:	bf00      	nop
  }
  return Status;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f804 	bl	80073e6 <USBH_HandleSof>
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b0b      	cmp	r3, #11
 80073f6:	d10a      	bne.n	800740e <USBH_HandleSof+0x28>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
  }
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007426:	bf00      	nop
}
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007442:	bf00      	nop
}
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f8c6 	bl	800862e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	791b      	ldrb	r3, [r3, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 ff13 	bl	80082d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	795b      	ldrb	r3, [r3, #5]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 ff0d 	bl	80082d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074d0:	887b      	ldrh	r3, [r7, #2]
 80074d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d6:	d901      	bls.n	80074dc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01b      	b.n	8007514 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074e2:	887b      	ldrh	r3, [r7, #2]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	4613      	mov	r3, r2
 80074e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f872 	bl	80075d8 <USBH_GetDescriptor>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f929 	bl	8007760 <USBH_ParseDevDesc>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af02      	add	r7, sp, #8
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	331c      	adds	r3, #28
 800752c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007534:	d901      	bls.n	800753a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007536:	2303      	movs	r3, #3
 8007538:	e016      	b.n	8007568 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007544:	2100      	movs	r1, #0
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f846 	bl	80075d8 <USBH_GetDescriptor>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d107      	bne.n	8007566 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007556:	887b      	ldrh	r3, [r7, #2]
 8007558:	461a      	mov	r2, r3
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f9b3 	bl	80078c8 <USBH_ParseCfgDesc>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	461a      	mov	r2, r3
 800757c:	460b      	mov	r3, r1
 800757e:	72fb      	strb	r3, [r7, #11]
 8007580:	4613      	mov	r3, r2
 8007582:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007584:	893b      	ldrh	r3, [r7, #8]
 8007586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800758a:	d802      	bhi.n	8007592 <USBH_Get_StringDesc+0x22>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007592:	2303      	movs	r3, #3
 8007594:	e01c      	b.n	80075d0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800759e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	460b      	mov	r3, r1
 80075ac:	2100      	movs	r1, #0
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f812 	bl	80075d8 <USBH_GetDescriptor>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d107      	bne.n	80075ce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c4:	893a      	ldrh	r2, [r7, #8]
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fb93 	bl	8007cf4 <USBH_ParseStringDesc>
  }

  return status;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	72fb      	strb	r3, [r7, #11]
 80075e6:	4613      	mov	r3, r2
 80075e8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	789b      	ldrb	r3, [r3, #2]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d11c      	bne.n	800762c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2206      	movs	r2, #6
 8007602:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	893a      	ldrh	r2, [r7, #8]
 8007608:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800760a:	893b      	ldrh	r3, [r7, #8]
 800760c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d104      	bne.n	8007620 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f240 4209 	movw	r2, #1033	; 0x409
 800761c:	829a      	strh	r2, [r3, #20]
 800761e:	e002      	b.n	8007626 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8b3a      	ldrh	r2, [r7, #24]
 800762a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800762c:	8b3b      	ldrh	r3, [r7, #24]
 800762e:	461a      	mov	r2, r3
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fbac 	bl	8007d90 <USBH_CtlReq>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	789b      	ldrb	r3, [r3, #2]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10f      	bne.n	8007676 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2205      	movs	r2, #5
 8007660:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb88 	bl	8007d90 <USBH_CtlReq>
 8007680:	4603      	mov	r3, r0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	789b      	ldrb	r3, [r3, #2]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d10e      	bne.n	80076bc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2209      	movs	r2, #9
 80076a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	887a      	ldrh	r2, [r7, #2]
 80076ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb65 	bl	8007d90 <USBH_CtlReq>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10f      	bne.n	8007704 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2203      	movs	r2, #3
 80076ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fb41 	bl	8007d90 <USBH_CtlReq>
 800770e:	4603      	mov	r3, r0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	789b      	ldrb	r3, [r3, #2]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10f      	bne.n	800774c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800774c:	2200      	movs	r2, #0
 800774e:	2100      	movs	r1, #0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb1d 	bl	8007d90 <USBH_CtlReq>
 8007756:	4603      	mov	r3, r0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007774:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007780:	2302      	movs	r3, #2
 8007782:	e098      	b.n	80078b6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	785a      	ldrb	r2, [r3, #1]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3302      	adds	r3, #2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29a      	uxth	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3303      	adds	r3, #3
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	4313      	orrs	r3, r2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	791a      	ldrb	r2, [r3, #4]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	795a      	ldrb	r2, [r3, #5]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	799a      	ldrb	r2, [r3, #6]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	79da      	ldrb	r2, [r3, #7]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d11b      	bne.n	800781c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	79db      	ldrb	r3, [r3, #7]
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	dc0f      	bgt.n	800780c <USBH_ParseDevDesc+0xac>
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	db0f      	blt.n	8007810 <USBH_ParseDevDesc+0xb0>
 80077f0:	3b08      	subs	r3, #8
 80077f2:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <USBH_ParseDevDesc+0x164>)
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <USBH_ParseDevDesc+0xb8>
 800780a:	e001      	b.n	8007810 <USBH_ParseDevDesc+0xb0>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d003      	beq.n	8007818 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2208      	movs	r2, #8
 8007814:	71da      	strb	r2, [r3, #7]
        break;
 8007816:	e000      	b.n	800781a <USBH_ParseDevDesc+0xba>
        break;
 8007818:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800781a:	e00e      	b.n	800783a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007822:	2b02      	cmp	r3, #2
 8007824:	d107      	bne.n	8007836 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	79db      	ldrb	r3, [r3, #7]
 800782a:	2b08      	cmp	r3, #8
 800782c:	d005      	beq.n	800783a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2208      	movs	r2, #8
 8007832:	71da      	strb	r2, [r3, #7]
 8007834:	e001      	b.n	800783a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007836:	2303      	movs	r3, #3
 8007838:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	2b08      	cmp	r3, #8
 800783e:	d939      	bls.n	80078b4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3308      	adds	r3, #8
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b29a      	uxth	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	3309      	adds	r3, #9
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b29b      	uxth	r3, r3
 8007854:	4313      	orrs	r3, r2
 8007856:	b29a      	uxth	r2, r3
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	330a      	adds	r3, #10
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b29a      	uxth	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	330b      	adds	r3, #11
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	330c      	adds	r3, #12
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	330d      	adds	r3, #13
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	7b9a      	ldrb	r2, [r3, #14]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7bda      	ldrb	r2, [r3, #15]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7c1a      	ldrb	r2, [r3, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7c5a      	ldrb	r2, [r3, #17]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	01000101 	.word	0x01000101

080078c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	; 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	e0db      	b.n	8007ab2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	785a      	ldrb	r2, [r3, #1]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3302      	adds	r3, #2
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3303      	adds	r3, #3
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792a:	bf28      	it	cs
 800792c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007930:	b29a      	uxth	r2, r3
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	791a      	ldrb	r2, [r3, #4]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	795a      	ldrb	r2, [r3, #5]
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	799a      	ldrb	r2, [r3, #6]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	79da      	ldrb	r2, [r3, #7]
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	7a1a      	ldrb	r2, [r3, #8]
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b09      	cmp	r3, #9
 8007964:	d002      	beq.n	800796c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	2209      	movs	r2, #9
 800796a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	2b09      	cmp	r3, #9
 8007970:	f240 809d 	bls.w	8007aae <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007974:	2309      	movs	r3, #9
 8007976:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800797c:	e081      	b.n	8007a82 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800797e:	f107 0316 	add.w	r3, r7, #22
 8007982:	4619      	mov	r1, r3
 8007984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007986:	f000 f9e8 	bl	8007d5a <USBH_GetNextDesc>
 800798a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d176      	bne.n	8007a82 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b09      	cmp	r3, #9
 800799a:	d002      	beq.n	80079a2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	2209      	movs	r2, #9
 80079a0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a6:	221a      	movs	r2, #26
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	3308      	adds	r3, #8
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	4413      	add	r3, r2
 80079b2:	3302      	adds	r3, #2
 80079b4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b8:	69f8      	ldr	r0, [r7, #28]
 80079ba:	f000 f87e 	bl	8007aba <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079c8:	e043      	b.n	8007a52 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079ca:	f107 0316 	add.w	r3, r7, #22
 80079ce:	4619      	mov	r1, r3
 80079d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d2:	f000 f9c2 	bl	8007d5a <USBH_GetNextDesc>
 80079d6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b05      	cmp	r3, #5
 80079de:	d138      	bne.n	8007a52 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	795b      	ldrb	r3, [r3, #5]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d113      	bne.n	8007a10 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d003      	beq.n	80079f8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	799b      	ldrb	r3, [r3, #6]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d10b      	bne.n	8007a10 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	79db      	ldrb	r3, [r3, #7]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <USBH_ParseCfgDesc+0x150>
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d007      	beq.n	8007a18 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	2209      	movs	r2, #9
 8007a0c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a0e:	e003      	b.n	8007a18 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	2207      	movs	r2, #7
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e000      	b.n	8007a1a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a18:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a22:	3201      	adds	r2, #1
 8007a24:	00d2      	lsls	r2, r2, #3
 8007a26:	211a      	movs	r1, #26
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3308      	adds	r3, #8
 8007a30:	6a3a      	ldr	r2, [r7, #32]
 8007a32:	4413      	add	r3, r2
 8007a34:	3304      	adds	r3, #4
 8007a36:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f870 	bl	8007b22 <USBH_ParseEPDesc>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007a48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d204      	bcs.n	8007a68 <USBH_ParseCfgDesc+0x1a0>
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	885a      	ldrh	r2, [r3, #2]
 8007a62:	8afb      	ldrh	r3, [r7, #22]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d8b0      	bhi.n	80079ca <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d201      	bcs.n	8007a78 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e01c      	b.n	8007ab2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8007a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d805      	bhi.n	8007a96 <USBH_ParseCfgDesc+0x1ce>
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	885a      	ldrh	r2, [r3, #2]
 8007a8e:	8afb      	ldrh	r3, [r7, #22]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f63f af74 	bhi.w	800797e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	bf28      	it	cs
 8007a9e:	2302      	movcs	r3, #2
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d201      	bcs.n	8007aae <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e001      	b.n	8007ab2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8007aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3730      	adds	r7, #48	; 0x30
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781a      	ldrb	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	785a      	ldrb	r2, [r3, #1]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	789a      	ldrb	r2, [r3, #2]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	78da      	ldrb	r2, [r3, #3]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	bf28      	it	cs
 8007aee:	2302      	movcs	r3, #2
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	795a      	ldrb	r2, [r3, #5]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	799a      	ldrb	r2, [r3, #6]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	79da      	ldrb	r2, [r3, #7]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	7a1a      	ldrb	r2, [r3, #8]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	721a      	strb	r2, [r3, #8]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b087      	sub	sp, #28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	785a      	ldrb	r2, [r3, #1]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	789a      	ldrb	r2, [r3, #2]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	78da      	ldrb	r2, [r3, #3]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3304      	adds	r3, #4
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3305      	adds	r3, #5
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	799a      	ldrb	r2, [r3, #6]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	889b      	ldrh	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b86:	d804      	bhi.n	8007b92 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b90:	d901      	bls.n	8007b96 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d136      	bne.n	8007c0e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d108      	bne.n	8007bbe <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	889b      	ldrh	r3, [r3, #4]
 8007bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb4:	f240 8097 	bls.w	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
 8007bbc:	e093      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d107      	bne.n	8007bda <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	889b      	ldrh	r3, [r3, #4]
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	f240 8089 	bls.w	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	75fb      	strb	r3, [r7, #23]
 8007bd8:	e085      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	78db      	ldrb	r3, [r3, #3]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d005      	beq.n	8007bf2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d10a      	bne.n	8007c08 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	799b      	ldrb	r3, [r3, #6]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <USBH_ParseEPDesc+0xe0>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	799b      	ldrb	r3, [r3, #6]
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d970      	bls.n	8007ce4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c02:	2303      	movs	r3, #3
 8007c04:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c06:	e06d      	b.n	8007ce4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	e06b      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d13c      	bne.n	8007c92 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d005      	beq.n	8007c30 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	889b      	ldrh	r3, [r3, #4]
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d956      	bls.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c3c:	e053      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	78db      	ldrb	r3, [r3, #3]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10e      	bne.n	8007c68 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	799b      	ldrb	r3, [r3, #6]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d803      	bhi.n	8007c62 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d941      	bls.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007c62:	2303      	movs	r3, #3
 8007c64:	75fb      	strb	r3, [r7, #23]
 8007c66:	e03e      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d10b      	bne.n	8007c8c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	799b      	ldrb	r3, [r3, #6]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <USBH_ParseEPDesc+0x164>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	889b      	ldrh	r3, [r3, #4]
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c84:	d32f      	bcc.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007c86:	2303      	movs	r3, #3
 8007c88:	75fb      	strb	r3, [r7, #23]
 8007c8a:	e02c      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	e029      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d120      	bne.n	8007cde <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	78db      	ldrb	r3, [r3, #3]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	889b      	ldrh	r3, [r3, #4]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d01a      	beq.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	75fb      	strb	r3, [r7, #23]
 8007cb4:	e017      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d10a      	bne.n	8007cd8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	799b      	ldrb	r3, [r3, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <USBH_ParseEPDesc+0x1b0>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	889b      	ldrh	r3, [r3, #4]
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d909      	bls.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	75fb      	strb	r3, [r7, #23]
 8007cd6:	e006      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	75fb      	strb	r3, [r7, #23]
 8007cdc:	e003      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	75fb      	strb	r3, [r7, #23]
 8007ce2:	e000      	b.n	8007ce6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ce4:	bf00      	nop
  }

  return status;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d120      	bne.n	8007d4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	1e9a      	subs	r2, r3, #2
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	4293      	cmp	r3, r2
 8007d16:	bf28      	it	cs
 8007d18:	4613      	movcs	r3, r2
 8007d1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3302      	adds	r3, #2
 8007d20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d22:	2300      	movs	r3, #0
 8007d24:	82fb      	strh	r3, [r7, #22]
 8007d26:	e00b      	b.n	8007d40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d28:	8afb      	ldrh	r3, [r7, #22]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d3a:	8afb      	ldrh	r3, [r7, #22]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	82fb      	strh	r3, [r7, #22]
 8007d40:	8afa      	ldrh	r2, [r7, #22]
 8007d42:	8abb      	ldrh	r3, [r7, #20]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d3ef      	bcc.n	8007d28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	881a      	ldrh	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	4413      	add	r3, r2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	789b      	ldrb	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d002      	beq.n	8007db0 <USBH_CtlReq+0x20>
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d00f      	beq.n	8007dce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007dae:	e027      	b.n	8007e00 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
      break;
 8007dcc:	e018      	b.n	8007e00 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f81c 	bl	8007e0c <USBH_HandleControl>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <USBH_CtlReq+0x54>
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d106      	bne.n	8007df2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	761a      	strb	r2, [r3, #24]
      break;
 8007df0:	e005      	b.n	8007dfe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d102      	bne.n	8007dfe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	709a      	strb	r2, [r3, #2]
      break;
 8007dfe:	bf00      	nop
  }
  return status;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b0a      	cmp	r3, #10
 8007e24:	f200 8156 	bhi.w	80080d4 <USBH_HandleControl+0x2c8>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <USBH_HandleControl+0x24>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e5d 	.word	0x08007e5d
 8007e34:	08007e77 	.word	0x08007e77
 8007e38:	08007ee1 	.word	0x08007ee1
 8007e3c:	08007f07 	.word	0x08007f07
 8007e40:	08007f3f 	.word	0x08007f3f
 8007e44:	08007f69 	.word	0x08007f69
 8007e48:	08007fbb 	.word	0x08007fbb
 8007e4c:	08007fdd 	.word	0x08007fdd
 8007e50:	08008019 	.word	0x08008019
 8007e54:	0800803f 	.word	0x0800803f
 8007e58:	0800807d 	.word	0x0800807d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 0110 	add.w	r1, r3, #16
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f943 	bl	80080f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	761a      	strb	r2, [r3, #24]
      break;
 8007e74:	e139      	b.n	80080ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	795b      	ldrb	r3, [r3, #5]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fcc5 	bl	800880c <USBH_LL_GetURBState>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d11e      	bne.n	8007eca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7c1b      	ldrb	r3, [r3, #16]
 8007e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8adb      	ldrh	r3, [r3, #22]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ea0:	2b80      	cmp	r3, #128	; 0x80
 8007ea2:	d103      	bne.n	8007eac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eaa:	e115      	b.n	80080d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2205      	movs	r2, #5
 8007eb0:	761a      	strb	r2, [r3, #24]
      break;
 8007eb2:	e111      	b.n	80080d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007eb4:	7b7b      	ldrb	r3, [r7, #13]
 8007eb6:	2b80      	cmp	r3, #128	; 0x80
 8007eb8:	d103      	bne.n	8007ec2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2209      	movs	r2, #9
 8007ebe:	761a      	strb	r2, [r3, #24]
      break;
 8007ec0:	e10a      	b.n	80080d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	761a      	strb	r2, [r3, #24]
      break;
 8007ec8:	e106      	b.n	80080d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d003      	beq.n	8007ed8 <USBH_HandleControl+0xcc>
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	f040 8100 	bne.w	80080d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	220b      	movs	r2, #11
 8007edc:	761a      	strb	r2, [r3, #24]
      break;
 8007ede:	e0fb      	b.n	80080d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6899      	ldr	r1, [r3, #8]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	899a      	ldrh	r2, [r3, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f93a 	bl	8008172 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2204      	movs	r2, #4
 8007f02:	761a      	strb	r2, [r3, #24]
      break;
 8007f04:	e0f1      	b.n	80080ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc7d 	bl	800880c <USBH_LL_GetURBState>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d102      	bne.n	8007f22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2209      	movs	r2, #9
 8007f20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d102      	bne.n	8007f2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f2c:	e0d6      	b.n	80080dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	f040 80d3 	bne.w	80080dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	220b      	movs	r2, #11
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e0ce      	b.n	80080dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6899      	ldr	r1, [r3, #8]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	899a      	ldrh	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	795b      	ldrb	r3, [r3, #5]
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	9000      	str	r0, [sp, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8ea 	bl	8008128 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2206      	movs	r2, #6
 8007f64:	761a      	strb	r2, [r3, #24]
      break;
 8007f66:	e0c0      	b.n	80080ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	795b      	ldrb	r3, [r3, #5]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fc4c 	bl	800880c <USBH_LL_GetURBState>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d103      	bne.n	8007f86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2207      	movs	r2, #7
 8007f82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f84:	e0ac      	b.n	80080e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b05      	cmp	r3, #5
 8007f8a:	d105      	bne.n	8007f98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220c      	movs	r2, #12
 8007f90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e0a3      	b.n	80080e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d103      	bne.n	8007fa6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2205      	movs	r2, #5
 8007fa2:	761a      	strb	r2, [r3, #24]
      break;
 8007fa4:	e09c      	b.n	80080e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	f040 8099 	bne.w	80080e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	220b      	movs	r2, #11
 8007fb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb8:	e092      	b.n	80080e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8d5 	bl	8008172 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	761a      	strb	r2, [r3, #24]

      break;
 8007fda:	e086      	b.n	80080ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc12 	bl	800880c <USBH_LL_GetURBState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d105      	bne.n	8007ffe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	220d      	movs	r2, #13
 8007ff6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ffc:	e072      	b.n	80080e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d103      	bne.n	800800c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	220b      	movs	r2, #11
 8008008:	761a      	strb	r2, [r3, #24]
      break;
 800800a:	e06b      	b.n	80080e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d168      	bne.n	80080e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008012:	2303      	movs	r3, #3
 8008014:	73fb      	strb	r3, [r7, #15]
      break;
 8008016:	e065      	b.n	80080e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	795b      	ldrb	r3, [r3, #5]
 800801c:	2201      	movs	r2, #1
 800801e:	9200      	str	r2, [sp, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f87f 	bl	8008128 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	220a      	movs	r2, #10
 800803a:	761a      	strb	r2, [r3, #24]
      break;
 800803c:	e055      	b.n	80080ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fbe1 	bl	800880c <USBH_LL_GetURBState>
 800804a:	4603      	mov	r3, r0
 800804c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d105      	bne.n	8008060 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	220d      	movs	r2, #13
 800805c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800805e:	e043      	b.n	80080e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d103      	bne.n	800806e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2209      	movs	r2, #9
 800806a:	761a      	strb	r2, [r3, #24]
      break;
 800806c:	e03c      	b.n	80080e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b04      	cmp	r3, #4
 8008072:	d139      	bne.n	80080e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	220b      	movs	r2, #11
 8008078:	761a      	strb	r2, [r3, #24]
      break;
 800807a:	e035      	b.n	80080e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	7e5b      	ldrb	r3, [r3, #25]
 8008080:	3301      	adds	r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	765a      	strb	r2, [r3, #25]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7e5b      	ldrb	r3, [r3, #25]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d806      	bhi.n	800809e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800809c:	e025      	b.n	80080ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080a4:	2106      	movs	r1, #6
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	795b      	ldrb	r3, [r3, #5]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f90c 	bl	80082d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	791b      	ldrb	r3, [r3, #4]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f906 	bl	80082d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080ce:	2302      	movs	r3, #2
 80080d0:	73fb      	strb	r3, [r7, #15]
      break;
 80080d2:	e00a      	b.n	80080ea <USBH_HandleControl+0x2de>

    default:
      break;
 80080d4:	bf00      	nop
 80080d6:	e008      	b.n	80080ea <USBH_HandleControl+0x2de>
      break;
 80080d8:	bf00      	nop
 80080da:	e006      	b.n	80080ea <USBH_HandleControl+0x2de>
      break;
 80080dc:	bf00      	nop
 80080de:	e004      	b.n	80080ea <USBH_HandleControl+0x2de>
      break;
 80080e0:	bf00      	nop
 80080e2:	e002      	b.n	80080ea <USBH_HandleControl+0x2de>
      break;
 80080e4:	bf00      	nop
 80080e6:	e000      	b.n	80080ea <USBH_HandleControl+0x2de>
      break;
 80080e8:	bf00      	nop
  }

  return status;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008102:	79f9      	ldrb	r1, [r7, #7]
 8008104:	2300      	movs	r3, #0
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	2308      	movs	r3, #8
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2300      	movs	r3, #0
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	2200      	movs	r2, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fb46 	bl	80087aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af04      	add	r7, sp, #16
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4611      	mov	r1, r2
 8008134:	461a      	mov	r2, r3
 8008136:	460b      	mov	r3, r1
 8008138:	80fb      	strh	r3, [r7, #6]
 800813a:	4613      	mov	r3, r2
 800813c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800814c:	7979      	ldrb	r1, [r7, #5]
 800814e:	7e3b      	ldrb	r3, [r7, #24]
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	9302      	str	r3, [sp, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	2301      	movs	r3, #1
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fb21 	bl	80087aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af04      	add	r7, sp, #16
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4611      	mov	r1, r2
 800817e:	461a      	mov	r2, r3
 8008180:	460b      	mov	r3, r1
 8008182:	80fb      	strh	r3, [r7, #6]
 8008184:	4613      	mov	r3, r2
 8008186:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008188:	7979      	ldrb	r1, [r7, #5]
 800818a:	2300      	movs	r3, #0
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	9302      	str	r3, [sp, #8]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	2301      	movs	r3, #1
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	2300      	movs	r3, #0
 800819c:	2201      	movs	r2, #1
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fb03 	bl	80087aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081a4:	2300      	movs	r3, #0

}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af04      	add	r7, sp, #16
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	4611      	mov	r1, r2
 80081ba:	461a      	mov	r2, r3
 80081bc:	460b      	mov	r3, r1
 80081be:	80fb      	strh	r3, [r7, #6]
 80081c0:	4613      	mov	r3, r2
 80081c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d2:	7979      	ldrb	r1, [r7, #5]
 80081d4:	7e3b      	ldrb	r3, [r7, #24]
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	2301      	movs	r3, #1
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2200      	movs	r2, #0
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 fade 	bl	80087aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af04      	add	r7, sp, #16
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	460b      	mov	r3, r1
 8008208:	80fb      	strh	r3, [r7, #6]
 800820a:	4613      	mov	r3, r2
 800820c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800820e:	7979      	ldrb	r1, [r7, #5]
 8008210:	2300      	movs	r3, #0
 8008212:	9303      	str	r3, [sp, #12]
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	9302      	str	r3, [sp, #8]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	2301      	movs	r3, #1
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	2302      	movs	r3, #2
 8008222:	2201      	movs	r2, #1
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 fac0 	bl	80087aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af04      	add	r7, sp, #16
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	461a      	mov	r2, r3
 8008242:	4603      	mov	r3, r0
 8008244:	70fb      	strb	r3, [r7, #3]
 8008246:	460b      	mov	r3, r1
 8008248:	70bb      	strb	r3, [r7, #2]
 800824a:	4613      	mov	r3, r2
 800824c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800824e:	7878      	ldrb	r0, [r7, #1]
 8008250:	78ba      	ldrb	r2, [r7, #2]
 8008252:	78f9      	ldrb	r1, [r7, #3]
 8008254:	8b3b      	ldrh	r3, [r7, #24]
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	7d3b      	ldrb	r3, [r7, #20]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	7c3b      	ldrb	r3, [r7, #16]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	4603      	mov	r3, r0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa53 	bl	800870e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa72 	bl	800876c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f836 	bl	8008310 <USBH_GetFreePipe>
 80082a4:	4603      	mov	r3, r0
 80082a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082a8:	89fb      	ldrh	r3, [r7, #14]
 80082aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00a      	beq.n	80082c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	89fb      	ldrh	r3, [r7, #14]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	33e0      	adds	r3, #224	; 0xe0
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082c8:	89fb      	ldrh	r3, [r7, #14]
 80082ca:	b2db      	uxtb	r3, r3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d80d      	bhi.n	8008302 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	33e0      	adds	r3, #224	; 0xe0
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	33e0      	adds	r3, #224	; 0xe0
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	e00f      	b.n	8008342 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	33e0      	adds	r3, #224	; 0xe0
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d102      	bne.n	800833c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	b29b      	uxth	r3, r3
 800833a:	e007      	b.n	800834c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	3301      	adds	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d9ec      	bls.n	8008322 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008348:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800835c:	2201      	movs	r2, #1
 800835e:	490e      	ldr	r1, [pc, #56]	; (8008398 <MX_USB_HOST_Init+0x40>)
 8008360:	480e      	ldr	r0, [pc, #56]	; (800839c <MX_USB_HOST_Init+0x44>)
 8008362:	f7fe fb05 	bl	8006970 <USBH_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800836c:	f7f8 fb16 	bl	800099c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008370:	490b      	ldr	r1, [pc, #44]	; (80083a0 <MX_USB_HOST_Init+0x48>)
 8008372:	480a      	ldr	r0, [pc, #40]	; (800839c <MX_USB_HOST_Init+0x44>)
 8008374:	f7fe fba9 	bl	8006aca <USBH_RegisterClass>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800837e:	f7f8 fb0d 	bl	800099c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008382:	4806      	ldr	r0, [pc, #24]	; (800839c <MX_USB_HOST_Init+0x44>)
 8008384:	f7fe fc2d 	bl	8006be2 <USBH_Start>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800838e:	f7f8 fb05 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	080083b9 	.word	0x080083b9
 800839c:	200001a4 	.word	0x200001a4
 80083a0:	2000000c 	.word	0x2000000c

080083a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80083a8:	4802      	ldr	r0, [pc, #8]	; (80083b4 <MX_USB_HOST_Process+0x10>)
 80083aa:	f7fe fc2b 	bl	8006c04 <USBH_Process>
}
 80083ae:	bf00      	nop
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200001a4 	.word	0x200001a4

080083b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d819      	bhi.n	8008400 <USBH_UserProcess+0x48>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBH_UserProcess+0x1c>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008401 	.word	0x08008401
 80083d8:	080083f1 	.word	0x080083f1
 80083dc:	08008401 	.word	0x08008401
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	080083e9 	.word	0x080083e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083e8:	4b09      	ldr	r3, [pc, #36]	; (8008410 <USBH_UserProcess+0x58>)
 80083ea:	2203      	movs	r2, #3
 80083ec:	701a      	strb	r2, [r3, #0]
  break;
 80083ee:	e008      	b.n	8008402 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <USBH_UserProcess+0x58>)
 80083f2:	2202      	movs	r2, #2
 80083f4:	701a      	strb	r2, [r3, #0]
  break;
 80083f6:	e004      	b.n	8008402 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <USBH_UserProcess+0x58>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
  break;
 80083fe:	e000      	b.n	8008402 <USBH_UserProcess+0x4a>

  default:
  break;
 8008400:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	2000057c 	.word	0x2000057c

08008414 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08a      	sub	sp, #40	; 0x28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800841c:	f107 0314 	add.w	r3, r7, #20
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	609a      	str	r2, [r3, #8]
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008434:	d147      	bne.n	80084c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	4a24      	ldr	r2, [pc, #144]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	6313      	str	r3, [r2, #48]	; 0x30
 8008446:	4b22      	ldr	r3, [pc, #136]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008458:	2300      	movs	r3, #0
 800845a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008460:	f107 0314 	add.w	r3, r7, #20
 8008464:	4619      	mov	r1, r3
 8008466:	481b      	ldr	r0, [pc, #108]	; (80084d4 <HAL_HCD_MspInit+0xc0>)
 8008468:	f7f8 fe76 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800846c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008472:	2302      	movs	r3, #2
 8008474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800847a:	2300      	movs	r3, #0
 800847c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800847e:	230a      	movs	r3, #10
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008482:	f107 0314 	add.w	r3, r7, #20
 8008486:	4619      	mov	r1, r3
 8008488:	4812      	ldr	r0, [pc, #72]	; (80084d4 <HAL_HCD_MspInit+0xc0>)
 800848a:	f7f8 fe65 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800848e:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008492:	4a0f      	ldr	r2, [pc, #60]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	6353      	str	r3, [r2, #52]	; 0x34
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	4a0b      	ldr	r2, [pc, #44]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 80084a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084a8:	6453      	str	r3, [r2, #68]	; 0x44
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <HAL_HCD_MspInit+0xbc>)
 80084ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	2043      	movs	r0, #67	; 0x43
 80084bc:	f7f8 fe15 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084c0:	2043      	movs	r0, #67	; 0x43
 80084c2:	f7f8 fe2e 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084c6:	bf00      	nop
 80084c8:	3728      	adds	r7, #40	; 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40023800 	.word	0x40023800
 80084d4:	40020000 	.word	0x40020000

080084d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe ff6b 	bl	80073c2 <USBH_LL_IncTimer>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe ffa3 	bl	800744e <USBH_LL_Connect>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe ffac 	bl	800747c <USBH_LL_Disconnect>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
 8008538:	4613      	mov	r3, r2
 800853a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe ff5d 	bl	8007416 <USBH_LL_PortEnabled>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe ff5d 	bl	8007432 <USBH_LL_PortDisabled>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800858e:	2b01      	cmp	r3, #1
 8008590:	d12a      	bne.n	80085e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <USBH_LL_Init+0x74>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a15      	ldr	r2, [pc, #84]	; (80085f4 <USBH_LL_Init+0x74>)
 800859e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085a2:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <USBH_LL_Init+0x74>)
 80085a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <USBH_LL_Init+0x74>)
 80085ac:	2208      	movs	r2, #8
 80085ae:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085b0:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <USBH_LL_Init+0x74>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <USBH_LL_Init+0x74>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <USBH_LL_Init+0x74>)
 80085be:	2202      	movs	r2, #2
 80085c0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <USBH_LL_Init+0x74>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085c8:	480a      	ldr	r0, [pc, #40]	; (80085f4 <USBH_LL_Init+0x74>)
 80085ca:	f7f8 ff7a 	bl	80014c2 <HAL_HCD_Init>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085d4:	f7f8 f9e2 	bl	800099c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085d8:	4806      	ldr	r0, [pc, #24]	; (80085f4 <USBH_LL_Init+0x74>)
 80085da:	f7f9 fbdb 	bl	8001d94 <HAL_HCD_GetCurrentFrame>
 80085de:	4603      	mov	r3, r0
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fe fede 	bl	80073a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000580 	.word	0x20000580

080085f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800860e:	4618      	mov	r0, r3
 8008610:	f7f9 fb48 	bl	8001ca4 <HAL_HCD_Start>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f95e 	bl	80088dc <USBH_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008624:	7bbb      	ldrb	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008644:	4618      	mov	r0, r3
 8008646:	f7f9 fb50 	bl	8001cea <HAL_HCD_Stop>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f943 	bl	80088dc <USBH_Get_USB_Status>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 fb9a 	bl	8001db0 <HAL_HCD_GetCurrentSpeed>
 800867c:	4603      	mov	r3, r0
 800867e:	2b02      	cmp	r3, #2
 8008680:	d00c      	beq.n	800869c <USBH_LL_GetSpeed+0x38>
 8008682:	2b02      	cmp	r3, #2
 8008684:	d80d      	bhi.n	80086a2 <USBH_LL_GetSpeed+0x3e>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <USBH_LL_GetSpeed+0x2c>
 800868a:	2b01      	cmp	r3, #1
 800868c:	d003      	beq.n	8008696 <USBH_LL_GetSpeed+0x32>
 800868e:	e008      	b.n	80086a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
    break;
 8008694:	e008      	b.n	80086a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]
    break;
 800869a:	e005      	b.n	80086a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800869c:	2302      	movs	r3, #2
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e002      	b.n	80086a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	bf00      	nop
  }
  return  speed;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f9 fb2b 	bl	8001d24 <HAL_HCD_ResetPort>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f901 	bl	80088dc <USBH_Get_USB_Status>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086de:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 fb33 	bl	8001d6a <HAL_HCD_HC_GetXferCount>
 8008704:	4603      	mov	r3, r0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800870e:	b590      	push	{r4, r7, lr}
 8008710:	b089      	sub	sp, #36	; 0x24
 8008712:	af04      	add	r7, sp, #16
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	4603      	mov	r3, r0
 800871e:	70fb      	strb	r3, [r7, #3]
 8008720:	460b      	mov	r3, r1
 8008722:	70bb      	strb	r3, [r7, #2]
 8008724:	4613      	mov	r3, r2
 8008726:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008736:	787c      	ldrb	r4, [r7, #1]
 8008738:	78ba      	ldrb	r2, [r7, #2]
 800873a:	78f9      	ldrb	r1, [r7, #3]
 800873c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	4623      	mov	r3, r4
 800874e:	f7f8 ff1f 	bl	8001590 <HAL_HCD_HC_Init>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f8bf 	bl	80088dc <USBH_Get_USB_Status>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008762:	7bbb      	ldrb	r3, [r7, #14]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	bd90      	pop	{r4, r7, pc}

0800876c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f7f8 ffb8 	bl	8001700 <HAL_HCD_HC_Halt>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f8a0 	bl	80088dc <USBH_Get_USB_Status>
 800879c:	4603      	mov	r3, r0
 800879e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80087aa:	b590      	push	{r4, r7, lr}
 80087ac:	b089      	sub	sp, #36	; 0x24
 80087ae:	af04      	add	r7, sp, #16
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	461a      	mov	r2, r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	70fb      	strb	r3, [r7, #3]
 80087bc:	460b      	mov	r3, r1
 80087be:	70bb      	strb	r3, [r7, #2]
 80087c0:	4613      	mov	r3, r2
 80087c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087d2:	787c      	ldrb	r4, [r7, #1]
 80087d4:	78ba      	ldrb	r2, [r7, #2]
 80087d6:	78f9      	ldrb	r1, [r7, #3]
 80087d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087e0:	9302      	str	r3, [sp, #8]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	4623      	mov	r3, r4
 80087ee:	f7f8 ffab 	bl	8001748 <HAL_HCD_HC_SubmitRequest>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f86f 	bl	80088dc <USBH_Get_USB_Status>
 80087fe:	4603      	mov	r3, r0
 8008800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008802:	7bbb      	ldrb	r3, [r7, #14]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	bd90      	pop	{r4, r7, pc}

0800880c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7f9 fa8c 	bl	8001d40 <HAL_HCD_HC_GetURBState>
 8008828:	4603      	mov	r3, r0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008844:	2b01      	cmp	r3, #1
 8008846:	d103      	bne.n	8008850 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f872 	bl	8008934 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008850:	20c8      	movs	r0, #200	; 0xc8
 8008852:	f7f8 fb4b 	bl	8000eec <HAL_Delay>
  return USBH_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	4613      	mov	r3, r2
 800886e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008876:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	68f9      	ldr	r1, [r7, #12]
 800887c:	4613      	mov	r3, r2
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	3317      	adds	r3, #23
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	4613      	mov	r3, r2
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	333c      	adds	r3, #60	; 0x3c
 800889e:	78ba      	ldrb	r2, [r7, #2]
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	e009      	b.n	80088b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	4613      	mov	r3, r2
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	1a9b      	subs	r3, r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	333d      	adds	r3, #61	; 0x3d
 80088b4:	78ba      	ldrb	r2, [r7, #2]
 80088b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f8 fb0c 	bl	8000eec <HAL_Delay>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d817      	bhi.n	8008920 <USBH_Get_USB_Status+0x44>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <USBH_Get_USB_Status+0x1c>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008909 	.word	0x08008909
 80088fc:	0800890f 	.word	0x0800890f
 8008900:	08008915 	.word	0x08008915
 8008904:	0800891b 	.word	0x0800891b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
    break;
 800890c:	e00b      	b.n	8008926 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800890e:	2302      	movs	r3, #2
 8008910:	73fb      	strb	r3, [r7, #15]
    break;
 8008912:	e008      	b.n	8008926 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
    break;
 8008918:	e005      	b.n	8008926 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800891a:	2302      	movs	r3, #2
 800891c:	73fb      	strb	r3, [r7, #15]
    break;
 800891e:	e002      	b.n	8008926 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008920:	2302      	movs	r3, #2
 8008922:	73fb      	strb	r3, [r7, #15]
    break;
 8008924:	bf00      	nop
  }
  return usb_status;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	e001      	b.n	8008952 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800894e:	2301      	movs	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	461a      	mov	r2, r3
 8008956:	2101      	movs	r1, #1
 8008958:	4803      	ldr	r0, [pc, #12]	; (8008968 <MX_DriverVbusFS+0x34>)
 800895a:	f7f8 fd99 	bl	8001490 <HAL_GPIO_WritePin>
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40020800 	.word	0x40020800

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 b82b 	b.w	80089cc <_malloc_r>
 8008976:	bf00      	nop
 8008978:	20000084 	.word	0x20000084

0800897c <free>:
 800897c:	4b02      	ldr	r3, [pc, #8]	; (8008988 <free+0xc>)
 800897e:	4601      	mov	r1, r0
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f000 bb31 	b.w	8008fe8 <_free_r>
 8008986:	bf00      	nop
 8008988:	20000084 	.word	0x20000084

0800898c <sbrk_aligned>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4e0e      	ldr	r6, [pc, #56]	; (80089c8 <sbrk_aligned+0x3c>)
 8008990:	460c      	mov	r4, r1
 8008992:	6831      	ldr	r1, [r6, #0]
 8008994:	4605      	mov	r5, r0
 8008996:	b911      	cbnz	r1, 800899e <sbrk_aligned+0x12>
 8008998:	f000 fad6 	bl	8008f48 <_sbrk_r>
 800899c:	6030      	str	r0, [r6, #0]
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 fad1 	bl	8008f48 <_sbrk_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <sbrk_aligned+0x34>
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d007      	beq.n	80089c4 <sbrk_aligned+0x38>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fac6 	bl	8008f48 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d101      	bne.n	80089c4 <sbrk_aligned+0x38>
 80089c0:	f04f 34ff 	mov.w	r4, #4294967295
 80089c4:	4620      	mov	r0, r4
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	20000964 	.word	0x20000964

080089cc <_malloc_r>:
 80089cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d0:	1ccd      	adds	r5, r1, #3
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	2d00      	cmp	r5, #0
 80089e0:	4607      	mov	r7, r0
 80089e2:	db01      	blt.n	80089e8 <_malloc_r+0x1c>
 80089e4:	42a9      	cmp	r1, r5
 80089e6:	d905      	bls.n	80089f4 <_malloc_r+0x28>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	2600      	movs	r6, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ac8 <_malloc_r+0xfc>
 80089f8:	f000 f868 	bl	8008acc <__malloc_lock>
 80089fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008a00:	461c      	mov	r4, r3
 8008a02:	bb5c      	cbnz	r4, 8008a5c <_malloc_r+0x90>
 8008a04:	4629      	mov	r1, r5
 8008a06:	4638      	mov	r0, r7
 8008a08:	f7ff ffc0 	bl	800898c <sbrk_aligned>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	d155      	bne.n	8008abe <_malloc_r+0xf2>
 8008a12:	f8d8 4000 	ldr.w	r4, [r8]
 8008a16:	4626      	mov	r6, r4
 8008a18:	2e00      	cmp	r6, #0
 8008a1a:	d145      	bne.n	8008aa8 <_malloc_r+0xdc>
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d048      	beq.n	8008ab2 <_malloc_r+0xe6>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	4631      	mov	r1, r6
 8008a24:	4638      	mov	r0, r7
 8008a26:	eb04 0903 	add.w	r9, r4, r3
 8008a2a:	f000 fa8d 	bl	8008f48 <_sbrk_r>
 8008a2e:	4581      	cmp	r9, r0
 8008a30:	d13f      	bne.n	8008ab2 <_malloc_r+0xe6>
 8008a32:	6821      	ldr	r1, [r4, #0]
 8008a34:	1a6d      	subs	r5, r5, r1
 8008a36:	4629      	mov	r1, r5
 8008a38:	4638      	mov	r0, r7
 8008a3a:	f7ff ffa7 	bl	800898c <sbrk_aligned>
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d037      	beq.n	8008ab2 <_malloc_r+0xe6>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	442b      	add	r3, r5
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	f8d8 3000 	ldr.w	r3, [r8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d038      	beq.n	8008ac2 <_malloc_r+0xf6>
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	42a2      	cmp	r2, r4
 8008a54:	d12b      	bne.n	8008aae <_malloc_r+0xe2>
 8008a56:	2200      	movs	r2, #0
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	e00f      	b.n	8008a7c <_malloc_r+0xb0>
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	1b52      	subs	r2, r2, r5
 8008a60:	d41f      	bmi.n	8008aa2 <_malloc_r+0xd6>
 8008a62:	2a0b      	cmp	r2, #11
 8008a64:	d917      	bls.n	8008a96 <_malloc_r+0xca>
 8008a66:	1961      	adds	r1, r4, r5
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	6025      	str	r5, [r4, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	6059      	strne	r1, [r3, #4]
 8008a70:	6863      	ldr	r3, [r4, #4]
 8008a72:	bf08      	it	eq
 8008a74:	f8c8 1000 	streq.w	r1, [r8]
 8008a78:	5162      	str	r2, [r4, r5]
 8008a7a:	604b      	str	r3, [r1, #4]
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f104 060b 	add.w	r6, r4, #11
 8008a82:	f000 f829 	bl	8008ad8 <__malloc_unlock>
 8008a86:	f026 0607 	bic.w	r6, r6, #7
 8008a8a:	1d23      	adds	r3, r4, #4
 8008a8c:	1af2      	subs	r2, r6, r3
 8008a8e:	d0ae      	beq.n	80089ee <_malloc_r+0x22>
 8008a90:	1b9b      	subs	r3, r3, r6
 8008a92:	50a3      	str	r3, [r4, r2]
 8008a94:	e7ab      	b.n	80089ee <_malloc_r+0x22>
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	6862      	ldr	r2, [r4, #4]
 8008a9a:	d1dd      	bne.n	8008a58 <_malloc_r+0x8c>
 8008a9c:	f8c8 2000 	str.w	r2, [r8]
 8008aa0:	e7ec      	b.n	8008a7c <_malloc_r+0xb0>
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	6864      	ldr	r4, [r4, #4]
 8008aa6:	e7ac      	b.n	8008a02 <_malloc_r+0x36>
 8008aa8:	4634      	mov	r4, r6
 8008aaa:	6876      	ldr	r6, [r6, #4]
 8008aac:	e7b4      	b.n	8008a18 <_malloc_r+0x4c>
 8008aae:	4613      	mov	r3, r2
 8008ab0:	e7cc      	b.n	8008a4c <_malloc_r+0x80>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f000 f80e 	bl	8008ad8 <__malloc_unlock>
 8008abc:	e797      	b.n	80089ee <_malloc_r+0x22>
 8008abe:	6025      	str	r5, [r4, #0]
 8008ac0:	e7dc      	b.n	8008a7c <_malloc_r+0xb0>
 8008ac2:	605b      	str	r3, [r3, #4]
 8008ac4:	deff      	udf	#255	; 0xff
 8008ac6:	bf00      	nop
 8008ac8:	20000960 	.word	0x20000960

08008acc <__malloc_lock>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__malloc_lock+0x8>)
 8008ace:	f000 ba88 	b.w	8008fe2 <__retarget_lock_acquire_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	20000aa8 	.word	0x20000aa8

08008ad8 <__malloc_unlock>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__malloc_unlock+0x8>)
 8008ada:	f000 ba83 	b.w	8008fe4 <__retarget_lock_release_recursive>
 8008ade:	bf00      	nop
 8008ae0:	20000aa8 	.word	0x20000aa8

08008ae4 <std>:
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	4604      	mov	r4, r0
 8008aea:	e9c0 3300 	strd	r3, r3, [r0]
 8008aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008af2:	6083      	str	r3, [r0, #8]
 8008af4:	8181      	strh	r1, [r0, #12]
 8008af6:	6643      	str	r3, [r0, #100]	; 0x64
 8008af8:	81c2      	strh	r2, [r0, #14]
 8008afa:	6183      	str	r3, [r0, #24]
 8008afc:	4619      	mov	r1, r3
 8008afe:	2208      	movs	r2, #8
 8008b00:	305c      	adds	r0, #92	; 0x5c
 8008b02:	f000 f9e5 	bl	8008ed0 <memset>
 8008b06:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <std+0x58>)
 8008b08:	6263      	str	r3, [r4, #36]	; 0x24
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <std+0x5c>)
 8008b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <std+0x60>)
 8008b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <std+0x64>)
 8008b14:	6323      	str	r3, [r4, #48]	; 0x30
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <std+0x68>)
 8008b18:	6224      	str	r4, [r4, #32]
 8008b1a:	429c      	cmp	r4, r3
 8008b1c:	d006      	beq.n	8008b2c <std+0x48>
 8008b1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b22:	4294      	cmp	r4, r2
 8008b24:	d002      	beq.n	8008b2c <std+0x48>
 8008b26:	33d0      	adds	r3, #208	; 0xd0
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d105      	bne.n	8008b38 <std+0x54>
 8008b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b34:	f000 ba54 	b.w	8008fe0 <__retarget_lock_init_recursive>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08008d21 	.word	0x08008d21
 8008b40:	08008d43 	.word	0x08008d43
 8008b44:	08008d7b 	.word	0x08008d7b
 8008b48:	08008d9f 	.word	0x08008d9f
 8008b4c:	20000968 	.word	0x20000968

08008b50 <stdio_exit_handler>:
 8008b50:	4a02      	ldr	r2, [pc, #8]	; (8008b5c <stdio_exit_handler+0xc>)
 8008b52:	4903      	ldr	r1, [pc, #12]	; (8008b60 <stdio_exit_handler+0x10>)
 8008b54:	4803      	ldr	r0, [pc, #12]	; (8008b64 <stdio_exit_handler+0x14>)
 8008b56:	f000 b869 	b.w	8008c2c <_fwalk_sglue>
 8008b5a:	bf00      	nop
 8008b5c:	2000002c 	.word	0x2000002c
 8008b60:	0800918d 	.word	0x0800918d
 8008b64:	20000038 	.word	0x20000038

08008b68 <cleanup_stdio>:
 8008b68:	6841      	ldr	r1, [r0, #4]
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <cleanup_stdio+0x34>)
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	4604      	mov	r4, r0
 8008b72:	d001      	beq.n	8008b78 <cleanup_stdio+0x10>
 8008b74:	f000 fb0a 	bl	800918c <_fflush_r>
 8008b78:	68a1      	ldr	r1, [r4, #8]
 8008b7a:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <cleanup_stdio+0x38>)
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	d002      	beq.n	8008b86 <cleanup_stdio+0x1e>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fb03 	bl	800918c <_fflush_r>
 8008b86:	68e1      	ldr	r1, [r4, #12]
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <cleanup_stdio+0x3c>)
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	d004      	beq.n	8008b98 <cleanup_stdio+0x30>
 8008b8e:	4620      	mov	r0, r4
 8008b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b94:	f000 bafa 	b.w	800918c <_fflush_r>
 8008b98:	bd10      	pop	{r4, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000968 	.word	0x20000968
 8008ba0:	200009d0 	.word	0x200009d0
 8008ba4:	20000a38 	.word	0x20000a38

08008ba8 <global_stdio_init.part.0>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <global_stdio_init.part.0+0x30>)
 8008bac:	4c0b      	ldr	r4, [pc, #44]	; (8008bdc <global_stdio_init.part.0+0x34>)
 8008bae:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <global_stdio_init.part.0+0x38>)
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	f7ff ff94 	bl	8008ae4 <std>
 8008bbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	2109      	movs	r1, #9
 8008bc4:	f7ff ff8e 	bl	8008ae4 <std>
 8008bc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bcc:	2202      	movs	r2, #2
 8008bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd2:	2112      	movs	r1, #18
 8008bd4:	f7ff bf86 	b.w	8008ae4 <std>
 8008bd8:	20000aa0 	.word	0x20000aa0
 8008bdc:	20000968 	.word	0x20000968
 8008be0:	08008b51 	.word	0x08008b51

08008be4 <__sfp_lock_acquire>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sfp_lock_acquire+0x8>)
 8008be6:	f000 b9fc 	b.w	8008fe2 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	20000aa9 	.word	0x20000aa9

08008bf0 <__sfp_lock_release>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sfp_lock_release+0x8>)
 8008bf2:	f000 b9f7 	b.w	8008fe4 <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000aa9 	.word	0x20000aa9

08008bfc <__sinit>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	4604      	mov	r4, r0
 8008c00:	f7ff fff0 	bl	8008be4 <__sfp_lock_acquire>
 8008c04:	6a23      	ldr	r3, [r4, #32]
 8008c06:	b11b      	cbz	r3, 8008c10 <__sinit+0x14>
 8008c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c0c:	f7ff bff0 	b.w	8008bf0 <__sfp_lock_release>
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <__sinit+0x28>)
 8008c12:	6223      	str	r3, [r4, #32]
 8008c14:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <__sinit+0x2c>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1f5      	bne.n	8008c08 <__sinit+0xc>
 8008c1c:	f7ff ffc4 	bl	8008ba8 <global_stdio_init.part.0>
 8008c20:	e7f2      	b.n	8008c08 <__sinit+0xc>
 8008c22:	bf00      	nop
 8008c24:	08008b69 	.word	0x08008b69
 8008c28:	20000aa0 	.word	0x20000aa0

08008c2c <_fwalk_sglue>:
 8008c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	4607      	mov	r7, r0
 8008c32:	4688      	mov	r8, r1
 8008c34:	4614      	mov	r4, r2
 8008c36:	2600      	movs	r6, #0
 8008c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8008c40:	d505      	bpl.n	8008c4e <_fwalk_sglue+0x22>
 8008c42:	6824      	ldr	r4, [r4, #0]
 8008c44:	2c00      	cmp	r4, #0
 8008c46:	d1f7      	bne.n	8008c38 <_fwalk_sglue+0xc>
 8008c48:	4630      	mov	r0, r6
 8008c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d907      	bls.n	8008c64 <_fwalk_sglue+0x38>
 8008c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	d003      	beq.n	8008c64 <_fwalk_sglue+0x38>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	47c0      	blx	r8
 8008c62:	4306      	orrs	r6, r0
 8008c64:	3568      	adds	r5, #104	; 0x68
 8008c66:	e7e9      	b.n	8008c3c <_fwalk_sglue+0x10>

08008c68 <_puts_r>:
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b570      	push	{r4, r5, r6, lr}
 8008c6c:	6884      	ldr	r4, [r0, #8]
 8008c6e:	4605      	mov	r5, r0
 8008c70:	460e      	mov	r6, r1
 8008c72:	b90b      	cbnz	r3, 8008c78 <_puts_r+0x10>
 8008c74:	f7ff ffc2 	bl	8008bfc <__sinit>
 8008c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c7a:	07db      	lsls	r3, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_puts_r+0x22>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	0598      	lsls	r0, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_puts_r+0x22>
 8008c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c86:	f000 f9ac 	bl	8008fe2 <__retarget_lock_acquire_recursive>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	0719      	lsls	r1, r3, #28
 8008c8e:	d513      	bpl.n	8008cb8 <_puts_r+0x50>
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b18b      	cbz	r3, 8008cb8 <_puts_r+0x50>
 8008c94:	3e01      	subs	r6, #1
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	60a3      	str	r3, [r4, #8]
 8008ca0:	b9e9      	cbnz	r1, 8008cde <_puts_r+0x76>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da2e      	bge.n	8008d04 <_puts_r+0x9c>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	210a      	movs	r1, #10
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 f87b 	bl	8008da6 <__swbuf_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d007      	beq.n	8008cc4 <_puts_r+0x5c>
 8008cb4:	250a      	movs	r5, #10
 8008cb6:	e007      	b.n	8008cc8 <_puts_r+0x60>
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f8b0 	bl	8008e20 <__swsetup_r>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d0e7      	beq.n	8008c94 <_puts_r+0x2c>
 8008cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8008cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cca:	07da      	lsls	r2, r3, #31
 8008ccc:	d405      	bmi.n	8008cda <_puts_r+0x72>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	059b      	lsls	r3, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_puts_r+0x72>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd6:	f000 f985 	bl	8008fe4 <__retarget_lock_release_recursive>
 8008cda:	4628      	mov	r0, r5
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da04      	bge.n	8008cec <_puts_r+0x84>
 8008ce2:	69a2      	ldr	r2, [r4, #24]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	dc06      	bgt.n	8008cf6 <_puts_r+0x8e>
 8008ce8:	290a      	cmp	r1, #10
 8008cea:	d004      	beq.n	8008cf6 <_puts_r+0x8e>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	6022      	str	r2, [r4, #0]
 8008cf2:	7019      	strb	r1, [r3, #0]
 8008cf4:	e7cf      	b.n	8008c96 <_puts_r+0x2e>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f000 f854 	bl	8008da6 <__swbuf_r>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d1c9      	bne.n	8008c96 <_puts_r+0x2e>
 8008d02:	e7df      	b.n	8008cc4 <_puts_r+0x5c>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	250a      	movs	r5, #10
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	6022      	str	r2, [r4, #0]
 8008d0c:	701d      	strb	r5, [r3, #0]
 8008d0e:	e7db      	b.n	8008cc8 <_puts_r+0x60>

08008d10 <puts>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <puts+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f7ff bfa7 	b.w	8008c68 <_puts_r>
 8008d1a:	bf00      	nop
 8008d1c:	20000084 	.word	0x20000084

08008d20 <__sread>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	460c      	mov	r4, r1
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	f000 f8fc 	bl	8008f24 <_read_r>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	bfab      	itete	ge
 8008d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d32:	89a3      	ldrhlt	r3, [r4, #12]
 8008d34:	181b      	addge	r3, r3, r0
 8008d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d3a:	bfac      	ite	ge
 8008d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d3e:	81a3      	strhlt	r3, [r4, #12]
 8008d40:	bd10      	pop	{r4, pc}

08008d42 <__swrite>:
 8008d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d46:	461f      	mov	r7, r3
 8008d48:	898b      	ldrh	r3, [r1, #12]
 8008d4a:	05db      	lsls	r3, r3, #23
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	4616      	mov	r6, r2
 8008d52:	d505      	bpl.n	8008d60 <__swrite+0x1e>
 8008d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d58:	2302      	movs	r3, #2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f000 f8d0 	bl	8008f00 <_lseek_r>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	4628      	mov	r0, r5
 8008d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d76:	f000 b8f7 	b.w	8008f68 <_write_r>

08008d7a <__sseek>:
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d82:	f000 f8bd 	bl	8008f00 <_lseek_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	bf15      	itete	ne
 8008d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d96:	81a3      	strheq	r3, [r4, #12]
 8008d98:	bf18      	it	ne
 8008d9a:	81a3      	strhne	r3, [r4, #12]
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__sclose>:
 8008d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da2:	f000 b89d 	b.w	8008ee0 <_close_r>

08008da6 <__swbuf_r>:
 8008da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da8:	460e      	mov	r6, r1
 8008daa:	4614      	mov	r4, r2
 8008dac:	4605      	mov	r5, r0
 8008dae:	b118      	cbz	r0, 8008db8 <__swbuf_r+0x12>
 8008db0:	6a03      	ldr	r3, [r0, #32]
 8008db2:	b90b      	cbnz	r3, 8008db8 <__swbuf_r+0x12>
 8008db4:	f7ff ff22 	bl	8008bfc <__sinit>
 8008db8:	69a3      	ldr	r3, [r4, #24]
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	071a      	lsls	r2, r3, #28
 8008dc0:	d525      	bpl.n	8008e0e <__swbuf_r+0x68>
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b31b      	cbz	r3, 8008e0e <__swbuf_r+0x68>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	6922      	ldr	r2, [r4, #16]
 8008dca:	1a98      	subs	r0, r3, r2
 8008dcc:	6963      	ldr	r3, [r4, #20]
 8008dce:	b2f6      	uxtb	r6, r6
 8008dd0:	4283      	cmp	r3, r0
 8008dd2:	4637      	mov	r7, r6
 8008dd4:	dc04      	bgt.n	8008de0 <__swbuf_r+0x3a>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f9d7 	bl	800918c <_fflush_r>
 8008dde:	b9e0      	cbnz	r0, 8008e1a <__swbuf_r+0x74>
 8008de0:	68a3      	ldr	r3, [r4, #8]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	701e      	strb	r6, [r3, #0]
 8008dee:	6962      	ldr	r2, [r4, #20]
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d004      	beq.n	8008e00 <__swbuf_r+0x5a>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	07db      	lsls	r3, r3, #31
 8008dfa:	d506      	bpl.n	8008e0a <__swbuf_r+0x64>
 8008dfc:	2e0a      	cmp	r6, #10
 8008dfe:	d104      	bne.n	8008e0a <__swbuf_r+0x64>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f9c2 	bl	800918c <_fflush_r>
 8008e08:	b938      	cbnz	r0, 8008e1a <__swbuf_r+0x74>
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f805 	bl	8008e20 <__swsetup_r>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0d5      	beq.n	8008dc6 <__swbuf_r+0x20>
 8008e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e1e:	e7f4      	b.n	8008e0a <__swbuf_r+0x64>

08008e20 <__swsetup_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <__swsetup_r+0xac>)
 8008e24:	4605      	mov	r5, r0
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	460c      	mov	r4, r1
 8008e2a:	b118      	cbz	r0, 8008e34 <__swsetup_r+0x14>
 8008e2c:	6a03      	ldr	r3, [r0, #32]
 8008e2e:	b90b      	cbnz	r3, 8008e34 <__swsetup_r+0x14>
 8008e30:	f7ff fee4 	bl	8008bfc <__sinit>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e3a:	0718      	lsls	r0, r3, #28
 8008e3c:	d422      	bmi.n	8008e84 <__swsetup_r+0x64>
 8008e3e:	06d9      	lsls	r1, r3, #27
 8008e40:	d407      	bmi.n	8008e52 <__swsetup_r+0x32>
 8008e42:	2309      	movs	r3, #9
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e034      	b.n	8008ebc <__swsetup_r+0x9c>
 8008e52:	0758      	lsls	r0, r3, #29
 8008e54:	d512      	bpl.n	8008e7c <__swsetup_r+0x5c>
 8008e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e58:	b141      	cbz	r1, 8008e6c <__swsetup_r+0x4c>
 8008e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e5e:	4299      	cmp	r1, r3
 8008e60:	d002      	beq.n	8008e68 <__swsetup_r+0x48>
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f8c0 	bl	8008fe8 <_free_r>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6363      	str	r3, [r4, #52]	; 0x34
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	2300      	movs	r3, #0
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f043 0308 	orr.w	r3, r3, #8
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	b94b      	cbnz	r3, 8008e9c <__swsetup_r+0x7c>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e92:	d003      	beq.n	8008e9c <__swsetup_r+0x7c>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f9c6 	bl	8009228 <__smakebuf_r>
 8008e9c:	89a0      	ldrh	r0, [r4, #12]
 8008e9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea2:	f010 0301 	ands.w	r3, r0, #1
 8008ea6:	d00a      	beq.n	8008ebe <__swsetup_r+0x9e>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60a3      	str	r3, [r4, #8]
 8008eac:	6963      	ldr	r3, [r4, #20]
 8008eae:	425b      	negs	r3, r3
 8008eb0:	61a3      	str	r3, [r4, #24]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	b943      	cbnz	r3, 8008ec8 <__swsetup_r+0xa8>
 8008eb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eba:	d1c4      	bne.n	8008e46 <__swsetup_r+0x26>
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	0781      	lsls	r1, r0, #30
 8008ec0:	bf58      	it	pl
 8008ec2:	6963      	ldrpl	r3, [r4, #20]
 8008ec4:	60a3      	str	r3, [r4, #8]
 8008ec6:	e7f4      	b.n	8008eb2 <__swsetup_r+0x92>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7f7      	b.n	8008ebc <__swsetup_r+0x9c>
 8008ecc:	20000084 	.word	0x20000084

08008ed0 <memset>:
 8008ed0:	4402      	add	r2, r0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d100      	bne.n	8008eda <memset+0xa>
 8008ed8:	4770      	bx	lr
 8008eda:	f803 1b01 	strb.w	r1, [r3], #1
 8008ede:	e7f9      	b.n	8008ed4 <memset+0x4>

08008ee0 <_close_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_close_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f7 fee5 	bl	8000cba <_close>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_close_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_close_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000aa4 	.word	0x20000aa4

08008f00 <_lseek_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_lseek_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f7 fefa 	bl	8000d08 <_lseek>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_lseek_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_lseek_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000aa4 	.word	0x20000aa4

08008f24 <_read_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d07      	ldr	r5, [pc, #28]	; (8008f44 <_read_r+0x20>)
 8008f28:	4604      	mov	r4, r0
 8008f2a:	4608      	mov	r0, r1
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	602a      	str	r2, [r5, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f7f7 fea4 	bl	8000c80 <_read>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_read_r+0x1e>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_read_r+0x1e>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20000aa4 	.word	0x20000aa4

08008f48 <_sbrk_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	; (8008f64 <_sbrk_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f7 fee6 	bl	8000d24 <_sbrk>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_sbrk_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_sbrk_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000aa4 	.word	0x20000aa4

08008f68 <_write_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	; (8008f88 <_write_r+0x20>)
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4611      	mov	r1, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	602a      	str	r2, [r5, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	f7f7 fcf4 	bl	8000964 <_write>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_write_r+0x1e>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_write_r+0x1e>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	20000aa4 	.word	0x20000aa4

08008f8c <__errno>:
 8008f8c:	4b01      	ldr	r3, [pc, #4]	; (8008f94 <__errno+0x8>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000084 	.word	0x20000084

08008f98 <__libc_init_array>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4d0d      	ldr	r5, [pc, #52]	; (8008fd0 <__libc_init_array+0x38>)
 8008f9c:	4c0d      	ldr	r4, [pc, #52]	; (8008fd4 <__libc_init_array+0x3c>)
 8008f9e:	1b64      	subs	r4, r4, r5
 8008fa0:	10a4      	asrs	r4, r4, #2
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	42a6      	cmp	r6, r4
 8008fa6:	d109      	bne.n	8008fbc <__libc_init_array+0x24>
 8008fa8:	4d0b      	ldr	r5, [pc, #44]	; (8008fd8 <__libc_init_array+0x40>)
 8008faa:	4c0c      	ldr	r4, [pc, #48]	; (8008fdc <__libc_init_array+0x44>)
 8008fac:	f000 f99a 	bl	80092e4 <_init>
 8008fb0:	1b64      	subs	r4, r4, r5
 8008fb2:	10a4      	asrs	r4, r4, #2
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	42a6      	cmp	r6, r4
 8008fb8:	d105      	bne.n	8008fc6 <__libc_init_array+0x2e>
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc0:	4798      	blx	r3
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7ee      	b.n	8008fa4 <__libc_init_array+0xc>
 8008fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fca:	4798      	blx	r3
 8008fcc:	3601      	adds	r6, #1
 8008fce:	e7f2      	b.n	8008fb6 <__libc_init_array+0x1e>
 8008fd0:	08009334 	.word	0x08009334
 8008fd4:	08009334 	.word	0x08009334
 8008fd8:	08009334 	.word	0x08009334
 8008fdc:	08009338 	.word	0x08009338

08008fe0 <__retarget_lock_init_recursive>:
 8008fe0:	4770      	bx	lr

08008fe2 <__retarget_lock_acquire_recursive>:
 8008fe2:	4770      	bx	lr

08008fe4 <__retarget_lock_release_recursive>:
 8008fe4:	4770      	bx	lr
	...

08008fe8 <_free_r>:
 8008fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fea:	2900      	cmp	r1, #0
 8008fec:	d044      	beq.n	8009078 <_free_r+0x90>
 8008fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff2:	9001      	str	r0, [sp, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f1a1 0404 	sub.w	r4, r1, #4
 8008ffa:	bfb8      	it	lt
 8008ffc:	18e4      	addlt	r4, r4, r3
 8008ffe:	f7ff fd65 	bl	8008acc <__malloc_lock>
 8009002:	4a1e      	ldr	r2, [pc, #120]	; (800907c <_free_r+0x94>)
 8009004:	9801      	ldr	r0, [sp, #4]
 8009006:	6813      	ldr	r3, [r2, #0]
 8009008:	b933      	cbnz	r3, 8009018 <_free_r+0x30>
 800900a:	6063      	str	r3, [r4, #4]
 800900c:	6014      	str	r4, [r2, #0]
 800900e:	b003      	add	sp, #12
 8009010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009014:	f7ff bd60 	b.w	8008ad8 <__malloc_unlock>
 8009018:	42a3      	cmp	r3, r4
 800901a:	d908      	bls.n	800902e <_free_r+0x46>
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	1961      	adds	r1, r4, r5
 8009020:	428b      	cmp	r3, r1
 8009022:	bf01      	itttt	eq
 8009024:	6819      	ldreq	r1, [r3, #0]
 8009026:	685b      	ldreq	r3, [r3, #4]
 8009028:	1949      	addeq	r1, r1, r5
 800902a:	6021      	streq	r1, [r4, #0]
 800902c:	e7ed      	b.n	800900a <_free_r+0x22>
 800902e:	461a      	mov	r2, r3
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	b10b      	cbz	r3, 8009038 <_free_r+0x50>
 8009034:	42a3      	cmp	r3, r4
 8009036:	d9fa      	bls.n	800902e <_free_r+0x46>
 8009038:	6811      	ldr	r1, [r2, #0]
 800903a:	1855      	adds	r5, r2, r1
 800903c:	42a5      	cmp	r5, r4
 800903e:	d10b      	bne.n	8009058 <_free_r+0x70>
 8009040:	6824      	ldr	r4, [r4, #0]
 8009042:	4421      	add	r1, r4
 8009044:	1854      	adds	r4, r2, r1
 8009046:	42a3      	cmp	r3, r4
 8009048:	6011      	str	r1, [r2, #0]
 800904a:	d1e0      	bne.n	800900e <_free_r+0x26>
 800904c:	681c      	ldr	r4, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	6053      	str	r3, [r2, #4]
 8009052:	440c      	add	r4, r1
 8009054:	6014      	str	r4, [r2, #0]
 8009056:	e7da      	b.n	800900e <_free_r+0x26>
 8009058:	d902      	bls.n	8009060 <_free_r+0x78>
 800905a:	230c      	movs	r3, #12
 800905c:	6003      	str	r3, [r0, #0]
 800905e:	e7d6      	b.n	800900e <_free_r+0x26>
 8009060:	6825      	ldr	r5, [r4, #0]
 8009062:	1961      	adds	r1, r4, r5
 8009064:	428b      	cmp	r3, r1
 8009066:	bf04      	itt	eq
 8009068:	6819      	ldreq	r1, [r3, #0]
 800906a:	685b      	ldreq	r3, [r3, #4]
 800906c:	6063      	str	r3, [r4, #4]
 800906e:	bf04      	itt	eq
 8009070:	1949      	addeq	r1, r1, r5
 8009072:	6021      	streq	r1, [r4, #0]
 8009074:	6054      	str	r4, [r2, #4]
 8009076:	e7ca      	b.n	800900e <_free_r+0x26>
 8009078:	b003      	add	sp, #12
 800907a:	bd30      	pop	{r4, r5, pc}
 800907c:	20000960 	.word	0x20000960

08009080 <__sflush_r>:
 8009080:	898a      	ldrh	r2, [r1, #12]
 8009082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009086:	4605      	mov	r5, r0
 8009088:	0710      	lsls	r0, r2, #28
 800908a:	460c      	mov	r4, r1
 800908c:	d458      	bmi.n	8009140 <__sflush_r+0xc0>
 800908e:	684b      	ldr	r3, [r1, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	dc05      	bgt.n	80090a0 <__sflush_r+0x20>
 8009094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	dc02      	bgt.n	80090a0 <__sflush_r+0x20>
 800909a:	2000      	movs	r0, #0
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d0f9      	beq.n	800909a <__sflush_r+0x1a>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090ac:	682f      	ldr	r7, [r5, #0]
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	d032      	beq.n	800911a <__sflush_r+0x9a>
 80090b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	075a      	lsls	r2, r3, #29
 80090ba:	d505      	bpl.n	80090c8 <__sflush_r+0x48>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	1ac0      	subs	r0, r0, r3
 80090c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090c2:	b10b      	cbz	r3, 80090c8 <__sflush_r+0x48>
 80090c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090c6:	1ac0      	subs	r0, r0, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	4602      	mov	r2, r0
 80090cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ce:	6a21      	ldr	r1, [r4, #32]
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b0      	blx	r6
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	d106      	bne.n	80090e8 <__sflush_r+0x68>
 80090da:	6829      	ldr	r1, [r5, #0]
 80090dc:	291d      	cmp	r1, #29
 80090de:	d82b      	bhi.n	8009138 <__sflush_r+0xb8>
 80090e0:	4a29      	ldr	r2, [pc, #164]	; (8009188 <__sflush_r+0x108>)
 80090e2:	410a      	asrs	r2, r1
 80090e4:	07d6      	lsls	r6, r2, #31
 80090e6:	d427      	bmi.n	8009138 <__sflush_r+0xb8>
 80090e8:	2200      	movs	r2, #0
 80090ea:	6062      	str	r2, [r4, #4]
 80090ec:	04d9      	lsls	r1, r3, #19
 80090ee:	6922      	ldr	r2, [r4, #16]
 80090f0:	6022      	str	r2, [r4, #0]
 80090f2:	d504      	bpl.n	80090fe <__sflush_r+0x7e>
 80090f4:	1c42      	adds	r2, r0, #1
 80090f6:	d101      	bne.n	80090fc <__sflush_r+0x7c>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b903      	cbnz	r3, 80090fe <__sflush_r+0x7e>
 80090fc:	6560      	str	r0, [r4, #84]	; 0x54
 80090fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009100:	602f      	str	r7, [r5, #0]
 8009102:	2900      	cmp	r1, #0
 8009104:	d0c9      	beq.n	800909a <__sflush_r+0x1a>
 8009106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800910a:	4299      	cmp	r1, r3
 800910c:	d002      	beq.n	8009114 <__sflush_r+0x94>
 800910e:	4628      	mov	r0, r5
 8009110:	f7ff ff6a 	bl	8008fe8 <_free_r>
 8009114:	2000      	movs	r0, #0
 8009116:	6360      	str	r0, [r4, #52]	; 0x34
 8009118:	e7c0      	b.n	800909c <__sflush_r+0x1c>
 800911a:	2301      	movs	r3, #1
 800911c:	4628      	mov	r0, r5
 800911e:	47b0      	blx	r6
 8009120:	1c41      	adds	r1, r0, #1
 8009122:	d1c8      	bne.n	80090b6 <__sflush_r+0x36>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0c5      	beq.n	80090b6 <__sflush_r+0x36>
 800912a:	2b1d      	cmp	r3, #29
 800912c:	d001      	beq.n	8009132 <__sflush_r+0xb2>
 800912e:	2b16      	cmp	r3, #22
 8009130:	d101      	bne.n	8009136 <__sflush_r+0xb6>
 8009132:	602f      	str	r7, [r5, #0]
 8009134:	e7b1      	b.n	800909a <__sflush_r+0x1a>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	e7ad      	b.n	800909c <__sflush_r+0x1c>
 8009140:	690f      	ldr	r7, [r1, #16]
 8009142:	2f00      	cmp	r7, #0
 8009144:	d0a9      	beq.n	800909a <__sflush_r+0x1a>
 8009146:	0793      	lsls	r3, r2, #30
 8009148:	680e      	ldr	r6, [r1, #0]
 800914a:	bf08      	it	eq
 800914c:	694b      	ldreq	r3, [r1, #20]
 800914e:	600f      	str	r7, [r1, #0]
 8009150:	bf18      	it	ne
 8009152:	2300      	movne	r3, #0
 8009154:	eba6 0807 	sub.w	r8, r6, r7
 8009158:	608b      	str	r3, [r1, #8]
 800915a:	f1b8 0f00 	cmp.w	r8, #0
 800915e:	dd9c      	ble.n	800909a <__sflush_r+0x1a>
 8009160:	6a21      	ldr	r1, [r4, #32]
 8009162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009164:	4643      	mov	r3, r8
 8009166:	463a      	mov	r2, r7
 8009168:	4628      	mov	r0, r5
 800916a:	47b0      	blx	r6
 800916c:	2800      	cmp	r0, #0
 800916e:	dc06      	bgt.n	800917e <__sflush_r+0xfe>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e78e      	b.n	800909c <__sflush_r+0x1c>
 800917e:	4407      	add	r7, r0
 8009180:	eba8 0800 	sub.w	r8, r8, r0
 8009184:	e7e9      	b.n	800915a <__sflush_r+0xda>
 8009186:	bf00      	nop
 8009188:	dfbffffe 	.word	0xdfbffffe

0800918c <_fflush_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	4605      	mov	r5, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b913      	cbnz	r3, 800919c <_fflush_r+0x10>
 8009196:	2500      	movs	r5, #0
 8009198:	4628      	mov	r0, r5
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	b118      	cbz	r0, 80091a6 <_fflush_r+0x1a>
 800919e:	6a03      	ldr	r3, [r0, #32]
 80091a0:	b90b      	cbnz	r3, 80091a6 <_fflush_r+0x1a>
 80091a2:	f7ff fd2b 	bl	8008bfc <__sinit>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f3      	beq.n	8009196 <_fflush_r+0xa>
 80091ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091b0:	07d0      	lsls	r0, r2, #31
 80091b2:	d404      	bmi.n	80091be <_fflush_r+0x32>
 80091b4:	0599      	lsls	r1, r3, #22
 80091b6:	d402      	bmi.n	80091be <_fflush_r+0x32>
 80091b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ba:	f7ff ff12 	bl	8008fe2 <__retarget_lock_acquire_recursive>
 80091be:	4628      	mov	r0, r5
 80091c0:	4621      	mov	r1, r4
 80091c2:	f7ff ff5d 	bl	8009080 <__sflush_r>
 80091c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	4605      	mov	r5, r0
 80091cc:	d4e4      	bmi.n	8009198 <_fflush_r+0xc>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	059b      	lsls	r3, r3, #22
 80091d2:	d4e1      	bmi.n	8009198 <_fflush_r+0xc>
 80091d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091d6:	f7ff ff05 	bl	8008fe4 <__retarget_lock_release_recursive>
 80091da:	e7dd      	b.n	8009198 <_fflush_r+0xc>

080091dc <__swhatbuf_r>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	2900      	cmp	r1, #0
 80091e6:	b096      	sub	sp, #88	; 0x58
 80091e8:	4615      	mov	r5, r2
 80091ea:	461e      	mov	r6, r3
 80091ec:	da0d      	bge.n	800920a <__swhatbuf_r+0x2e>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091f4:	f04f 0100 	mov.w	r1, #0
 80091f8:	bf0c      	ite	eq
 80091fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091fe:	2340      	movne	r3, #64	; 0x40
 8009200:	2000      	movs	r0, #0
 8009202:	6031      	str	r1, [r6, #0]
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	b016      	add	sp, #88	; 0x58
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	466a      	mov	r2, sp
 800920c:	f000 f848 	bl	80092a0 <_fstat_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	dbec      	blt.n	80091ee <__swhatbuf_r+0x12>
 8009214:	9901      	ldr	r1, [sp, #4]
 8009216:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800921a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800921e:	4259      	negs	r1, r3
 8009220:	4159      	adcs	r1, r3
 8009222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009226:	e7eb      	b.n	8009200 <__swhatbuf_r+0x24>

08009228 <__smakebuf_r>:
 8009228:	898b      	ldrh	r3, [r1, #12]
 800922a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800922c:	079d      	lsls	r5, r3, #30
 800922e:	4606      	mov	r6, r0
 8009230:	460c      	mov	r4, r1
 8009232:	d507      	bpl.n	8009244 <__smakebuf_r+0x1c>
 8009234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	6123      	str	r3, [r4, #16]
 800923c:	2301      	movs	r3, #1
 800923e:	6163      	str	r3, [r4, #20]
 8009240:	b002      	add	sp, #8
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	ab01      	add	r3, sp, #4
 8009246:	466a      	mov	r2, sp
 8009248:	f7ff ffc8 	bl	80091dc <__swhatbuf_r>
 800924c:	9900      	ldr	r1, [sp, #0]
 800924e:	4605      	mov	r5, r0
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff fbbb 	bl	80089cc <_malloc_r>
 8009256:	b948      	cbnz	r0, 800926c <__smakebuf_r+0x44>
 8009258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925c:	059a      	lsls	r2, r3, #22
 800925e:	d4ef      	bmi.n	8009240 <__smakebuf_r+0x18>
 8009260:	f023 0303 	bic.w	r3, r3, #3
 8009264:	f043 0302 	orr.w	r3, r3, #2
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	e7e3      	b.n	8009234 <__smakebuf_r+0xc>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	6020      	str	r0, [r4, #0]
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	6163      	str	r3, [r4, #20]
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	6120      	str	r0, [r4, #16]
 800927e:	b15b      	cbz	r3, 8009298 <__smakebuf_r+0x70>
 8009280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009284:	4630      	mov	r0, r6
 8009286:	f000 f81d 	bl	80092c4 <_isatty_r>
 800928a:	b128      	cbz	r0, 8009298 <__smakebuf_r+0x70>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	f023 0303 	bic.w	r3, r3, #3
 8009292:	f043 0301 	orr.w	r3, r3, #1
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	431d      	orrs	r5, r3
 800929c:	81a5      	strh	r5, [r4, #12]
 800929e:	e7cf      	b.n	8009240 <__smakebuf_r+0x18>

080092a0 <_fstat_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	; (80092c0 <_fstat_r+0x20>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	f7f7 fd10 	bl	8000cd2 <_fstat>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d102      	bne.n	80092bc <_fstat_r+0x1c>
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	b103      	cbz	r3, 80092bc <_fstat_r+0x1c>
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	20000aa4 	.word	0x20000aa4

080092c4 <_isatty_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d06      	ldr	r5, [pc, #24]	; (80092e0 <_isatty_r+0x1c>)
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	f7f7 fd0f 	bl	8000cf2 <_isatty>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d102      	bne.n	80092de <_isatty_r+0x1a>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b103      	cbz	r3, 80092de <_isatty_r+0x1a>
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	20000aa4 	.word	0x20000aa4

080092e4 <_init>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr

080092f0 <_fini>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr
